//# QUANTUM KONTROLLER SUITE
//# QSEQ PATTERN SEQUENCER
@OnLoad
	ShowLayout 2
	LabelPads {[ QK:QSEQ ]}
	SetShortName {QSEQ}
	if unassigned scene_durs
		//in the code a pattern refers to what is called a Sequence in the GUI
		//in the code a sequence step contains a pattern to trigger
		//legacy naming from porting the QK:BEATS app
		mode = 0 //# modes of operation
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:PatternLocked
		SetMetroPPQN 4	
		ppqn = 4
		scene_change_requested = -1 //# on pad down has next scene number
		pattn_change_requested = -1 //# on pad down has next pattn number
		scene_change_pattn_reset = TRUE //# Goto pattn 0 when user changes scene
		scene_changing = FALSE
		pattn_changing = FALSE
		in_mode_select = FALSE //# Toggle for changing modes mode
		in_seq_mode = FALSE //# editing pattern steps mode+
		allow_mode_chg_playbk = TRUE //# Mode change during playback
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		use_turn_around = TRUE //# last pattn as turn around on last bar of scene
		mgen_device_id=2 //used for midi control of pads on LP. This instances id
		mgen_sel_dev=0 //used for midi control of pads on LP. The currently selected instance
		led_index=20 // notes 20-46 used for updating LED feedback on 16pads 
		shift_is_down=FALSE
		send_cc_back_to_knobs = TRUE
		knobs_controller=[15,40,41,42,43] //midi controller ch & 4 base ccs. cc's=cc's+(4xmgen_device_id)
		pattn_beat_count = 0
		scene_beat_count = 0
		trigger_pattern_before_beat=TRUE //Trigger pattern before beat (mgen quant>0) or onBeat and (mgen quant=0)
		sequencing_paused=FALSE //Dont send new triggers out for any channels. trigger mode only
		SetTimerInterval 1000
		time_for_turnaround=FALSE
		Call @InitKnobVariables //# All knob settings on load
		Call @SysexMessageSetup
		Call @SetupSequences
		Call @SetupLayout
		Call @SetupKnobset0
	endif 
@End

@SysexMessageSetup //QK Sysex messages. from KNTRL to BEATS and from BEATS to midi controllers
	qk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40] //QK messages
	len_header=6 
	//QK message types 
	sx_scene_change=100 //scene change
	sx_scene_durations=101 //scene durations
	sx_rtn_to_song=22 //return to song 
	sx_glbl_swing=23 //global swing
	sx_copy_scene=89 //Copy paste contents of whole scene
	sx_mgen_knobs=40 //MGEN 4 knobs --to knobs controller
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	scn_duration = 0 
	pattn_duration = 0
	seq_ch=0 //# the sequence lane 0-3 
	seq_type=3 //# sequence lane to edit. Step, Note, Velo, CC
	num_ch_names=20 //the number of labels we have for naming a channel
	num_ch_dests=4 //number of names we have for midi destinations gui, atom, lk, helium, drambo
	step_val=0
  copy_paste_status=0 //# Copy paste 0=off; 1=Copied; 2=Paste
  return_to_mode=0 //# Copy paste on completion
	rnd_scn_chance=0 //% chance scene change will be to a random one
	rnd_ptn_chance=0 //% chance pattern change will be to a random one
	num_scns_with_dur=0 //RND only selects scenes with duration
	num_ptns_with_dur=[0,0,0,0, 0,0,0,0] //RND only selects patterns with duration per scene
	rot_dir=1
	move_all=0 //boolean to move all or move 1 in step edit
	move_all_dir=0 //direction for all to move in step edit mode
	last_pad=0
	sel_pad_type=1 //for labelling and colouring sequence pads
@End

@SetupSequences
	cc_vals=[1,2,3,4]
  scene_durs = [8,0,0,0,0,0,0,0]
  in_seq_mode = FALSE
	current_scene = 0 // #0-7 Pads 0-7
  current_pattn = 0 // #0-7 Pads 8-15
	//# selected step for editing on the current playing scene/pattn
	sel_step = 0 
  //# All sequences 8scenes x 8patterns x 16 steps. Each 1024 cells
	//# slot = (sel_scene*128) + (sel_pattn*16) + sel_step 
	FillArray a0_pattns, -1, 1024 //# pattern triggered at each possible step 8scn, 32bars, 4beats per bar 
	FillArray a1_pattns, -1, 1024
	FillArray a2_pattns, -1, 1024
	FillArray a3_pattns, -1, 1024
	FillArray a4_pattns, -1, 1024
	FillArray a5_pattns, -1, 1024
	FillArray a6_pattns, -1, 1024
	FillArray a7_pattns, -1, 1024
	pattern_pad_cols=[4,4,4,4,4,4,4,4]
	FillArray current_playing_patterns, -1, 8 //the pattn number playing in each channel
	FillArray trigger_pattn_change_requested_for_ch, -1, 8 //trigger mode handling requested patterns
	//# sequence_num=(current_scene*128)+(current_pattn*16)+(seq_ch)
	FillArray sequence_lengths, 16, 1024 //A number between 1 and 16
 	FillArray sequence_rates, 1, 8 //Each seq channel step rate is beat or bar. as index to mpulses_per_seq_step=[4,16]
	def_sequence_length=16 //16 steps
	def_sequence_rate=1 //index to mpulses_per_seq_step ie 1 bar per step as index to mpulses_per_seq_step=[4,16]
	//initial values
	pattn_durs[0]=4 //# Pattern durations in beats
	FillArray device_gui_num, 0, 8 // each channel can load a different GUI or just one GUI for all channels or mix
	FillArray trigger_method, 0, 8  //Switching between Note & CCV as trigger_method per channel
	FillArray trigger_method_offset , 0, 8 //Starting note num or CC num for CCV mode
	FillArray sequence_lengths, 4, 8 //sequence lengths for all channels 
	FillArray chan_max_patterns, 16, 8
	FillArray chan_mute_states, FALSE, 8 //default state for a channel is unmuted 0
	FillArray chan_solo_states, FALSE, 8 //default state for a channel is unmuted 0
	FillArray chan_launch_states, TRUE, 8 //default state for a channel is launched 1
	quick_config=4 //see @QuickConfig
	Call @QuickConfig
	
	//# MetroPulse settings
	curr_steps=[0,0,0,0,0,0,0,0] //# current note 
	in_mid_step=[0,0,0,0,0,0,0,0] //# for slow rates metroPulse can be between steps
	on_pulse_b4_change=[0,0,0,0,0,0,0,0] //for schedule pattern trigger before beat to use midi gen app quantisation
	mpulses_per_seq_step = [4,16] //# a divisor to give metroPulses per note beat or bar
	curr_pattn_pulses=[0,0,0,0,0,0,0,0] //# one for each seq_ch. relative to MetroPulse
	//# stored midi note num for current playing note. for sending OFF notes
	//# stored at time midi note on is sent. see @OnMetroPulse
	pattn_length=16
	next_scene=0 //for calculation before beat triggering
	next_pattn=0 //for calculation before beat triggering
	Call @MakeFirstSequenceSceneTriggerAllScenes
	pad_down_trigger_all_ready_for_playback=FALSE //when host stopped we can send pattern triggers 
@End
		
@OnHostStart 
	Log { }
	Log { --- HOST START ---}
	if (HostBeat = 0) and (HostBar = 0)
		//# SEQUENCE MODE RESETS...
		curr_pattn_pulses=[0,0,0,0,0,0,0,0] //# reset metroPulse count for each seq.
		curr_steps=[0,0,0,0,0,0,0,0]
		in_mid_step=[0,0,0,0,0,0,0,0]
		pattn_beat_count = -1
		scene_beat_count = -1
		scene_changing = FALSE
		if (songmode = 0)
			current_scene = 0
			current_pattn = 0
		elseif (songmode = 1)
			current_pattn = 0
		endif
	else
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		pattn_completed_bars = pattn_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
		pattn_beat_count = pattn_completed_bars + HostBeat
		curr_pattn_pulses=[0,0,0,0,0,0,0,0] //# reset metroPulse count for each seq.
		curr_steps=[0,0,0,0,0,0,0,0]
		in_mid_step=[0,0,0,0,0,0,0,0]
	endif
	next_scene=current_scene 
	next_pattn=current_pattn 
	Call @SetupLayout
@End

@OnHostStop
  scene_beat_count = 0
	pattn_beat_count = 0
	FillArray current_playing_patterns, -1, 8
	FillArray trigger_pattn_change_requested_for_ch, -1, 8
  Call @SetupLayout
@End 

@OnMetroPulse
	//Log {-- CMP }, CurrentMetroPulse, { ---}
	if CurrentMetroPulse=15 //pulse before new bar update next scene and sequence. They only change per bar
		Call @GetSceneForNextBeat //also calls GetNextPattn
		Log {MP15 so got next_scene:}, next_scene+1, { and next_pattn:}, next_pattn+1
	endif
	//# Update counts - pulses and step positions all seq_chs. Trigger patterns if moving to new step
	for ch = 0 to 7
		pulses_in_seq_step = mpulses_per_seq_step[sequence_rates[ch]] //Beat or bar
		in_mid_step[ch] = (curr_pattn_pulses[ch]) % pulses_in_seq_step
		if (curr_pattn_pulses[ch]+1) % pulses_in_seq_step //for schedule trigger before beat
			on_pulse_b4_change[ch] = FALSE
		else
		  on_pulse_b4_change[ch] = TRUE
		endif
		
		//schedule pattern trigger before beat or instant trigger on beat
		if trigger_pattern_before_beat
			if on_pulse_b4_change[ch]
				Call @TriggerPattern //schedule - midi generator has quantisation > 0 
			endif
		else
			if not in_mid_step[ch]
				Call @TriggerPattern //instant on beat - midi generator has quantisation = 0
			endif
		endif
		
		//FlashPad
		if not in_mid_step[ch]
			if in_seq_mode and (ch=seq_ch)
				FlashPad curr_steps[seq_ch]
			endif	
		endif	
		
		//increment the pattern pulse
		sequence_num=(current_scene*128)+(current_pattn*16)+ch
		curr_seq_len = sequence_lengths[sequence_num]
		curr_pattn_pulses[ch] = curr_pattn_pulses[ch] + 1 
		if in_mid_step[ch] = pulses_in_seq_step-1 //# last pulse b4 increment pattern or reset
			if curr_steps[ch] >= curr_seq_len-1
				curr_pattn_pulses[ch]=0
				curr_steps[ch]=0
			else
				curr_steps[ch] = curr_steps[ch] + 1
			endif
		endif
	endfor
@End

@TriggerPattern
	step_slot=(current_scene*128)+(current_pattn*16)+curr_steps[ch]
	if trigger_pattern_before_beat and HostRunning //schedule before beat. Get next scene, pattn, step...
		next_step=curr_steps[ch]+1
		if (next_step >= curr_seq_len) or scene_changing or pattn_changing 
			next_step=0
		endif
		step_slot=(next_scene*128)+(next_pattn*16) + next_step
		//Log {Next step is: }, next_step+1
	elseif not HostRunning and pad_down_trigger_all_ready_for_playback
	  step_slot=(current_scene*128)+(current_pattn*16)
	endif
	offset = trigger_method_offset[ch] //starting note num or cc_num for CCV mode
	ch_trigger_method=trigger_method[ch] //trigger methods 0-2; Note, CC_NUM; CC_VAL
	ptn_triggered_for_ch=-1
	pattern_num_to_trigger=-1
	pattern_triggered_by_user=FALSE //if true allow pattern change when sequencing paused
	if ch=0 and not trigger_pattn_change_requested_for_ch[ch]>=0 //trigger mode overrides seq mode
		if a0_pattns[step_slot] >= 0
			pattern_num_to_trigger = a0_pattns[step_slot]
			current_playing_patterns[ch]=a0_pattns[step_slot]
			ptn_triggered_for_ch=0
		endif
	elseif ch=1 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a1_pattns[step_slot] >= 0
			pattern_num_to_trigger = a1_pattns[step_slot]
			current_playing_patterns[ch]=a1_pattns[step_slot]
			ptn_triggered_for_ch=1
		endif
	elseif ch=2 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a2_pattns[step_slot] >= 0
			pattern_num_to_trigger = a2_pattns[step_slot]
			current_playing_patterns[ch]=a2_pattns[step_slot]
			ptn_triggered_for_ch=2
		endif
	elseif ch=3 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a3_pattns[step_slot] >= 0
			pattern_num_to_trigger = a3_pattns[step_slot] 
			current_playing_patterns[ch]=a3_pattns[step_slot]
			ptn_triggered_for_ch=3
		endif
	elseif ch=4 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a4_pattns[step_slot] >= 0
			pattern_num_to_trigger = a4_pattns[step_slot]
			current_playing_patterns[ch]=a4_pattns[step_slot]
			ptn_triggered_for_ch=4
		endif
	elseif ch=5 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a5_pattns[step_slot] >= 0
			pattern_num_to_trigger = a5_pattns[step_slot] 
			current_playing_patterns[ch]=a5_pattns[step_slot]
			ptn_triggered_for_ch=5
		endif
	elseif ch=6 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a6_pattns[step_slot] >= 0
			pattern_num_to_trigger = a6_pattns[step_slot] 
			current_playing_patterns[ch]=a6_pattns[step_slot]
			ptn_triggered_for_ch=6
		endif
	elseif ch=7 and not trigger_pattn_change_requested_for_ch[ch]>=0
		if a7_pattns[step_slot] >= 0
			pattern_num_to_trigger = a7_pattns[step_slot]
			current_playing_patterns[ch]=a7_pattns[step_slot]
			ptn_triggered_for_ch=7
		endif
	endif
	//TRIGGER PATTERN MODE 
	if trigger_pattn_change_requested_for_ch[ch]>=0 //trigger pattern mode
		pattern_num_to_trigger = trigger_pattn_change_requested_for_ch[ch]
		current_playing_patterns[ch]=trigger_pattn_change_requested_for_ch[ch]
		ptn_triggered_for_ch=ch
		trigger_pattn_change_requested_for_ch[ch]=-1 
		pattern_triggered_by_user=TRUE
	endif
	
	//TRIGGER THE ACTUAL PATTERN	
	if (not sequencing_paused) or pattern_triggered_by_user 
		if ptn_triggered_for_ch>=0 and ch_trigger_method=0 //NOTE
			SendMIDINoteOn ptn_triggered_for_ch, pattern_num_to_trigger + offset, 127
			SendMIDINoteOff ptn_triggered_for_ch, pattern_num_to_trigger + offset, 64, 1
			//Log {sent midi: ch}, ptn_triggered_for_ch, { #}, pattern_num_to_trigger + offset
		elseif ptn_triggered_for_ch>=0 and ch_trigger_method=1 //CC NUM
			SendMIDICC ptn_triggered_for_ch, pattern_num_to_trigger + offset, 127
		elseif ptn_triggered_for_ch>=0 and ch_trigger_method=2 //CC VAL
			SendMIDICC ptn_triggered_for_ch, offset, pattern_num_to_trigger
		endif
		if mode=10 and ptn_triggered_for_ch=seq_ch and in_seq_mode //we want to see the current pattn highlighted
			Call @LabelAllSequencePads
		endif
		pattern_triggered_by_user=FALSE
	endif
@End

@OnNewBeat //# Handle Scene and Pattern changes
	Log {--- new beat ---}, HostBeat, { beat# }, HostBeat 
	scene_beat_count = scene_beat_count + 1
	pattn_beat_count = pattn_beat_count + 1
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	pattn_slot = (current_scene * 8) + (current_pattn)
	current_pattn_duration = pattn_durs[pattn_slot] * HostBeatsPerMeasure
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	
	if scene_changing
		Call @HandleSceneChange //will then handle pattn change
	elseif pattn_changing
		Call @HandleSceneChange
	endif
@End

@OnNewBar
  Log {---- NEW BAR= }, HostBar, { --- }
@End

@GetSceneForNextBeat
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	next_scene = current_scene
	scene_changing = FALSE
	//scenes change for 2 reasons: User request, scene duration expired
	if scene_change_requested > -1
		scene_changing = TRUE
		next_scene = scene_change_requested
	elseif scene_beat_count+1 >= current_scene_duration
		if (songmode > 0) //locked to scene
	  	next_scene = current_scene
		elseif scene_durs[current_scene+1] > 0 or current_scene=7
		  next_scene = (current_scene + 1)%8  //# Going to next or back to first
		elseif (scene_durs[current_scene+1] <= 0) //# also song end
  		next_scene = 0 //# no duration in next scene return to beginning
			scene_changing = TRUE
		endif
		if ((Random 1,99) < rnd_scn_chance) and songmode=0 //%chance of random scene change if not scene locked
			rnd_scn = (Random 0, num_scns_with_dur) //get random scene with duration
			if scene_durs[rnd_scn]>0 and pattn_durs[rnd_scn * 8]>0
				next_scene=rnd_scn //if rnd_scn and first pattn have duration
			else
			  next_scene=current_scene
			endif
		endif
	endif
	Log {Scene for next beat: }, next_scene+1
	Call @GetPattnForNextBeat
@End

@GetPattnForNextBeat
	pattn_slot = (current_scene * 8) + (current_pattn)
	current_pattn_duration = pattn_durs[pattn_slot] * HostBeatsPerMeasure
	time_for_turnaround = FALSE
	if use_turn_around
  	Call @TimeForTurnaround
	endif
	pattn_slot = (next_scene * 8) + current_pattn
	next_pattn = current_pattn
	pattn_changing = FALSE
	//pattns change for 4 reasons: scene changed, User request, turnaround time, pattn duration expired	
	if scene_changing
		pattn_changing = TRUE
		next_pattn=0
	elseif (pattn_change_requested > -1)
		pattn_changing = TRUE
		next_pattn = pattn_change_requested
		songmode = 2
	elseif (time_for_turnaround)
		pattn_changing = TRUE
		next_pattn = 7 //# play last pattn for one bar as a turn around before scene change
	elseif (pattn_beat_count+1 >= current_pattn_duration) and (current_pattn_duration>0)
		if (songmode = 2) //# Loop current pattn & Scene
	    next_pattn = current_pattn
	  elseif pattn_durs[pattn_slot+1]>0
	    pattn_changing = TRUE
			next_pattn = (current_pattn + 1)%8 //next or back to first
		elseif (pattn_durs[pattn_slot+1] <= 0)
			pattn_changing = TRUE
	  	next_pattn = 0 //# no duration no next pattn
		endif
		if ((Random 1,99) < rnd_ptn_chance) and songmode<2 //%chance of pattn change if not pattn locked
	    rnd_ptn = (Random 0, num_ptns_with_dur) //get random pattn with duration
			if pattn_durs[(next_scene * 8) + rnd_ptn]>0
				current_pattn=rnd_ptn //if rnd_ptn has duration
			endif
		endif
	endif
	Log {Pattn for next beat }, next_pattn+1
@End

@TimeForTurnaround
	//# Under these conditions jump to last pattn for 1 bar before scene change
	//# 2nd last pattn in scene has no duration. Last pattn has 4 beat duration
	//# Mode must be in song or scene lock and must be 1 bar before scene ends
	pattn6 = pattn_durs[(current_scene * 8) + 6]
	pattn7 = pattn_durs[(current_scene * 8) + 7]
	if (songmode <= 1) and (pattn6 = 0) and (pattn7 > 0) and (current_pattn <= 5) and (scene_beat_count+1 = current_scene_duration - HostBeatsPerMeasure)
		time_for_turnaround = TRUE
	endif
@End

@HandleSceneChange //# Work out which scene is next
	if return_to_song_mode_requested
		return_to_song_mode_requested = FALSE
	endif
	current_scene = next_scene
	scene_beat_count = 0
	pattn_beat_count = 0
  Call @HandlePattnChange //# Scene change effect pattn change
	scene_changing = FALSE
@End

@HandlePattnChange // Set new pattn occurs on new bar
	current_pattn = next_pattn	
	pattn_beat_count = 0 //# reset pattn beat count on new pattn
  //# SEQUENCE MODE RESETS.	..
  curr_pattn_pulses=[0,0,0,0,0,0,0,0] //# reset metroPulse count for each seq.
  curr_steps=[0,0,0,0,0,0,0,0] //# reset steps for each seq.
	in_mid_step=[0,0,0,0,0,0,0,0]
	scene_change_requested = -1
	pattn_change_requested = -1 //# reset request flag
	pattn_changing = FALSE
	Call @SetupLayout
@End

@LogCurrentInfo
	pattn_slot = (current_scene * 8) + (current_pattn)
	current_pattn_duration = pattn_durs[pattn_slot]
	current_scene_duration = scene_durs[current_scene]
	Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { Pattern:}, current_pattn+1, { }, pattn_beat_count+1, {/}, current_pattn_duration, { bars}, { Mode: }, mode, { HostBeat: }, HostBeat+1, { PS:}, pattn_slot
@End

@OnPadDown
  last_pad = LastPad // so midi in can simulate LastPad also see OnMidiIn
	Call @OnPadDown2 //midi input cant trigger @OnPadDown, It calls @OnPadDown2
@End

@OnPadDown2 //# Splitting this event into separate handlers
	if in_mode_select 
		if (HostRunning and (last_pad > 0) and NOT allow_mode_chg_playbk)
			Exit //# Only return to song allowed in playback
		elseif (HostRunning and last_pad=0)
			Call @HandleReturnToSongMode
	  elseif last_pad=1
			mode = last_pad //scenes mode
			in_mode_select=FALSE
			Call @SetupLayout
			Call @SetupKnobset0
			Call @OnPadDown_KnobSetSelect
		elseif last_pad=2
			StartTimer
			LabelPads {HOLD PAD DOWN TO CHANGE}
			timer_type=2
		elseif last_pad=9
			Exit //# Not in use
		elseif (last_pad>=3 and last_pad<=5) or (last_pad=15)
    	//# Settings modes. Dont exit. Scale, MidiOut, CCVals,
			Call @HandleSettingsModeActions
		elseif (last_pad=6) and not (mode=9 or mode=11 or mode<=1)
			Exit //# COPY PASTE not allowed
		elseif (last_pad=7) and not (mode<=1 or mode>=8)
			Exit //# DELETE not allowed
		elseif last_pad=8
			Call @HandleGuiRequest // Show/Hide GUI
		elseif last_pad=10
		  sequencing_paused = not sequencing_paused
			Call @SetupSettingsLayout
		elseif last_pad=11 //sequence mode
			mode=9 
      in_mode_select = FALSE
    	in_seq_mode = TRUE
		elseif last_pad=12 //trigger play mode
			mode=10
			in_mode_select = FALSE
    	in_seq_mode = TRUE
		elseif last_pad = 13
			StartTimer
			LabelPads {HOLD PAD DOWN TO MAKE SEQUENCE1 INTO A SCENE TRIGGER}
			timer_type=2
		elseif last_pad = 14
			mode=14
      in_mode_select = FALSE
    	in_seq_mode = TRUE
		elseif last_pad=6 and ((mode=9) or (mode=11) or (mode<=1))//# COPY PASTE
			Call @HandleCopyPasteActions
		elseif (last_pad=7) //# reset mode
			Call @HandleResetActions
		else
			mode = last_pad
			in_mode_select = FALSE
		endif
		//# Handle mode change
		if mode = 0
			songmode = 0
			in_seq_mode = FALSE
		elseif mode=1
			in_seq_mode = FALSE
		endif
		Call @SendMidiCCBackToKnobs
		Call @SetupLayout
		Call @OnPadDown_KnobSetSelect
		Call @HandleCopyPasteStateLabelling
	//# NOT IN MODE SELECT......
	elseif (NOT in_mode_select and mode=1) //Scenes mode
		Call @OnPadDown_ScenePattnChange
		Call @SetupKnobset0
	elseif (NOT in_mode_select and NOT in_seq_mode)
		Call @HandleModeActions //process that happen in settings mode
  elseif (NOT in_mode_select and in_seq_mode)
		Call @HandleSeqModeActions
  endif
@End

@OnTimer
	if timer_type=1
	  trigger_pattern_before_beat = not trigger_pattern_before_beat
		Call @SetupSettingsLayout
		StopTimer
		if trigger_pattern_before_beat
			LabelPads {MIDI GENERATOR(S) PATTERN/CLIP QUANTISTATION MUST BE BEAT OR BAR}
		else
			LabelPads {MIDI GENERATOR(S) PATTERN/CLIP QUANTISTATION MUST BE OFF (0)}
		endif
	elseif timer_type=2
		LabelPads {Scene}, current_scene+1, { Sequence1 now triggers pattern }, current_scene+1, { on all channels}
		StopTimer
		scene_to_change=current_scene
		Call @MakeFirstSequenceIntoSceneTrigger
		mode=9  //goto sequence mode to have a look
    in_mode_select = FALSE
  	in_seq_mode = TRUE
		Call @LabelAllSequencePads
		Call @SetupKnobset5
	endif
@End

@UpdateSettingPadColors //DELETE
	//Update GUI pad colors and LP colors in settings mode
	for i = 0 to 15
		ColorPad i, settings_pad_cols[i]
		if mgen_device_id=mgen_sel_dev
			if i=mode
				SendMIDINoteOn 15, i+led_index, 8
			else
				SendMIDINoteOn 15, i+led_index, settings_pad_cols[i]
			endif
		endif
		LatchPad i, NO 
	endfor
	LatchPad mode, YES
@End

@HandleSettingsModeActions
	if last_pad=3
		Call @QuickConfig
	endif
	LabelPad 6, { } //# CopyPaste not allowed
	LabelPad 7, { } //# Delete not allowed here
	for i = 0 to 15
		LatchPad mode, NO
	endfor
	if last_pad=15
		Call @ReverseSequence
		in_mode_select=FALSE
		in_seq_mode=TRUE
		Call @SetupLayout
		mode=9
		Call @OnPadDown_KnobSetSelect
	else
		mode = last_pad
		Call @OnPadDown_KnobSetSelect
	endif
	Call @UpdateSettingsPadColors
@End

@QuickConfig
	//cycle through channel configs
	kik=0
	snr=1
	hat=2
	cym=3
	prc=4
	kit=5
	bss=6
	led=7
	pad=8
	plk=9
	arp=10
	ar2=11
	mel=12
	har=13
	key=14
	drn=15
	swl=16
	chd=17
	fxs=18
	scp=19
	ska=20
	//destination names (midi generating piano rolls)
	gui=0
	atm=1
	ilk=2
	hel=3
	drm=4
	//trigger_method: 0:NOTE  1:CCV 
	trigger_method=[0,0,0,0, 0,0,0,0]
	trigger_method_offset=[0,0,0,0, 0,0,0,0]
	//Channel name  to be sequenced	 
	quick_config = quick_config+1
	if quick_config > 3
		quick_config=0
	endif
	device_gui_num=[0,0,0,0, 0,0,0,0]
	if quick_config=0
		ch_names= [kit, ska, fxs, bss,   plk, led, arp, pad]
		ch_destns=[ilk, ilk, ilk, ilk,   ilk, ilk, ilk, ilk]
	elseif quick_config=1
		ch_names= [kit, ska, fxs, bss,   plk, led, arp, pad]
		ch_destns=[drm, drm, drm, drm,   drm, drm, drm, drm]
	elseif quick_config=2
		ch_names= [kit, ska, fxs, bss,   plk, led, arp, pad]
		ch_destns=[atm, atm, atm, atm,   atm, atm, atm, atm]
		device_gui_num=[0,1,2,3, 4,5,6,7]
	elseif quick_config=3
		ch_names= [kit, ska, fxs, bss,   plk, led, arp, pad]
		ch_destns=[hel, hel, hel, hel,   hel, hel, hel, hel]
		device_gui_num=[0,0,0,0, 1,1,1,1]
	endif	
	Call @SetupSettingsLayout
@End

@HandleReturnToSongMode
	return_to_song_mode_requested = TRUE
	scene_change_requested = current_scene
	in_mode_select = FALSE
	songmode = 0
	mode = 0
	ColorPad 0, 3
  ColorPad 8, 3
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, 0+led_index, 3
		SendMIDINoteOn 15, 8+led_index, 3
	endif
@End

@HandleCopyPasteStateLabelling
	if (copy_paste_status=1) and return_to_mode<=7 
		//# CP activated for scenePatt mode
		LabelPads {Copied Scene}, current_scene+1, { and Pattern}, current_pattn+1, {. Select a SCENE or PATTERN slot to paste to}
	elseif (copy_paste_status=1) and return_to_mode=9 
		//# CP activated for seq mode
		LabelPads {STEP COPY: Copied Scene}, current_scene+1, { Pattern}, current_pattn+1, { STEP}, sel_step+1, {. Select STEP slot [... and ch] to paste to}
		ColorPad sel_step, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, sel_step+led_index, 3 //LED FEEDBACK
		endif
	elseif (copy_paste_status=1) and return_to_mode=11
		//# CP activated for seq mode
		LabelPads {SEQ COPY: Copied Scene}, current_scene+1, { Pattern}, current_pattn+1, { CH}, seq_ch+1, {. Select a Channel then tap any pad to paste (16steps)}
		ColorPad sel_step, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, sel_step+led_index, 3
		endif
	endif
@End

@HandleResetActions
	return_to_mode=mode
	mode=7
	if return_to_mode>=8
		in_seq_mode=TRUE
		Call @OnPadDown_KnobSetSelect
		LabelPads {DELETE: Select a step to reset [SHIFT to exit]}
	else
		LabelPads {DELETE: Select a scene or pattn slot to reset [SHIFT to exit]}
	endif
	in_mode_select = FALSE
@End

@HandleCopyPasteActions
	//splitting onPadDown
	//# Copy/Paste pad hit so 'copy' current scene/pattn/seq xcp
	return_to_mode=mode
	mode=6
	copied_scene = current_scene
	copied_pattn = current_pattn
	copied_seq_pad = sel_step
	copied_ch = seq_ch //# for copying to another channel store here
	copy_paste_status=1 //# COPY
	in_mode_select = FALSE
	if return_to_mode=9 or return_to_mode=11
		in_seq_mode=TRUE
		Call @OnPadDown_KnobSetSelect
	endif
@End

@HandleModeActions
	//Splitting onPadDown2
	//# handle mode actions if record or reset else do knob scene change
	if not (copy_paste_status=2 or mode=7)
		Call @OnPadDown_ScenePattnChange
 	endif
	Call @OnPadDown_KnobSetSelect
	if (mode = 6) //# COPY/PASTE
		if copy_mode=0 and last_pad<=7 //# only call CP if pad and copy mode correspond
    	copy_paste_status=2 //# PASTE
  		return_to_mode=0
  		Call @CopyPaste //# copy paste scene
    elseif copy_mode=1 and last_pad>=8 
    	copy_paste_status=2 //# PASTE
  		return_to_mode=0
  		Call @CopyPaste //# copy paste pattn
    endif
	elseif (mode = 7) and (last_pad <= 7) //# reset mode
  	reset_type=0
  	Call @ResetScenePatternSequence   
 	elseif (mode = 7) and (last_pad >= 7)
  	reset_type=1
  	Call @ResetScenePatternSequence
	endif
@End

@HandleSeqModeActions
	//splitting up onPadDown
	if sel_step=last_pad
		double_tap=TRUE
	else
  	double_tap=FALSE
	endif
	sel_pad=last_pad
	if mode=10
		trigger_pattn_change_requested_for_ch[seq_ch]=last_pad //trigger a new pattern next beat/bar
		if not HostRunning
			ch=seq_ch
			Call @TriggerPattern
		endif
	elseif (mode=9 and move_all)
		if last_pad=14
			move_all_dir=-1
			Call @MoveAllSteps
		elseif last_pad=15
			move_all_dir=1
			Call @MoveAllSteps
		else 
			move_all_dir=0
		endif
	elseif mode=14
		if last_pad=14
			rot_dir=-1
		elseif last_pad=15
			rot_dir=1
		else 
			rot_dir=0
		endif
		Call @RotateSequence	
		Call @LabelKnobSet9
	elseif (mode = 6) //# COPY/PASTE
  	copy_paste_status=2 //# PASTE
  	Call @CopyPaste
  	copy_paste_status=0 //# CP OFF
	elseif (mode = 7)
		reset_type=2 //# reset a sequence pad
  	Call @ResetScenePatternSequence
	endif
	sel_step=last_pad
	Call @SetupLayout
@End


@OnPadUp
	last_pad=LastPad
  Call @OnPadUp2
@End

@OnPadUp2
	StopTimer
	timer_type=0
@End

@OnPadDown_ScenePattnChange //# handle scene/pattn change
  if (last_pad >= 0 and last_pad <= 7)
		scene_change_requested = last_pad
		songmode=1 //locked to scene. User pressed scene pad
  	if (NOT HostRunning) //# immediate change else newbeat/bar handles
			next_scene=last_pad
			next_pattn=0
  		Call @HandleSceneChange 
  	endif
	elseif (last_pad >= 8 and last_pad <= 15) 	
		pattn_change_requested = last_pad - 8 //# chrd 0-7
		songmode=2 //lockt to pattn. User pressed pattn pad
		if NOT HostRunning //# immediate change else newbeat/bar handles
			next_pattn=last_pad-8
  		Call @HandlePattnChange 
  	endif
  endif
	if not HostRunning
		pad_down_trigger_all_ready_for_playback=TRUE
		for i = 0 to 7
			ch=i
			Call @TriggerPattern
		endfor
		pad_down_trigger_all_ready_for_playback=FALSE
	endif
	Call @SetupLayout	
@End

@OnPadDown_KnobSetSelect //# choose a knob set based on pad type 
  if (NOT in_mode_select) and (NOT in_seq_mode)
  	Call @SetupKnobset0 //scenes mode duration setup  
  elseif (NOT in_mode_select) and in_seq_mode
		if mode=10
  		Call @SetupKnobset6
		elseif mode=14
  		Call @SetupKnobset9 //# ROTATION
  	elseif mode=6 and return_to_mode=9
  		Call @SetupKnobset5 //# EDIT
		else
  		mode=9
  		Call @SetupKnobset5 //# EDIT
  	endif
  elseif in_mode_select
		if last_pad=3 or last_pad=4 or last_pad=8
      Call @SetupKnobset2 //# TRIGGER CONFIG
		elseif last_pad=5
		  Call @SetupKnobset3 //# NAME CHANNELS
		else
		  Call @SetupKnobset99 //settings knobset
    endif
  endif
  Call @SendMidiCCBackToKnobs
@End

@SendMidiCCBackToKnobs //# Update controller knob vals with midi cc
	//send LED feedback when mgen device is active device to mgen knobs
	if send_cc_back_to_knobs and mgen_device_id=mgen_sel_dev
		SendMidiCC knobs_controller[0], knobs_controller[1], (Round GetKnobValue 0)
		SendMidiCC knobs_controller[0], knobs_controller[2], (Round GetKnobValue 1), 25
		SendMidiCC knobs_controller[0], knobs_controller[3], (Round GetKnobValue 2), 50
		SendMidiCC knobs_controller[0], knobs_controller[4], (Round GetKnobValue 3), 75
	endif
@End

@HandleGuiRequest
	if last_pad=8 //GUI TOGGLE
		SendMIDICC device_gui_num[seq_ch], 101, 127
	endif
	FlashPad last_pad
	Call @SetupSettingsLayout
@End

@OnMidiNote
	//Log {midi note }, MIDIChannel, {-}, MIDIByte2, {-}, MIDIByte3
  if MIDIChannel=15 and MidiNote>=20 and MIDINote<=36 and mgen_sel_dev=mgen_device_id and mgen_device_id>=0 
		// notes 20-36 on channel 16  used to trigger MGEN pads 0-15
		if MIDINote=36 //SHIFT
			if MIDICommand=0x90 //noteOn	
				Call @OnShiftDown2
			elseif MIDICommand=0x80 //Note off
				shift_is_down=FALSE
			endif
		else
			last_pad = MIDINote-20
			if MIDICommand=0x90 and MIDIByte3>0 //noteOn
				Call @OnPadDown2 //instead of OnPadDown which is only triggered by touch of GUI pads in Mosaic
			elseif MIDICommand=0x90 and MIDIByte3=0
				Call @OnPadUp2
			elseif MIDICommand=0x80 //Note off
			  Call @OnPadUp2
			endif
		endif
	endif		
@End

@OnMidiCC
	// Log {MIDI RECEIVED: }, MIDIChannel, MIDIByte2, MIDIByte3 
	if (MIDIByte2>=101) and (MIDIByte2<=(101+7)) and (MIDIChannel=15) and MIDIByte3<=32
		//# handle scene duration change
		scene_durs[MIDIByte2-101] = MIDIByte3
		Call @SetupLayout
	elseif (HostRunning and MIDIByte2=22 and MIDIByte3>0 and MIDIChannel=15)
		return_to_song_mode_requested = TRUE //# handle return to song mode requested
  	in_mode_select = FALSE
		songmode = 0
  	mode = 0
		ColorPad current_scene, 6
    ColorPad 8, 3
  	if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, current_scene+led_index, 3
			SendMIDINoteOn 15, 8+led_index, 3
		endif
	elseif (MIDIByte2=22 and MIDIByte3>0 and MIDIChannel=15 and not HostRunning)
		return_to_song_mode_requested = TRUE
		in_mode_select = FALSE
  	songmode = 0
  	mode = 0
		current_scene=0
		current_pattn=0
  	Call @SetupLayout
		ColorPad current_scene, 3
    ColorPad current_pattn+8, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, current_scene+led_index, 3
			SendMIDINoteOn 15, 8+led_index, 3
		endif
	elseif MIDIByte2>=40 and MIDIByte2<=43 and MIDIChannel=15//KNTRL Knobs on CH16
		if mgen_sel_dev=mgen_device_id
			last_knob = MIDIByte2-40 //simulate  LastPad action
			SetKnobValue last_knob, MIDIByte3 // change knob position
			Call @OnKnobChange2 //handle that change
		endif
  elseif (MIDIByte2=89 and MIDIChannel=15) //copy paste scene
		in_mode_select = FALSE // return to scenes mode first
  	mode = 0
		if MIDIByte3<=7 //handle copy scene
			copied_scene = MIDIByte3
			LabelPads {Scene }, MIDIByte3+1, { copied. Ready to paste}
		elseif MIDIByte3>=8 and MIDIByte3<=15 //handle scene paste
			LabelPads {Copied scene }, copied_scene+1, { to scene }, (MIDIByte3-8)+1
			scene_durs[MIDIByte3-8] = scene_durs[copied_scene] 
			//# CopyArray source, dest, cells 
			CopyArray pattn_durs[copied_scene * 8], pattn_durs[(MIDIByte3-8) * 8], 8
			copy_slot=(copied_scene*128)
			paste_slot=((MIDIByte3-8)*128)
			steps_to_copy=(16*8)
			for i = 0 to 7
				copy_seq_ch=i
				Call @CopySequencePad
				paste_seq_ch=i
				Call @PasteSequencePad
			endfor
			CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 128
			copied_scene = -1 //# reset
			Call @SetupLayout
		endif
	elseif MIDIByte2>=91 and MIDIByte2<=98 and MIDIByte3>0 and MIDIChannel=15
		mgen_sel_dev=MIDIByte2-91+1 // range 1-9 to match display
		if mgen_sel_dev=mgen_device_id
			Call @OnShiftDown2 //will trigger layout setup for settings and other modes
		endif
	endif
@End

@OnSysex
  ReceiveSysex sysex_msg
  qk_msg=YES
  for i = 0 to len_header-1 //check header make sure its a QK sysex message
    if sysex_msg[i] <> qk_sysex_header[i]
      qk_msg=NO
    endif 
  endfor
  if qk_msg 
		msg_start=len_header+1 //where msg_data starts
		msg_end=SysexSize-1 //where msg_data ends
		qk_msg_type=sysex_msg[len_header] //the message type received
		if qk_msg_type = sx_scene_change //handle msg types...
			//# handle scene change requested (ie: PadDown Scene change)
			if songmode=0 and HostRunning and sysex_msg[msg_start]=current_scene //in song mode. just lock to scene
				songmode=1 // lock to scene
			elseif songmode>=0 and songmode<=2 and HostRunning
			  scene_change_requested = sysex_msg[msg_start]
				songmode=1
				edit_scene=last_pad
			elseif NOT HostRunning //# immediate change else newbeat/bar handles
				scene_change_requested = sysex_msg[msg_start]
				songmode=1 // lock to scene
				next_scene=scene_change_requested
				next_pattn=0
				Call @HandleSceneChange 
			endif
			if not HostRunning 
				pad_down_trigger_all_ready_for_playback=TRUE
				for i = 0 to 7
					ch=i
					Call @TriggerPattern
				endfor
				pad_down_trigger_all_ready_for_playback=FALSE
			endif
			Call @SetupLayout
		endif
	endif
@End

@ReverseSequence //# reverse a sequence
	copy_seq_ch=seq_ch
	paste_seq_ch=seq_ch
	steps_to_copy=16 //# Copy all 16 steps to temp arrays
	copy_slot=(current_scene*128)+(current_pattn*16)
	Call @CopySequencePad
	temp_patts=[]		
	CopyArray copied_seq_patts, temp_patts, 16
	steps_to_copy=1
	for i = 0 to sequence_lengths[copy_slot]-1 //# Paste steps in reverse one by one
		paste_slot=(current_scene*128)+(current_pattn*16) + (sequence_lengths[copy_slot]-1-i)	
		copied_seq_patts = [temp_patts[i]]
		Call @PasteSequencePad
	endfor
@End

@ResetScenePatternSequence //# handle reset of a scene, pattern or sequence step
	//# reset sequence single channel use ALL knob in edit mode. notes to reset to per seq_ch		
	if reset_type=0 //# Reset scene
		scene_durs[last_pad] = 0
	  pattn_slot = (last_pad * 8)
		pattn_durs[current_scene*8] = [0,0,0,0,0,0,0,0]
		paste_slot=(last_pad*128)
		steps_to_copy=(16*8)
		reset_slot=(current_scene*128)			
		FillArray sequence_lengths[reset_slot], def_sequence_length, 128
		num_scns_with_dur=last_pad-1 //RND only selects scenes before deleted scn
		num_ptns_with_dur[current_scene]=0 //del scene also dels pattns
	elseif reset_type=1 //# reset pattern
		pattn_slot = (current_scene * 8) + (last_pad - 8) 
  	pattn_durs[pattn_slot] = 0
  	paste_slot=(current_scene*128)+((last_pad-8)*16)
		steps_to_copy=16
		reset_slot=(current_scene*128)+((last_pad-8)*16)
		FillArray sequence_lengths[reset_slot], def_sequence_length, 16
		num_ptns_with_dur[current_scene]=last_pad-8-1 //RND only selects pattns before deleted pattn
 	elseif reset_type=2 //# reset seq step
 		paste_slot=(current_scene*128)+(current_pattn*16)+last_pad
		reset_slot=(current_scene*128)+(current_pattn*16)+last_pad
		steps_to_copy=1
 	endif
	//reset the pattern trigger sequence slots...
	FillArray a0_pattns[reset_slot], -1, steps_to_copy 
	FillArray a1_pattns[reset_slot], -1, steps_to_copy
	FillArray a2_pattns[reset_slot], -1, steps_to_copy
	FillArray a3_pattns[reset_slot], -1, steps_to_copy
	FillArray a4_pattns[reset_slot], -1, steps_to_copy
	FillArray a5_pattns[reset_slot], -1, steps_to_copy
	FillArray a6_pattns[reset_slot], -1, steps_to_copy
	FillArray a7_pattns[reset_slot], -1, steps_to_copy
	Call @SetupLayout
@End

@MakeFirstSequenceSceneTriggerAllScenes
	//by default we set up all scenes with one sequence to trigger pattern [scn number]
	for i = 0 to 7
		scene_to_change = i 
		Call @MakeFirstSequenceIntoSceneTrigger
	endfor
@End

@MakeFirstSequenceIntoSceneTrigger
	scene_duration = scene_durs[scene_to_change]
	if not scene_duration
		scene_duration=8
		scene_durs[scene_to_change]=scene_duration
	endif	
	seq_to_scn_slot = scene_to_change*128
	FillArray pattn_durs[scene_to_change * 8], 0, 8
	FillArray a0_pattns[seq_to_scn_slot], -1, 128 
	FillArray a1_pattns[seq_to_scn_slot], -1, 128
	FillArray a2_pattns[seq_to_scn_slot], -1, 128
	FillArray a3_pattns[seq_to_scn_slot], -1, 128
	FillArray a4_pattns[seq_to_scn_slot], -1, 128
	FillArray a5_pattns[seq_to_scn_slot], -1, 128
	FillArray a6_pattns[seq_to_scn_slot], -1, 128
	FillArray a7_pattns[seq_to_scn_slot], -1, 128
	pattn_durs[scene_to_change * 8] = scene_duration
	a0_pattns[seq_to_scn_slot]=scene_to_change
	a1_pattns[seq_to_scn_slot]=scene_to_change
	a2_pattns[seq_to_scn_slot]=scene_to_change
	a3_pattns[seq_to_scn_slot]=scene_to_change
	a4_pattns[seq_to_scn_slot]=scene_to_change
	a5_pattns[seq_to_scn_slot]=scene_to_change
	a6_pattns[seq_to_scn_slot]=scene_to_change
	a7_pattns[seq_to_scn_slot]=scene_to_change
	FillArray sequence_lengths[seq_to_scn_slot], (Clip scene_duration, 0, 16), 128
	num_ptns_with_dur[scene_to_change]=1 
	Call @LabelKnobset0
	scene_to_check=scene_to_change
	Call @UpdatePattnsWithDuration
@End

@CopyPaste //# copy paste scenes. patterns. sequences
	if last_pad <=7 and not in_seq_mode
		LabelPads {Copied scene }, copied_scene+1, { to scene }, last_pad+1
		scene_durs[last_pad] = scene_durs[copied_scene] 
		CopyArray pattn_durs[copied_scene * 8], pattn_durs[last_pad * 8], 8
		//# Also copy sequence information
		copy_slot=(copied_scene*128)
		paste_slot=(last_pad*128)
		steps_to_copy=(16*8)
		for i = 0 to 7
			copy_seq_ch=i
			Call @CopySequencePad
			paste_seq_ch=i
			Call @PasteSequencePad
		endfor
		CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 128
		Call @UpdateScenesWithDuration
		Call @UpdatePattnsWithDuration
	elseif last_pad >= 8 and not in_seq_mode //# handle copy pasting a pattern
		LabelPads	{Copied S}, copied_scene+1, { Pattern }, copied_pattn+1, { to }, { S}, current_scene+1, { Pattern }, last_pad-7
		pattn_slot_from = (copied_scene*8) + copied_pattn
		pattn_slot_to = (current_scene*8) + (last_pad-8)
		pattn_durs[pattn_slot_to] = pattn_durs[pattn_slot_from]
		//# Also copy sequence information
		copy_slot=(copied_scene*128)+(copied_pattn*16)
		paste_slot=(current_scene*128)+((last_pad-8)*16)
		steps_to_copy=16
		for i = 0 to 7
			copy_seq_ch=i
			Call @CopySequencePad
			paste_seq_ch=i
			Call @PasteSequencePad
		endfor
		CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 16
		Call @UpdatePattnsWithDuration
	elseif in_seq_mode and return_to_mode=9 //# edit mode copy single pads
		//# handle copypaste a single seq_pad
		copy_slot=(current_scene*128)+(current_pattn*16)+copied_seq_pad
		paste_slot=(current_scene*128)+(current_pattn*16)+last_pad
		steps_to_copy=1
		copy_seq_ch=copied_ch
		Call @CopySequencePad
		paste_seq_ch=seq_ch
		Call @PasteSequencePad
	elseif in_seq_mode and return_to_mode=11 //# Seq mode copy all 16 steps
		copy_slot=(current_scene*128)+(current_pattn*16)
		paste_slot=(current_scene*128)+(current_pattn*16)
		steps_to_copy=16
		copy_seq_ch=copied_ch
		Call @CopySequencePad
		paste_seq_ch=seq_ch
		Call @PasteSequencePad
		copy_slot=(current_scene*128) + (current_pattn*16) + copy_seq_ch
		paste_slot=(current_scene*128) + (current_pattn*16) + paste_seq_ch
		sequence_lengths[paste_slot] = sequence_lengths[copy_slot]
	endif
	copied_scene = -1 //# reset
	copied_pattn = -1
	copied_seq_pad = -1
	copy_paste_status=0 //# off
	mode=return_to_mode
	Call @SetupLayout
@End

@CopySequencePad //# Copy part of COPY/PASTE sequence pad
	//# Separate so user can switch ch between copy and paste
	copied_seq_patts=[]
	if copy_seq_ch=0 //# copy...
		CopyArray a0_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=1 //# copy...
		CopyArray a1_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=2 //# copy...
		CopyArray a2_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=3 //# copy...
		CopyArray a3_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=4 //# copy...
		CopyArray a4_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=5 //# copy...
		CopyArray a5_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=6 //# copy...
		CopyArray a6_pattns[copy_slot], copied_seq_patts, steps_to_copy
	elseif copy_seq_ch=7 //# copy...
		CopyArray a7_pattns[copy_slot], copied_seq_patts, steps_to_copy
	endif
@End

@PasteSequencePad //# PASTE portion of copy/paste sequence pad
	sequence_num=(current_scene*128)+(current_pattn*16)+(paste_seq_ch)
	if paste_seq_ch=0
		CopyArray copied_seq_patts, a0_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=1
		CopyArray copied_seq_patts, a1_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=2
		CopyArray copied_seq_patts, a2_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=3
		CopyArray copied_seq_patts, a3_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=4
		CopyArray copied_seq_patts, a4_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=5
		CopyArray copied_seq_patts, a5_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=6
		CopyArray copied_seq_patts, a6_pattns[paste_slot], steps_to_copy
	elseif paste_seq_ch=7
		CopyArray copied_seq_patts, a7_pattns[paste_slot], steps_to_copy
	endif
@End

@SetupKnobset99
	SetKnobValue 0, TranslateScale mgen_device_id, 0, 9, 0, 127
	SetKnobValue 1, TranslateScale seq_ch, 0, 7, 0, 127
	SetKnobValue 2, TranslateScale rnd_scn_chance, 0, 100, 0, 127
	SetKnobValue 3, TranslateScale rnd_ptn_chance, 0, 100, 0, 127
	Call @LabelSettingsKnobs
@End
@KnobChangeSet99 //settings knobs
	if last_knob = 0 and shift_is_down
	  val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 9
		if val <> mgen_device_id
			mgen_device_id=val
			if mgen_device_id
				LabelKnob 0, {mgen# }, mgen_device_id
			else
				LabelKnob 0, {mgen# -}
			endif
		endif
	elseif last_knob = 0 and not shift_is_down
	  LabelPads {HOLD SHIFT DOWN TO CHANGE MGEN DEVICE ID!!!!}
	elseif last_knob = 1
	  val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 7
	  if val <> seq_ch	
		  seq_ch = val
			Call @SetupSettingsLayout
	  endif
	elseif last_knob = 2
	  val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 100
	  if val <> rnd_scn_chance 	
		  rnd_scn_chance = val
			Call @LabelSettingsKnobs
	  endif
  elseif last_knob = 3
	  val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 100
	  if val <> rnd_ptn_chance 	
		  rnd_ptn_chance = val
			Call @LabelSettingsKnobs
	  endif
	endif
@End
@LabelSettingsKnobs
	if mgen_device_id
		LabelKnob 0, {mgen# }, mgen_device_id
	else
		LabelKnob 0, {mgen# -}
		endif
	LabelKnob 1, {CH# }, seq_ch+1
	LabelKnob 2, {RndScn}, rnd_scn_chance
	LabelKnob 3, {RndPtn}, rnd_ptn_chance
	LabelKnobs { }
@End

@SetupKnobset0 //# Scene settings
	knob_set = 0
	pattn_slot = (current_scene * 8) + current_pattn
  patt_dur = pattn_durs[pattn_slot]
	SetKnobValue 0, TranslateScale scene_durs[current_scene], 0, 32, 0, 127
	SetKnobValue 1, 0
	SetKnobValue 2, TranslateScale patt_dur, 0, 16, 0, 127
	SetKnobValue 3, 0
	Call @LabelKnobset0
@End
@KnobChangeSet0 
	// scene / sequence durations
	if last_knob = 0 and ShiftPressed
	  scn_duration = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 32
	  if scn_duration <> scene_durs[current_scene] 	
		  scene_durs[current_scene] = scn_duration
	  	Call @LabelKnobset0
			Call @UpdateScenesWithDuration
	  endif
		scn_to_label = current_scene
		Call @LabelScenePad
	elseif last_knob = 0 and NOT ShiftPressed
		LabelPads {Normally controlled by Scene Master. Hold SHIFT to change.}
  endif
	if last_knob = 2
	  pattn_duration = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 16
		if pattn_duration <> pattn_durs[pattn_slot] 
		  pattn_durs[pattn_slot] = pattn_duration
			Call @SetSequenceLength //based on sequence_rate and pattn_dur
			Call @LabelKnobset0
			scene_to_check=current_scene
			Call @UpdatePattnsWithDuration
  	endif
		pattn_to_label = current_pattn
		Call @LabelPatternPad
  endif
@End
@LabelKnobset0
	pattn_slot = (current_scene * 8) + current_pattn
	LabelKnobs {DURATIONS }
	LabelKnob 0, {SCN}, current_scene+1, { }, scene_durs[current_scene], {b}
	LabelKnob 1, { }
	LabelKnob 2, {SEQ}, current_pattn+1, { },  pattn_durs[pattn_slot], {b}
	LabelKnob 3, { }
@End

@SetSequenceLength
	//number of steps in a sequence
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
	seq_rate = mpulses_per_seq_step[sequence_rates[seq_ch]] // 4 or 16
	pattn_slot = (current_scene * 8) + (current_pattn)
	if seq_rate = 16
		sequence_lengths[sequence_num] = Clip pattn_durs[pattn_slot], 0, 16
	elseif seq_rate = 4
	 	sequence_lengths[sequence_num] = Clip (pattn_durs[pattn_slot] * 4), 0, 16
	endif
@End 

@UpdateScenesWithDuration
	for s = 0 to 7 //Update number of scenes with duration for random selection
		if scene_durs[s] > 0
			num_scns_with_dur=s
		else
		  Exit
		endif	
	endfor
@End
@UpdatePattnsWithDuration
	for p = 0 to 7 //Update number of patterns in scene with duration for random selection
		if pattn_durs[(current_scene * 8) + p] > 0
			num_ptns_with_dur[current_scene]=p
		else
		  Exit
		endif	
	endfor
@End

@SetupKnobset2 
	// SETUP 8 SEQUENCE CHANNELS
  knob_set = 2
	Call @LabelKnobSet2
@End
@KnobChangeSet2
	// SETUP 8 SEQUENCE CHANNELS
	if last_knob = 0 //the sequence channel to edit
    val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> seq_ch
			seq_ch = val
			Call @LabelKnobSet2
			label_chan=seq_ch
			Call @LabelChannel
			Call @LabelDestinationInfoPads
			Call @UpdateSettingsPadColors
		endif
	elseif last_knob = 1 
   	val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 7
		if val <> device_gui_num[seq_ch]
			device_gui_num[seq_ch] = val
			Call @LabelKnobSet2
			label_chan=seq_ch
			Call @LabelChannel
			Call @LabelDestinationInfoPads
		endif
	elseif last_knob = 2 //the destination the note trigger will go to
   	val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 2
		if val <> trigger_method[seq_ch]
			trigger_method[seq_ch] = val
			Call @LabelKnobSet2
		endif
	elseif last_knob = 3 //the destination the note trigger will go to
   	val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 119
		if val <> trigger_method_offset[seq_ch]
			trigger_method_offset[seq_ch] = val
			Call @LabelKnobSet2
		endif
	endif	
@End
@LabelKnobSet2
	LabelKnobs {TRIGGER CONFIG} 
  LabelKnob 0, {CH: }, seq_ch+1
	LabelKnob 1, {GUI# }, device_gui_num[seq_ch]+1	
	if trigger_method[seq_ch]=1 //trigger methods 0-2; Note, CC_NUM; CC_VAL
	  LabelKnob 2, {CC NUM}
		LabelKnob 3, {FROM: }, trigger_method_offset[seq_ch]	
	elseif trigger_method[seq_ch]=2
	  LabelKnob 2, {CC VAL}
		LabelKnob 3, {CC#: }, trigger_method_offset[seq_ch]
	else
	  LabelKnob 2, {NOTE}
		LabelKnob 3, {FROM: }, trigger_method_offset[seq_ch]
	endif
  
	SetKnobValue 0, TranslateScale seq_ch, 0, 7, 0, 127
  SetKnobValue 1, TranslateScale device_gui_num[seq_ch], 0, 7, 0, 127
  SetKnobValue 2, TranslateScale trigger_method[seq_ch], 0, 2, 0, 127
  SetKnobValue 3, TranslateScale trigger_method_offset[seq_ch], 0, 119, 0, 127
  CopyArray  ch_names, n, 8
	LabelPads {TRIGGER METHODS PER CHANNEL: Select sequence CH, Destination GUI#, MSG Type, MSG Offset}  
@End

@SetupKnobset3
	// ASSIGN NAME TO SEQ CHANNELS
  knob_set = 3
	Call @LabelKnobSet3
@End
@KnobChangeSet3
	// SETUP 8 SEQUENCE CHANNELS
	if last_knob = 0 //the sequence channel to edit
    val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> seq_ch
			seq_ch = val
			Call @LabelKnobSet3
			label_chan=seq_ch
			Call @LabelChannel
			Call @LabelDestinationInfoPads
			Call @UpdateSettingsPadColors
		endif
	elseif last_knob = 1 
   	val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, num_ch_names
		if val <> ch_names[seq_ch]
			ch_names[seq_ch] = val
			Call @LabelKnobSet3
			label_chan=seq_ch
			Call @LabelChannel
		endif
	elseif last_knob = 2
   	val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, num_ch_dests
		if val <> ch_destns[seq_ch]
			ch_destns[seq_ch] = val
			Call @LabelKnobSet3
			label_chan=seq_ch
			Call @LabelChannel
			Call @LabelDestinationInfoPads
		endif
	endif	
@End
@LabelKnobSet3
	LabelKnobs {NAME CHANNELS} 
  LabelKnob 0, {CH: }, seq_ch+1
  LabelKnob 1, {NAME: }, ch_names[seq_ch]+1
	LabelKnob 2, {DEST: }, ch_destns[seq_ch]+1
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale seq_ch, 0, 7, 0, 127
  SetKnobValue 1, TranslateScale ch_names[seq_ch], 0, num_ch_names, 0, 127
  SetKnobValue 2, TranslateScale ch_destns[seq_ch], 0, num_ch_dests, 0, 127
  SetKnobValue 3, 0
  CopyArray  ch_names, n, 8
	LabelPads {Select a CHANNEL NAME and a DESTINATION NAME for each channel...}
	LabelPad 5, {_NAMES_ }, { [}, n[0]+1,{-}, n[1]+1,{-}, n[2]+1,{-}, n[3]+1,{] }, { [}, n[4]+1,{-}, n[5]+1,{-}, n[6]+1,{-}, n[7]+1,{] }  
@End

@GetStepVal 
	//# The pattern number associated with this step
	sel_pad_type=1 //# set so visible when editing. not saved
	seq_type_min=-1
	seq_type_max=chan_max_patterns[seq_ch]-1
	if seq_ch=0
  	step_val=a0_pattns[step_slot]
  elseif seq_ch=1
  	step_val=a1_pattns[step_slot]
  elseif seq_ch=2
  	step_val=a2_pattns[step_slot]
  elseif seq_ch=3
  	step_val=a3_pattns[step_slot]
	elseif seq_ch=4
  	step_val=a4_pattns[step_slot]
	elseif seq_ch=5
  	step_val=a5_pattns[step_slot]
	elseif seq_ch=6
  	step_val=a6_pattns[step_slot]
	elseif seq_ch=7
  	step_val=a7_pattns[step_slot]
	endif
@End

@SetStepVal 
	//# The pattern number associated with this step	
  sel_pad_type=1 //# set so visible when editing.
  if seq_ch=0
  	a0_pattns[step_slot]=step_val
  elseif seq_ch=1
  	a1_pattns[step_slot]=step_val
  elseif seq_ch=2
  	a2_pattns[step_slot]=step_val
  elseif seq_ch=3
  	a3_pattns[step_slot]=step_val
	elseif seq_ch=4
  	a4_pattns[step_slot]=step_val
	elseif seq_ch=5
  	a5_pattns[step_slot]=step_val
	elseif seq_ch=6
  	a6_pattns[step_slot]=step_val
	elseif seq_ch=7
  	a7_pattns[step_slot]=step_val
	endif
@End

@SetupKnobset5 
	//# PATTERN EDIT MODE
  knob_set = 5
  step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	Call @GetStepVal //# the pattern number associated with this step
	if Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7 <> seq_ch
	  SetKnobValue 0, TranslateScale seq_ch, 0, 7, 0, 127
  endif	
	SetKnobValue 1, TranslateScale sequence_rates[seq_ch], 0, 1, 0, 127
  SetKnobValue 2, TranslateScale step_val, seq_type_min, seq_type_max, 0, 127
  SetKnobValue 3, TranslateScale move_all, 0, 1, 0, 127
  Call @LabelSet5Knobs
@End
@KnobChangeSet5 //# PATTERN EDIT currently selected step/pad (out of 16) in a pattern
	step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	if last_knob = 0 //# SEQ_CH
    seq_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		Call @GetStepVal
    SetKnobValue 2, TranslateScale step_val, seq_type_min, seq_type_max, 0, 127
		Call @SetupLayout
	elseif (last_knob=1) //# PATTERN STEP RATE - Bar or Beat
    val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 1
  	if sequence_rates[seq_ch] <> val
  		sequence_rates[seq_ch]=val
			Call @SetSequenceLength
			Call @LabelAllSequencePads
		endif	
	elseif (last_knob=2) //# STEP VAL FOR SEQ
    step_val = Round TranslateScale (GetKnobValue 2), 0, 127, seq_type_min, seq_type_max
    if move_all
			rtn_to_step_slot=step_slot
			for i = 0 to 15
				step_slot=(current_scene*128)+(current_pattn*16)+i
				Call @SetStepVal
			endfor
			step_slot=rtn_to_step_slot
			Call @LabelAllSequencePads
		else 
			Call @SetStepVal
		endif
	elseif (last_knob=3) //# ALL STEPS
    val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 1
  	if move_all <> val
  		move_all=val
		endif	
  endif
  Call @LabelSet5Knobs
  sel_pad = sel_step
  step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
  Call @LabelSequencePad
@End
@LabelSet5Knobs
	if move_all=1
		FlashPad 14
		FlashPad 15
	endif
	LabelKnobs {SEL STEP}, sel_step+1
	LabelKnob 0, {CH: }, seq_ch+1
	if sequence_rates[seq_ch]
		LabelKnob 1, {Rate: Bar}
	else // beat_pulse
	  LabelKnob 1, {Rate: Beat}
	endif
	if (step_val=-1)
	  LabelKnob 2, {Off}
	else
		LabelKnob 2, {P},step_val+1 //pattern number display
	endif
	if move_all=1	
	  LabelKnob 3, {<< ALL >>}
	else
		LabelKnob 3, {< Move1 >}
	endif 
@End

@SetupKnobset6
	//# TRIGGER PLAY MODE
  knob_set = 6
  step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	if Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7 <> seq_ch
	  SetKnobValue 0, TranslateScale seq_ch, 0, 7, 0, 127
  endif	
	SetKnobValue 1, 0
  SetKnobValue 2, 0
  SetKnobValue 3, 0
  Call @LabelSet6Knobs
@End
@KnobChangeSet6 //# PATTERN EDIT currently selected step/pad (out of 16) in a pattern
	step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	if last_knob = 0 //# SEQ_CH
    seq_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		Call @SetupLayout
		Call @LabelSet6Knobs
		sel_pad = sel_step
		step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
		Call @LabelSequencePad
  endif
@End
@LabelSet6Knobs
	LabelKnobs {TRIGGER PLAY MODE}
	LabelKnob 0, {CH: }, seq_ch+1	
	LabelKnob 1, { }
	LabelKnob 2, { }
	LabelKnob 3, { }
@End

@MoveAllSteps 
	//# Move all steps in step edit mode
	for i = 0 to 15
		slot=(current_scene*128)+(current_pattn*16)+i
		if seq_ch=0
			a0_pattns[slot] = Clip (a0_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=1
			a1_pattns[slot] = Clip (a1_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=2
			a2_pattns[slot] = Clip (a2_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=3
			a3_pattns[slot] = Clip (a3_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=4
			a4_pattns[slot] = Clip (a4_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=5
			a5_pattns[slot] = Clip (a5_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=6
			a6_pattns[slot] = Clip (a6_pattns[slot]+ move_all_dir), -1, 127
		elseif seq_ch=7
			a7_pattns[slot] = Clip (a7_pattns[slot]+ move_all_dir), -1, 127
		endif
	endfor
	Call @LabelAllSequencePads
@End

@RotateSequence //# rotate a selected sequence. requires args rotation(-1 or +1), old_seq
	step_slot=(current_scene*128)+(current_pattn*16)
	seq_length = sequence_lengths[step_slot + seq_ch]
	FillArray old_patts, 0, seq_length
	FillArray new_patts, 0, seq_length
	if seq_ch=0
		CopyArray a0_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=1
		CopyArray a1_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=2
		CopyArray a2_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=3
		CopyArray a3_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=4
		CopyArray a4_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=5
		CopyArray a5_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=6
		CopyArray a6_pattns[step_slot], old_patts, seq_length
	elseif seq_ch=7
		CopyArray a7_pattns[step_slot], old_patts, seq_length
	endif
	for i = 0 to seq_length-1
		if rot_dir=-1
			old_index=(i+1)%seq_length
		elseif rot_dir=1
			old_index=i-1
			if old_index<0
				old_index=seq_length-1
			endif
		endif
		new_patts[i] = old_patts[old_index]
	endfor
	if seq_ch=0
		CopyArray new_patts, a0_pattns[step_slot], seq_length
	elseif seq_ch=1
		CopyArray new_patts, a1_pattns[step_slot], seq_length
	elseif seq_ch=2
		CopyArray new_patts, a2_pattns[step_slot], seq_length
	elseif seq_ch=3
		CopyArray new_patts, a3_pattns[step_slot], seq_length
	elseif seq_ch=4
		CopyArray new_patts, a4_pattns[step_slot], seq_length
	elseif seq_ch=5
		CopyArray new_patts, a5_pattns[step_slot], seq_length
	elseif seq_ch=6
		CopyArray new_patts, a6_pattns[step_slot], seq_length
	elseif seq_ch=7
		CopyArray new_patts, a7_pattns[step_slot], seq_length
	endif
	//CopyArray new_steps, n, seq_length
	//Log n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]
	Call @LabelAllSequencePads
@end

@SetupKnobset9 //# ROTATION
  knob_set = 9
  SetKnobValue 0, TranslateScale seq_ch, 0, 7, 0, 127
  SetKnobValue 1, 0
  SetKnobValue 2, TranslateScale rot_dir, -1, 1, 0, 127
  SetKnobValue 3, 0
  FlashPad 14 //attention use these to rotate
	FlashPad 15  
	Call @LabelKnobset9
@End
@KnobChangeSet9
  //# ROTATION xs9
  if last_knob = 0
    new_seq_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if new_seq_ch <> seq_ch
			seq_ch=new_seq_ch
			Call @LabelAllSequencePads
			Call @LabelKnobset9
		endif
	endif
  if last_knob = 2
    val = Round TranslateScale (GetKnobValue 2), 0, 127, -1, 1
		if val <> rot_dir
			rot_dir=val
			Call @LabelKnobset9
		endif
	endif
@End
@LabelKnobset9
	LabelKnobs {TAP P15 & P16 TO ROTATE}
	LabelPads {>>> ROTATE <<<}
 	LabelKnob 0, {CH: }, seq_ch+1
	if rot_dir=0
		LabelKnob 2, {<ROT>}
  elseif rot_dir=-1
  	LabelKnob 2, {<<< ROT}
  else
  	LabelKnob 2, {ROT >>>}
	endif
	SetKnobValue 2, TranslateScale rot_dir, -1, 1, 0, 127
	LabelKnob 1, { } //# not in use
	LabelKnob 3, { } //# not in use
@End

@OnKnobChange
  last_knob=LastKnob
	Call @OnKnobChange2
@End
	
@OnKnobChange2
	//# Knob change router
	if knob_set = 0 
    Call @KnobChangeSet0 //# scene settings
	elseif knob_set = 2
    Call @KnobChangeSet2 //# TRIGGER CONFIG
	elseif knob_set = 3
    Call @KnobChangeSet3 //# NAME CHANNELS
	elseif knob_set = 5
    Call @KnobChangeSet5 //# SEQUENCE STEPS EDIT
	elseif knob_set = 6
    Call @KnobChangeSet6 //# TRIGGER PLAY MODE
	elseif knob_set = 9
    Call @KnobChangeSet9 //# ROTATION
	elseif knob_set = 99 //settings layout
		Call @KnobCHangeSet99
	endif
@End  

@OnShiftDown
  Call @OnShiftDown2 //simply to allow midi note in simulation of SHIFT Note16 any channel
@End

@OnShiftDown2
	shift_is_down=TRUE
	if in_mode_select
		in_mode_select = FALSE
		if mode>=8
			in_seq_mode=TRUE
		endif
		Call @OnPadDown_KnobSetSelect				
		Call @SetupLayout
	else
		// #Mode selection for Knobs n Pads
		in_mode_select = TRUE
		in_seq_mode=FALSE
		if mode=6 or mode=7 //# in cp or del shift will exit
			mode=return_to_mode //# cancel cp/del
		endif
		Call @SetupSettingsLayout
	endif
@End

@OnShiftUp
  shift_is_down=FALSE
@End

@SetupSettingsLayout
	copy_paste_status=0 //# In case COPYPASTE aborted
	knob_set=99
	if (songmode = 0)
		LabelPad 0, {SONGMODE }
	elseif (songmode = 1)
		LabelPad 0, {SCENE LOCKED}
	elseif (songmode = 2)
		LabelPad 0, {SEQ'NCE LOCKED}
	else
		LabelPad 0, {PLAYSONG: Disabled}
	endif
	LabelPad 1, {SCENES}
	if trigger_pattern_before_beat
		LabelPad 2, {TRIGGER BEFORE BEAT}
		tbb_col=2
	else 
		LabelPad 2, {TRIGGER ON BEAT}
		tbb_col=1
	endif
	LabelPad 3, {QUICK CONFIG #}, quick_config+1
	LabelPad 4, {TRIGGER CONFIG}
	Call @LabelKnobSet3
	LabelPad 6, { }
	if mode<=1
		if last_pad<=7 //# copy scene or chord
			LabelPad 6, {COPY/PASTE }, {SCENE }, current_scene+1
			copy_mode=0 //# copy scene
		else
			LabelPad 6, {COPY/PASTE }, {SEQUENCE }, current_pattn+1
			copy_mode=1  //# copy pattn. allows switch scene b4 paste
		endif
	elseif mode=9
		LabelPad 6, {COPY/PASTE }, {STEP }, sel_step+1
	elseif mode=11
		LabelPad 6, {COPY/PASTE }, {SEQ CH}, seq_ch+1
	endif
	if (mode>=8 or mode<=1)
		LabelPad 7, {DELETE  }
	endif
	Call @LabelDestinationInfoPads //8
	LabelPad 9, { }
	if sequencing_paused
		LabelPad 10, {SEQ PAUSED}
		sp_col=1
		sq_col=1
	else
	  LabelPad 10, {PAUSE SEQ}
		sp_col=0
		sq_col=4
	endif
	LabelPad 11, {SEQUENCE} //sequence pattern trigggers
	LabelPad 12, {TRIGGER} //Interrupt sequence with pattern trigger or play without sequence
	LabelPad 13, {MAKE SEQ1 SCN}, current_scene+1, { TRIGGER}
	LabelPad 14, {ROTATE}
	LabelPad 15, {REVERSE     }, {S},current_scene+1, { P},current_pattn+1, { CH}, seq_ch+1
	Call @UpdateSettingsPadColors
	Call @SetupKnobset99 //settings knobs
	label_chan=seq_ch
	Call @LabelChannel
@End

@LabelDestinationInfoPads
	if ch_destns[seq_ch]=1
		LabelPad 8, { ___ATOM___ }, { ch}, device_gui_num[seq_ch]+1, { cc101 }, {  }
	elseif ch_destns[seq_ch]=2
	  LabelPad 8, { ____LK____ }, { ch}, device_gui_num[seq_ch]+1, { cc101 }, {  }
	elseif ch_destns[seq_ch]=3
	  LabelPad 8, { __HELIUM__ }, { ch}, device_gui_num[seq_ch]+1, { cc101 }, {  }
	elseif ch_destns[seq_ch]=4
	  LabelPad 8, { _DRAMBO_ }, { ch}, device_gui_num[seq_ch]+1, { cc101 }, {  }
	else	
		LabelPad 8, { ___GUI___ }, { ch}, device_gui_num[seq_ch]+1, { cc101 }, {  } 
	endif
@End

@UpdateSettingsPadColors
	settings_pad_cols=[7,4,tbb_col,5,5,5,4,1, 0,0,sp_col,sq_col,4,0,2,1]
	gui_pad_cols=[1,2,3,4,5,6,7,1]
	for i = 0 to 15
		if i = 8 //gui pad
			settings_pad_cols[8] = gui_pad_cols[seq_ch]
		endif
		ColorPad i, settings_pad_cols[i]
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, i+led_index, settings_pad_cols[i]
		endif
		LatchPad i, NO 
	endfor
@End

@LabelScenePad //# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, { Scene }, scn_to_label+1, {    }, { [}, sc_dur, { bars]}
	ColorPad scn_to_label, 2
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, scn_to_label+led_index, 2
	endif
@End

@LabelPatternPad //# Set pattn_to_label var before calling 
	pattn_slot = (current_scene * 8) + pattn_to_label
	LabelPad pattn_to_label+8, { Sequence }, pattn_to_label+1, {    }, {[}, pattn_durs[pattn_slot], { bars]}
	ColorPad pattn_to_label+8, 2
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, pattn_to_label+8+led_index, 2
	endif
@End

@SetupLayout //#setup layout pads
  if in_mode_select
		Call @SetupSettingsLayout
  	Exit
  elseif in_seq_mode
  	Call @SetupSeqLayout
  else
	 //# Setup scene pads
	 FillArray scn_pad_cols, 0, 16
   for i = 0 to 7  
	    if scene_durs[i] > 0
				scn_to_label = i
				Call @LabelScenePad
				scn_pad_cols[i]=2
	  	else
	  		LabelPad i, { }
	  	endif
	    LatchPad i, NO
	    if (scene_durs[i] > 0) and (mode = 7) and NOT in_mode_select
				scn_pad_cols[i]=1 
	    endif
	  endfor		  
	  //# Setup pattn pads  
    for i = 0 to 7
	    pattn_slot = (current_scene*8) + i
	    LatchPad i, NO
	    if pattn_durs[pattn_slot] > 0
	    	pattn_to_label = i
	    	Call @LabelPatternPad
				scn_pad_cols[i+8]=2
	    else
	  		LabelPad i+8, { }
	  	endif
	    if (mode = 7) and (pattn_durs[pattn_slot] > 0)
				scn_pad_cols[i]=1
		  endif
	  endfor
		//# Handle current scene and pattn colors
		if (songmode = 0) //# Playthru no lock
	  	scn_pad_cols[current_scene]=3
	  	scn_pad_cols[current_pattn+8]=3
	  elseif (songmode = 1) //# Lock to scene
	    scn_pad_cols[current_pattn+8]=3
			scn_pad_cols[current_scene]=4
	  elseif (songmode = 2)
	    scn_pad_cols[current_pattn+8]=4
			scn_pad_cols[current_scene]=4
	  endif
		if return_to_song_mode_requested
			scn_pad_cols[current_scene]=6
		endif
		//# Handle pending pattn and scene changes in playback
	  if HostRunning and (songmode <=2)
	  	if pattn_change_requested >= 0
				scn_pad_cols[pattn_change_requested+8]=6
	  	endif
	  	if scene_change_requested >= 0
	  		scn_pad_cols[scene_change_requested]=6
	  	endif
	  endif
		for i = 0 to 15
			ColorPad i, scn_pad_cols[i]
			if mgen_device_id=mgen_sel_dev
				SendMIDINoteOn 15, i+led_index, scn_pad_cols[i]
			endif
		endfor
	endif
	label_chan=seq_ch
	Call @LabelChannel  
@End

@SetupSeqLayout
	//# sequence mode layout
	if mode = 9
	  Call @SetupKnobset5 //# SEQUENCE EDIT ALL TYPES
	elseif mode = 10
	  Call @SetupKnobset6 //# TRIGGER PLAY
	elseif mode = 12
	  Call @SetupKnobset9 //# ROTATE
	  LabelPads {ROTATE SEQUENCE: Select CH. Tap  <<pad15 or pad16>> to rotate.}
	endif
	Call @LabelAllSequencePads
@End

@LabelAllSequencePads //# label all sequence pads xlasp
	for i = 0 to 15
		sel_pad = i
		step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
		Call @LabelSequencePad
		Call @ColorSequencePad
		LatchPad i, NO
	endfor
@End

@ColorSequencePad
	padColor=0
	if ap[seq_ch]>=0
		padColor=pattern_pad_cols[seq_ch]
	endif
	if sel_pad_type=0 //# stored value
		padColor=0
	endif
	if (mode=7) and (sel_pad_type>0) //# delete reset pads mode
		padColor=1
	endif
	//# Off pads past pattn length
	if sel_pad >= pattn_length
		padColor = 5
	endif
	if mode=10 //trigger play mode
		if current_playing_patterns[seq_ch] = sel_pad
			padColor=pattern_pad_cols[seq_ch]
		elseif trigger_pattn_change_requested_for_ch[seq_ch] = sel_pad
		  padColor=6
		else
		  padColor=0
		endif
	endif
	//# Selected step
	if (sel_pad=sel_step) and mode=9 and seq_type<4
		padColor=3
	endif
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, sel_pad+led_index, padColor //LED FEEDBACK
	endif
	ColorPad sel_pad, padColor
@End

@LabelSequencePad //# label sequence pads 
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
	pattn_length = sequence_lengths[sequence_num]
	ap0=a0_pattns[step_slot]
	ap1=a1_pattns[step_slot]
	ap2=a2_pattns[step_slot] 
	ap3=a3_pattns[step_slot]
	ap4=a4_pattns[step_slot]
	ap5=a5_pattns[step_slot]
	ap6=a6_pattns[step_slot]
	ap7=a7_pattns[step_slot]
	ap=[ap0, ap1, ap2, ap3, ap4, ap5, ap6, ap7]
	if mode=10
		ptn_num=sel_pad+1
		nn=sel_pad + trigger_method_offset[seq_ch]
	else
	  ptn_num=ap[seq_ch]+1
		nn=ap[seq_ch] + trigger_method_offset[seq_ch]
	endif
	if trigger_method[seq_ch]=0 //NOTE MODE
		if ((ap[seq_ch] >= 0) and (sel_pad<pattn_length)) or mode=10  //trigger mode 16pads available
			LabelPad sel_pad, { ___P}, ptn_num, {___ }, { ch}, seq_ch+1, { }, (NoteName nn, TRUE), { (}, nn, {)}
		else
			LabelPad sel_pad, {_____}, {X_____  }, { No Trigger }
		endif
	elseif trigger_method[seq_ch]=1 //CC NUM mode
		if ((ap[seq_ch] >= 0) and (sel_pad<pattn_length)) or mode=10 //trigger mode 16pads available
			LabelPad sel_pad, { ___P}, ptn_num, {___ }, { ch}, seq_ch+1, { cc#}, { }, nn
		else
		  LabelPad sel_pad, {_____}, {X_____  }, { No Trigger }
		endif
	elseif trigger_method[seq_ch]=2  //CC VAL mode
		if ((ap[seq_ch] >= 0) and (sel_pad<pattn_length)) or mode=10 //trigger mode 16pads available
			LabelPad sel_pad, { ___P}, ptn_num, {___ }, { ch}, seq_ch+1, { cc#}, trigger_method_offset[seq_ch], {-}, ap[seq_ch]
		else
		  LabelPad sel_pad, {_____}, {X_____  }, { No Trigger }
		endif
	else
	
	endif
  //# Hide data for pads outside seq length
  if (sel_pad >= pattn_length) and not mode=10
		LabelPad sel_pad, { }
	endif
@End

@LabelChannel
	//Label pads  with channel name
	// if adding to this list update num_ch_names in @InitKnobVariables
	if ch_names[label_chan]=0
		LabelPads {[  CH}, label_chan+1, {: KICK/LO-TOM}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=1
		LabelPads {[  CH}, label_chan+1, {: SNARE/CLAP}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=2
		LabelPads {[  CH}, label_chan+1, {: HATS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=3
		LabelPads {[  CH}, label_chan+1, {: HAT2/RIDE}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=4
		LabelPads {[  CH}, label_chan+1, {: PERCS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=5
		LabelPads {[  CH}, label_chan+1, {: DRUMS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=6
		LabelPads {[  CH}, label_chan+1, {: BASS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=7
		LabelPads {[  CH}, label_chan+1, {: LEAD}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=8
		LabelPads {[  CH}, label_chan+1, {: PADS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=9
		LabelPads {[  CH}, label_chan+1, {: PLUCK}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=10
		LabelPads {[  CH}, label_chan+1, {: ARP1}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=11
		LabelPads {[  CH}, label_chan+1, {: ARP2}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=12
		LabelPads {[  CH}, label_chan+1, {: MELODY}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=13
		LabelPads {[  CH}, label_chan+1, {: HARMONY}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=14
		LabelPads {[  CH}, label_chan+1, {: KEYS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=15
		LabelPads {[  CH}, label_chan+1, {: DRONE}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=16
		LabelPads {[  CH}, label_chan+1, {: SWELL}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=17
		LabelPads {[  CH}, label_chan+1, {: CHORDS}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=18
		LabelPads {[  CH}, label_chan+1, {: FX}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=19
		LabelPads {[  CH}, label_chan+1, {: SCAPE}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif ch_names[label_chan]=20
		LabelPads {[  CH}, label_chan+1, {: SKAKA}, {  ]   Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	endif
@End

