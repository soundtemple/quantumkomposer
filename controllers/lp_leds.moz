// LP>LEDS An adapter script for LED feedback to the Launchpad mini
// LP must be in programmer mode
// Companion app to =>LP which is used for adapting messages sent out in programmer mode
// Routing: Instruments => LP Adapter => LP Controller  

@OnLoad
	if Unassigned lp_ch
		SetShortName {QK>X>C}
		ppqn=4
		lp_ch=0 //channel LP receives messages on
		in_ch=15 //channel LED feedback messages received on
		show_metro_pulse=FALSE
		selected_channel=0
		selected_mgen=0
		selected_scene=0
		brightness=64
		//SYSEX
		lp_sysex_header=[0xF0,0x00,0x20,0x29,0x02,0x0D]
		qk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40]
		cmd_lp_mode=0 //see below for mode #'s'
		cmd_pad_led=1
		cmd_mgen_sel=2
		cmd_brightness=8 //0-127
		cmd_sleep=9 //0=off; 1=on
		pgmr_mode=127
		drum_mode=4
		keys_mode=5
		user_mode=6
  	len_header=6
		new_mode=pgmr_mode
		Call @ChangeMode
		Call @BuildColorMapping
		Call @SetupControllerToQKMappings
		Call @UpdateAllPads
		Call @SetupMozaicLayout
	endif
@End

@OnHostStart //map colors for transport buttons
	SendMIDICC 0, 93, pred 
  SendMIDICC 2, 94, bgreen
@End

@OnHostStop
	SendMIDICC 0, 93, red
	SendMIDICC 0, 94, green
@End

@BuildColorMapping
	//map controller to the KNTRL api for midi feedback 
	// controller available colors
	off = 0
	grey=117
	white = 3
	beige=105
	red=6
	pred=120
	orange=9
	porange=11
	green=64
	bgreen=87
	pgreen=20
	blue=45
	pblue=41
	purple=69
	mauve=81
	pink=53
	//messages from KNTRL will send a color 0-9 as value MIDIBYTE3. Map to controller colours here:
	to_pad_col = [off, pred, orange, pgreen, pblue, purple, mauve, pink, white, beige, pred, grey] 
	
	colors[91] = [beige,	beige,	red,		green, 	pgreen, grey, 	grey, 	grey,		off] //drambo, transport, mode
	colors[81] = [orange, orange, orange, off, 		off, 		green,  blue, 	purple,	off] //mgen select
	colors[71] = [off, 		off, 		off, 		off, 		off, 		off, 		off, 		off,		off] //mgen pads
	colors[61] = [off, 		off, 		off, 		off, 		off, 		off, 		off, 		off,		off] //mgen pads
	colors[51] = [orange,	orange,	mauve,	mauve,	pblue, 	pblue,	pblue, 	pblue,	off] //channel select
	colors[41] = [pgreen, pgreen, pgreen,	pgreen,	purple,	purple,	purple,	grey,		off] //channel select
	colors[31] = [off, 		off, 		off, 		off, 		off, 		off, 		off, 		off,		off] //kntrl pads
	colors[21] = [off, 		off, 		off, 		off, 		off, 		off, 		off, 		off,		off] //kntrl pads
	colors[11] = [off, 		white, 	white, 	off,		off,		off,		off,		off,		off] //shifts mixer select
@End

@SetupControllerToQKMappings
	mgen_seq_pads = [71,72,73,74,75,76,77,78, 61,62,63,64,65,66,67,68, 13] //16 midigen pads + shift
	mgen_pads = [81,82,83,84,85,86,87,88] //pads assigned to mgen selection
	kntrl_pads= [31,32,33,34,35,36,37,38, 21,22,23,24,25,26,27,28] //pads assigned to 16 kntrl pads
	channel_pads = [51,52,53,54, 55,56,57,58, 41,42,43,44, 45,46,47,48] //pads assigned to instrument selection
	scene_pads = [89,79,69,59,49,39,29,19] //pads assigned to scene selection
	mgen_pads_show_sel_only=TRUE
	chan_pads_show_sel_only=TRUE
	
	//Additional custom messages
	//Add the cc (only) val incoming as index to custom_messages and the value as the LP pad
	//Additionally add the LP pad type to custom_msg_type 
	FillArray custom_msgs, -1, 127
	custom_msgs[88]=48 //handle stuck note button
	custom_msg_is_cc[88]=FALSE // The LP pad type
	
	FillArray msg_type, 0, 127 //0=Note; 1=CC set pads that send notes
	msg_type[91] = [1,1,1,1, 1,1,1,1, 1] //top row pads send cc
	for i = 0 to 8 //scene pads send cc
		msg_type[scene_pads[i]] = 1 
	endfor
@End

@UpdateAllPads
	//Send messages to light up all pads with values stored in colors
	for pad_num = 0 to 127
		if msg_type[pad_num]=0 //note pad
			SendMIDINoteOn lp_ch, pad_num, colors[pad_num]
		elseif msg_type[pad_num]=1 // cc pad
		  SendMIDICC lp_ch, pad_num, colors[pad_num]
		endif
	endfor
	if selected_scene>=0
		Call @UpdateSelectedScene
	endif
	if selected_channel>=0
		Call @UpdateSelectedChannel
	endif
	if selected_mgen>=0
		Call @UpdateSelectedMgen
	endif
@End

@ResetToDefault
	Call @BuildColorMapping
	Call @UpdateAllPads 
@End
	
@OnMetroPulse
	if show_metro_pulse
	  SendMIDINoteOn 0, mgen_seq_pads[CurrentMetroPulse], 3
		SendMIDINoteOn 0, mgen_seq_pads[CurrentMetroPulse], 0, 100
	endif
@End

@OnMidiNote
	if MIDIChannel=in_ch //messages coming from QK:KNTRL.. send to Controller
		if MIDIByte2<=16 and kntrl_pads[MIDIByte2]>=0 //handle: kntrl pads 0-16 
			if chan_pads_show_sel_only and MIDIByte3=0
				col=112
			else 
				col=to_pad_col[MIDIByte3]
			endif
			SendMIDINoteOn lp_ch, kntrl_pads[MIDIByte2], col
		elseif (MIDIByte2>=20 and MIDIByte2<=46 and mgen_seq_pads[MIDIByte2-20]>=0) //handle mgen pads 20-46
			if mgen_pads_show_sel_only and MIDIByte3=0
				col=112
			else 
				col=to_pad_col[MIDIByte3]
			endif
		  SendMIDINoteOn lp_ch, mgen_seq_pads[MIDIByte2-20], col
		endif
	endif
@End

@OnMidiCC
	if MIDIChannel=in_ch //messages coming from QK:KNTRL.. send to Controller
		if MIDIByte2=24 and MIDIByte3<=15 // handle selected channel 24 vals 0-15
			selected_channel=MIDIByte3
			Call @UpdateSelectedChannel
		elseif MIDIByte2>=40 and MIDIByte2<=75 //mgen knob for selected mgen device
			SendMIDICC in_ch, MIDIByte2, MIDIByte3 // sends feedback back to Twister for LED update
		elseif MIDIByte2>=91 and MIDIByte2<=98 and MIDIByte3>0
			selected_mgen=MIDIByte2-91
		  Call @UpdateSelectedMgen
		elseif MIDIByte2>=109 and MIDIByte2<=116 and MIDIByte3>0
		  selected_scene=MIDIByte2-109
			Call @UpdateSelectedScene
		elseif custom_msgs[MIDIByte2]>=0
			if custom_msg_is_cc[MIDIByte2]
		  	SendMIDICC lp_ch, custom_msgs[MIDIByte2], to_pad_col[MIDIByte3]
			else
			  SendMIDINoteOn lp_ch, custom_msgs[MIDIByte2], to_pad_col[MIDIByte3]
			endif
		endif
	endif
@End

@OnSysex
  ReceiveSysex sysex_msg
  qk_msg=YES
  lp_msg=YES 
  for i = 0 to len_header-1
    if sysex_msg[i] <> qk_sysex_header[i]
      qk_msg=NO
    endif
    if sysex_msg[i] <> lp_sysex_header[i]
      lp_msg=NO
    endif
  endfor
  
  if qk_msg // sysex message generated by QK:KNTRL
    Log {QK MSG---START---}
    qk_msg_type=sysex_msg[len_header]
		
		if qk_msg_type = cmd_pad_led 
		elseif qk_msg_type = cmd_mgen_sel
			//handle mgen selection and update led's
		endif
		//logging
		Log {Message_type: }, sysex_msg[len_header]
		for i = (len_header+1) to (SysexSize-1)
			Log {Pad}, i-len_header, {:}, sysex_msg[i]
		endfor
    Log {QK MSG---END-----}
  elseif lp_msg // sysex message generated by LAUNCHPAD
		Log {LP MSG---START---}
		SendSysexThru
   	ReceiveSysex sysex_msg
		if sysex_msg[len_header]=cmd_lp_mode and sysex_msg[len_header+1]=pgmr_mode
			Call @BuildColorMapping
			Call @SetupControllerToQKMappings
			Call @UpdateAllPads
		endif
		Log {LP MSG---END-----}
  else
    Log {MSG header not recognised}
	endif
@End

@UpdateSelectedChannel
	//requires selected_channel to be set. Sets default colors and highlights selected
	for i = 0 to 14
		if chan_pads_show_sel_only
			SendMIDINoteOn lp_ch, channel_pads[i], off
		else
			SendMIDINoteOn lp_ch, channel_pads[i], colors[channel_pads[i]]
		endif
	endfor
	if chan_pads_show_sel_only
		SendMIDICC lp_ch, channel_pads[selected_channel], colors[channel_pads[selected_channel]]
	else
		SendMIDINoteOn lp_ch, channel_pads[selected_channel], white
	endif
@End

@UpdateSelectedMgen
	//requires selected_channel to be set. Sets default colors and highlights selected
	for i = 0 to 7
		if mgen_pads_show_sel_only //color other mgens
			SendMIDINoteOn lp_ch, mgen_pads[i], off
		else
			SendMIDINoteOn lp_ch, mgen_pads[i], colors[mgen_pads[i]]
		endif
	endfor
	if mgen_pads_show_sel_only //highlight selected
		SendMIDICC lp_ch, mgen_pads[selected_mgen], colors[mgen_pads[selected_mgen]]
	else
		SendMIDINoteOn lp_ch, mgen_pads[selected_mgen], white
	endif
@End

@UpdateSelectedScene
	//requires selected_scene to be set. Sets default colors and highlights selected
	for i = 0 to 7
		SendMIDICC lp_ch, scene_pads[i], colors[scene_pads[i]]	
	endfor
	SendMIDICC lp_ch, scene_pads[selected_scene], green
@End

@SetupMozaicLayout
	ShowLayout 2
	LabelPads {=>Launchpad helper. Routes incoming messages to illuminate LEDs }
	LabelPad 0, {Reboot QK Mode}
	LabelPad 1, {Brightness +}
	LabelPad 8, {To Standard modes}
	LabelPad 9, {Brightness -}
	LabelPad 10, {Brightness: }, (Div brightness, 16)
@End
		
@OnPadDown
  if LastPad=0
		new_mode=pgmr_mode
		Call @ChangeMode
	elseif LastPad=8
		new_mode=drum_mode
		Call @ChangeMode
	elseif LastPad=1
		brightness = Clip (brightness + 8), 0, 127
		Call @AdjustBrightness
		LabelPad 10, {Brightness: }, (Div brightness, 8)
	elseif LastPad=9
		brightness = Clip (brightness - 8), 0, 127
		Call @AdjustBrightness
		LabelPad 10, {Brightness: }, (Div brightness, 8)
	endif
@End

@ChangeMode
	//LP Session Mode
	CopyArray lp_sysex_header, sysex_msg, len_header
	sysex_msg[len_header]=cmd_lp_mode
	sysex_msg[len_header+1]=new_mode
	SendSysex sysex_msg, 8 // reboot layout
	if new_mode=127 //QK MODE
		Call @BuildColorMapping
		Call @SetupControllerToQKMappings
		Call @UpdateAllPads
	endif
@End

@AdjustBrightness
	CopyArray lp_sysex_header, sysex_msg, len_header
	sysex_msg[len_header]=cmd_brightness
	sysex_msg[len_header+1]=brightness
	SendSysex sysex_msg, 8 // reboot layout		
@End


