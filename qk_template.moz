//# MOZAIC KOMPOSER SUITE
//# KONTROLLER APP
//# Handles messages to all connected instances for:
//# Synchronised scene change... and other stuff 
@OnLoad
	SetShortName {KNTRL} 
	ShowLayout 2
	LabelPads {_QK:KNTRL}
	if unassigned scene_durs //# duration in first scene
		ResetNoteStates FALSE // #reset the locker with the value FALSE!
		mode = 0 //# 0Scenes, 1Channels, 2Kontrol, 3Autom., 4LFOS
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:ChordLocked
		edit_mode_active=FALSE
		edit_chan=0 // selected channel for editing
		edit_pad=0 //selected pad in a channel for editing
		use_kntrl_knobset_a=TRUE //used to toggle between two kntrl knobsets. Edit mode cant access
		use_mkntrl_knobset_a=TRUE
		kntrl_instance_num=0 //# each instance of KORDS, NOTES & BEATS should have a unique num
 		SetMetroPPQN 4
		ppqn = 4
		edit_scene=0
		locked_to_scene=0
		quick_channels=[0,1,2,16] //# user defined channels for easy access
		last_channel_visited=0 //# last channel a user visited 0-16 (16 is top level)
		scene_change_requested = -1 //# on pad down has next scene number
		in_mode_select = FALSE //# Toggle for changing modes mode
		number_of_modes = 16 //# Change in operational mode 
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		curr_chan=0 //# 0-15 KNTRL channels + Channel Select + M-Kontrol Channel
		Call @InitKnobVariables //# All knob settings on start
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	endif
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	current_scene = 0 // #0-7 Pads 0-7
	scene_durs=[4,8,0,0,0,0,0,0]
	scene_names=[0,1,2,3,4,5,6,7]
	global_swing=0
	scene_preset=0
	//# Color Scheme
	col_scene = 2
	col_sel_scene = 4
	col_edit_scene = 3
	col_pending = 3
	loop_col = 6
	col_warn = 1
	col_mode_select = 6 //# Mode selection buttons
	col_unused = 0
	col_mode_edit = 5 //# Mode selection buttons in edit mode
	//# cc numbers used for communication with _:QK instances on CH1
	//# cc's 0-7 are for scene duration
	cc_rtn_to_song_mode=9
	cc_swing=10
	
	//MIDI KONTROL DATA STRUCTURE
	//channels 0-16 with 16 being top level access to each actual channel. Initialising with channel def setup
	ch_labels[16*16]=[0,1,2,3,4,5,6,7,8,13,12,17,15,16,18,19] //#top level channels and for each of the 16 channel elements
	ch_colors[16*16]=[2,3,3,5,5,4,4,4,4,6,6,0,0,0,0,0] //#top level channels and for each of the 16 channel elements
	ch_midi_chs[16*16]=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] //# top level channel attribute
	ch_types=[] //# top level channel attribute
	ch_vals=[] //# the midi val sent chs 0-15 not ch16 (top level)
	ch_ccs=[] //# midi cc num sent chs 0-15 not ch16 (top level)
	ch_mins=[] //# range parameter for the val attribute
	ch_maxs=[] //# range parameter for the val attribute
	ch_lsb=[] //# specific to pgm change msg
	ch_msb=[] //# specific to pgm chagen msg
	FillArray ch_maxs, 127, 16*16 //# default the max cc range to 127
	
	//AUTOMATION SECTION VARS
	auto_ramp_max=127 //range for the ramp to be applied
	auto_ramp_min=0
	auto_lane=0 //0-15 slots available for automation
	auto_scene=0 //# scene being automated
	auto_ramp=0 //# apply a ramp set of automation values to a set of bars
	auto_adv_bar=0 //# scroll through scene to see automation
	scene_durs = [4,8,8,16,8,16,8,4]
	sel_autom_pad=0 //# selected automation pad for editing
	record_autom_on=FALSE //# record automation from the automation edit page
	FillArray auto_data_ch0, -1, 1024
	FillArray auto_data_ch1, -1, 1024
	FillArray auto_data_ch2, -1, 1024
	FillArray auto_data_ch3, -1, 1024
	FillArray auto_data_ch4, -1, 1024
	FillArray auto_data_ch5, -1, 1024
	FillArray auto_data_ch6, -1, 1024
	FillArray auto_data_ch7, -1, 1024
	FillArray auto_data_ch8, -1, 1024
	FillArray auto_data_ch9, -1, 1024
	FillArray auto_data_ch10, -1, 1024
	FillArray auto_data_ch11, -1, 1024
	FillArray auto_data_ch12, -1, 1024
	FillArray auto_data_ch13, -1, 1024
	FillArray auto_data_ch14, -1, 1024
	FillArray auto_data_ch15, -1, 1024
	FillArray automation_cc_vals, 0, 16 //the cc num automation gets sent on 
	FillArray automation_cc_chs, 0, 16 //the channel automation gets sent on
	FillArray automation_chs,-1,16 //# knobs used to store and locate the param to automate
	FillArray automation_pads,-1,16 //# knobs used to store and locate the param to automate

	//MACRO SECTION
	sel_macro=0 //# currently selected for editing
	macro_chans=[] //4 macros each with 4 assignable slots from the 16 channels and their 16 params
	macro_params=[]
	m1_vals=[0,0,0,0]
	m2_vals=[0,0,0,0]
	m3_vals=[0,0,0,0]
	m4_vals=[0,0,0,0]
	
	//LFO SECTION VARS
	lfo_num=0
	dest_num=0
	lfo_dests=[-1,0,-1,0,-1,0,  -1,0,-1,0,-1,0,-1,0] //#2LFO's 4 destinations calc'd by CH and PAD. -1 so no labelling
	lfo_types=[3,4] //# Ramp, Sine etc...
	lfo_freqs=[0.5, 0.5]
	lfo_syncs=[TRUE, TRUE]
	lfo_xmods=[0,0]
	autom_scene=[0,0] //current scene selected for editing in each LFO
	autom_bar=[1,1] //current bar selected for editing in each LFO
	//# stored this way so we can preserve changes if scene lengths change in preceding scenes...
	FillArray lfo_autom_amts, -1, 32*8*2 //# amt saved per bar -1 value=notsent. 8scenes, upto 32bars, 2lfos
	SetLFOType 0, {RampUp} //{Sine}, {Cosine}, {Square}, {Triangle}, {RampUp}, {RampDown}, {SH}
	SetLFOType 1, {RampDown}
	SetupLFO 0, 0, 127, YES, 0.5
	SetupLFO 1, 0, 127, YES, 0.5
	
	ch_labels[16*17] = [22,23,24,25,26,27,28,29,21,15,16,19,12,12,0,0]
	ch_colors[16*17] = [6,6,6,6,6,6,6,6,2,3,3,3,5,5,4,4]
	ch_midi_chs[16*17]= [0,0,0,0,0,0,0,0,6,7,8,9,11,12,15,15]
	toggle_plugin_ccs = [20,21,22,23,24,25,26,27,0,0,0,0,0,0,0,0]
	m_kntrl_ccs = [32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]
	//# M-KONTROL SECTION
	ch_labels[16*17]=[22,23,24,25, 26,27,28,29, 21,15,16,19, 12,12,0,0] //m-kntrl labels
	ch_colors[16*17]=[6,6,6,6, 6,6,6,6, 2,3,3,3, 5,5,4,4] //#top level channels and for each of the 16 channel elements
	ch_midi_chs[16*17]=[0,0,0,0, 0,0,0,0, 6,7,8,9, 11,12,15,15] //# top level channel attribute
	toggle_plugin_ccs=[20,21,22,23,24,25,26,27] //# on pad press this cc is sent. can be used to show hide plugin
	last_mkntrl_pad=0 //# return to last pad used m-kntrl mode
	m_kntrl_vals=[]
	for i = 0 to 31
		m_kntrl_ccs[i] = i+32
	endfor
@End

@OnHostStart
	//# keep track of scene progress
	Log HostBar, { : }, HostBeat, { = }, (HostBeatsPerMeasure * HostBar) + HostBeat
	if (HostBeat = 0) and (HostBar = 0)
		//# starting playback from beginning		
		scene_beat_count = -1
		scene_changed = FALSE
		if (songmode = 0)
			current_scene = 0
		endif
	else
		//# continuing playback
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
	endif
	Log {---- Host Started ----}
@End

@OnHostStop
  scene_beat_count = 0
  Log {---- Host Stopped ---- }, scene_beat_count, { - }
@End 


@OnNewBeat
	//# increment beat counts xonb
	scene_beat_count = scene_beat_count + 1
	//# Handle Scene and Chord changes
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	
	if (scene_change_requested > -1) and (HostBeat = 0)
		//# user requested scene change and its a new bar (& return to song)
		//# Log {Handling scene change request. It a new bar}
		Call @HandleSceneChange
	elseif (scene_beat_count >= current_scene_duration)
		//# its time to increment scene
		Call @HandleSceneChange
	endif
	Call @LogCurrentInfo
@End

@OnNewBar
@End

@OnShiftDown
	Log {MODE: }, mode
	//# xosd
	if in_mode_select //# Exit SHIFT MODE
		in_mode_select = FALSE	
		if mode=0
			Call @SetupLayoutScenes
		elseif mode=1
			ch_slot=256
			Call @SetupLayoutChannels
		elseif mode=2
			if edit_mode_active
				Call @LabelAutomationPads
				Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
			else
				Call @SetupLayoutAutom
				Call @SetupKnobset5 //# AUTOM. Write to params	
			endif
		elseif mode=3
			in_mode_select = FALSE
			LabelPads {MACROS:  Each of the 4 macros has 4 assignable  parameter slots}
			ShowLayout 2
			for i = 0 to 15
				LatchPad i, NO 
				ch_pad_to_label=i 
				pad_slot=(macro_chans[i] * 16) + macro_params[i] 
				Call @LabelChannelPadK
			endfor
			LatchPad sel_macro, YES 
			if edit_mode_active
				Call @SetupKnobset11
			else
				Call @SetupKnobset12
			endif
		elseif mode=4
			Call @SetupLayoutLFOS
		elseif mode=5
			edit_pad=0
			Call @SetupLayoutChannels
			if use_kntrl_knobset_a
				Call @Setupknobset2 //setup kontrol pads
			else 
				Call @SetupKnobset3 //use kontrol pads
			endif
			LatchPad 0, YES
		elseif mode=6
			ch_slot=16*17
			Call @SetupLayoutChannels
		endif
		Call @UpdateCurrentKnobset		
	else //not in mode select
		Call @SetupSettingsLayout
		Call @UpdateCurrentKnobset
		LabelPads {_QK:SETTINGS}
	endif
@End

@OnShiftUp
@End

@OnPadDown
	//# Pad Down actions
	if in_mode_select
		if (LastPad=2)
			Call @PrintPreset
			// Exit //# Not in use
		elseif LastPad=0
    	//# Return to song mode requested
    	return_to_song_mode_requested = TRUE
    	scene_change_requested = current_scene
    	in_mode_select = FALSE
    	songmode = 0
    	mode = 0
    	ColorPad 0, col_pending
	    ColorPad 8, col_pending
			LabelPads {_QK:KNTRL   PLAYBACK MODE: Loop whole song}
			Call @SetupKnobset0
			Call @SetupLayoutScenes
		elseif LastPad=1
		  in_mode_select = FALSE
			mode=0 //SCENES
			Call @SetupKnobset0
			Call @SetupLayoutScenes
		elseif LastPad=2
			//unused
		elseif LastPad=3 // TOGGLE EDIT MODE
			edit_mode_active = NOT edit_mode_active
			Call @SetupSettingsLayout
		elseif LastPad=4
			mode=1
			in_mode_select = FALSE
			ch_slot=256
			Call @SetupLayoutChannels
			if edit_mode_active
				Call @SetupKnobset1 //# Channels mode curr_chan
				edit_chan=0
				LatchPad 0, YES
			endif
		elseif LastPad=5
			mode=2 //AUTOMATION
			in_mode_select = FALSE
			if edit_mode_active
				sel_autom_pad=0
				Call @LabelAutomationPads
				Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
				LatchPad 0, YES
			else
				Call @SetupLayoutAutom
				Call @SetupKnobset5 //# AUTOM. Write to params	
			endif
		elseif LastPad=6
			mode=3 //MACROS
			in_mode_select = FALSE
			LabelPads {MACROS:  Each of the 4 macros has 4 assignable  parameter slots}
			ShowLayout 2
			for i = 0 to 15
				LatchPad i, NO 
				ch_pad_to_label=i 
				pad_slot=(macro_chans[i] * 16) + macro_params[i] 
				Call @LabelChannelPadK
			endfor
			LatchPad sel_macro, YES 
			if edit_mode_active
				Call @SetupKnobset11
			else
				Call @SetupKnobset12
			endif
		elseif LastPad=7
			mode=4 // LFO's
			in_mode_select = FALSE
			Call @SetupLayoutLFOS
			Call @SetupKnobset6 //# LFO's
		elseif LastPad>=8 and LastPad<=11 //GOTO a quick channel
		  mode=5 //goto MIDI MAPPING AND KONTROL mode
			if edit_mode_active
				Call @SetupKnobset7 //Setup up quick channels
			else 
				edit_pad=0
				in_mode_select = FALSE
				if quick_channels[LastPad-8]=16
					Log {Channel to go to is: }, quick_channels[LastPad-8], { last visit }, last_channel_visited
					curr_chan=last_channel_visited
				else
					Log {Channel to go to is: }, quick_channels[LastPad-8]
				  curr_chan=quick_channels[LastPad-8]
				endif
				Call @SetupLayoutChannels
				if use_kntrl_knobset_a
					Call @Setupknobset2 //setup kontrol pads
				else 
					Call @SetupKnobset3 //use kontrol pads
				endif
				LatchPad 0, YES
			endif
		elseif LastPad=12 //# ___M___ KONTRL CHANNEL
			mode=6
			in_mode_select=FALSE
			ShowLayout 2
			ch_slot=16*17
			Call @SetupLayoutChannels
			if edit_mode_active
				edit_chan=0
				if use_mkntrl_knobset_a
					Call @SetupKnobset8
				else
				  Call @SetupKnobset9
				endif
			else
				Call @SetupKnobset10
			endif
			LatchPad last_mkntrl_pad, YES
		elseif LastPad>=13 and LastPad<=15
			Call @HandleTransportRequest
		endif
	elseif NOT in_mode_select
		if mode=0  //SCENES MODE
			Call @PadDownScenesMode
		elseif mode=1 // channels mode
			Call @PadDownChannelsMode
		elseif mode=2 // AUTOM. mode
			Call @PadDownAutomMode
		elseif mode=3 // MACROS mode
			Call @PadDownMACROSMode
		elseif mode=4 // lfo's mode
			Call @PadDownLFOSMode
		elseif mode=5 // individual channel mode
			Call @PadDownIndivChMode
		elseif mode=6 // M_KNTRL mode
			Call @PadDownMKntrlMode
		endif
	endif
	LOG {MODE: }, mode
@End

@PadDownScenesMode
	if mode=0 and (LastPad >= 0 and LastPad <= 7) //SCENES MODE
		Log { SCENE CHANGE REQUESTED }
		scene_change_requested = LastPad
		SendMIDICC 15, 8, LastPad
		songmode=1 //# Lock to selected scene
		edit_scene=LastPad
		locked_to_scene=LastPad
		if NOT HostRunning //# immediate change else newbeat/bar handles
			Call @HandleSceneChange 
		endif
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	elseif mode=0 and LastPad>=13 and LastPad<=15
		Call @HandleTransportRequest
	elseif mode=0 and LastPad=8
		songmode=0 //# return to song mode
		SendMIDICC 15, cc_rtn_to_song_mode, 1
	elseif mode=0 and LastPad=9 //#update all scene durations
		for i = 0 to 7
			SendMIDICC 15, i, scene_durs[i]
		endfor
	endif
@End

@PadDownChannelsMode
	if quick_channels[0] <> LastPad and quick_channels[1] <> LastPad and quick_channels[2] <> LastPad and quick_channels[3] <> LastPad  	
		last_channel_visited = LastPad
	endif
	if edit_mode_active
		edit_chan = LastPad //channel 16 is for Channels top level
		//# update last channel visited if not one of the quick channels
		Call @SetupKnobset1
		for i = 0 to 15
			LatchPad i, no 
		endfor
		LatchPad lastPad, YES	
	else
		mode=5 //goto kontrol mode
		curr_chan = LastPad //ChannelsTopLevel is 16 - Rest are 0-15 
		edit_pad=0
		Call @SetupLayoutChannels
		if use_kntrl_knobset_a
			Call @Setupknobset2 //setup kontrol pads
		else 
			Call @SetupKnobset3 //use kontrol pads
		endif
		LatchPad 0, YES
	endif	
@End

@PadDownIndivChMode
	if LastPad = edit_pad //user hit same pad again. switch knobset
		use_kntrl_knobset_a = NOT use_kntrl_knobset_a
	endif
	edit_pad = LastPad 
	if use_kntrl_knobset_a
		Call @Setupknobset2 //setup kontrol pads
	else 
		Call @SetupKnobset3 //use kontrol pads
	endif
	for i = 0 to 15
		LatchPad i, no 
	endfor
	LatchPad LastPad, YES
@End

@PadDownLFOSMode
	Log {Pad down in LFO's mode}
	dest_num=LastPad
	Call @SetupKnobset6
@End

@PadDownMACROSMode
	Log {Pad down in MACROS mode}
	macro_num = (Div LastPad, 4) + 1
	param_num = (LastPad % 4) + 1	
	sel_macro=LastPad 
	LabelPads {MACRO }, macro_num, { PARAM }, param_num
	for i = 0 to 15
		LatchPad i, no 
	endfor
	LatchPad sel_macro, YES
	if edit_mode_active
		Call @SetupKnobset11
	endif
@End

@PadDownAutomMode
	Log {Pad down in AUTOM mode}
	sel_autom_pad=LastPad
	if edit_mode_active
		Call @LabelAutomationPads
		Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
		for i = 0 to 15
			LatchPad i, no 
		endfor
		LatchPad sel_autom_pad, YES
	else
		Call @SetupLayoutAutom
		Call @SetupKnobset5 //# AUTOM. Write to params	
	endif
@End

@PadDownMKntrlMode
	// Master/Midi control
	last_mkntrl_pad=LastPad
	if edit_mode_active
		if LastPad = edit_pad //user hit same pad again. switch knobset
			use_mkntrl_knobset_a = NOT use_mkntrl_knobset_a
		endif
		edit_pad = LastPad 
		if use_mkntrl_knobset_a
			Call @Setupknobset8 //setup a
		else 
			Call @SetupKnobset9 //setup b
		endif
	else 
		Call @SetupKnobset10 //use m-kntrl knobs
	endif
	for i = 0 to 15
		LatchPad i, no 
	endfor
	LatchPad last_mkntrl_pad, YES
@End

@HandleTransportRequest
	//# Transport buttons handling
	if LastPad=13
		Log {Map to AUM rewind}
	elseif LastPad=14
		Log {Map to AUM stop}
	elseif lastPad=15
		Log {Map to AUM Play}
	endif
@End


@HandleSceneChange
	//# Work out which scene is next xhsc
	scene_changed = TRUE
  if scene_change_requested > -1
  	current_scene = scene_change_requested
  	if return_to_song_mode_requested
  		songmode = 0
			ColorPad current_scene, col_pending
		else
	  	songmode = 1 //# lock to scene if user requests
  	endif
  	return_to_song_mode_requested = FALSE
		scene_change_requested = -1
  elseif (songmode > 0)
  	current_scene = current_scene
  elseif (current_scene = 7) //# End of song. Loop back to beginning 
    current_scene = 0 
  elseif scene_durs[current_scene + 1] <= 0
  	//# also song end
  	current_scene = 0 //# no duration in next scene return to beginning
  else
		current_scene = current_scene + 1 //# Going to next
  endif
  scene_beat_count = 0
  Log {----- SCENE CHANGE -----}, {S}, current_scene+1
	Call @SetupLayoutScenes
@End

@LogCurrentInfo
	current_scene_duration = scene_durs[current_scene]
	Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1
	LabelPads {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1
@End

@SetupSettingsLayout
	// #Label all settings mode pads
	in_mode_select = TRUE
	ShowLayout 2
	LabelPads {_QK:KNTRL SETTINGS:   (shift to exit)}
	for i = 0 to 15
		ColorPad i, col_mode_select
		LatchPad i, NO
	endfor
	for i = 8 to 11
		ColorPad i, col_unused
	endfor
	if (songmode = 0)
			LabelPad 0, {PLAYSONG: Active }
		elseif (songmode = 1)
			LabelPad 0, {PLAYSONG: Scene locked}
		elseif (songmode = 2)
			LabelPad 0, {PLAYSONG: Chord locked}
		else
			LabelPad 0, {PLAYSONG: Disabled}
	endif
	LabelPad 1, {SCENES}
	LabelPad 2, {PRINT PRESET}
	LabelPad 3, {EDIT}
	LabelPad 4, {CHANNELS}
	LabelPad 5, {AUTOM}
	LabelPad 6, {MACROS}
	LabelPad 7, {LFO's}
	for i = 0 to 3
		ch_pad_data=quick_channels[i]
		ch_pad_to_label=i+8
		if quick_channels[i]=16
			ch_pad_data=last_channel_visited
		endif
		ch_slot=256
		Call @LabelChannelPadC
	endfor
	if edit_mode_active
		LabelPad 3, {EDITING =>}
		for i = 3 to 12
			ColorPad i, col_mode_edit
		endfor
	endif
	LabelPad 12, { ___M___ }, { KONTROL }
	LabelPad 13, {<<RWD}
	LabelPad 14, {[STOP]}
	LabelPad 15, {PLAY>}
@End

@OnKnobChange
	if knob_set = 0 
	  Call @KnobChangeSet0 //# scene settings
  elseif knob_set = 1
  	Call @KnobChangeSet1 //# channel setup
  elseif knob_set = 2
  	Call @KnobChangeSet2	//# Midi Control setup
  elseif knob_set = 3
  	Call @KnobChangeSet3	//# Midi control usage
  elseif knob_set = 4
  	Call @KnobChangeSet4	//# automation params
  elseif knob_set = 5
  	Call @KnobChangeSet5	//# automation write
  elseif knob_set = 6
  	Call @KnobChangeSet6	//# lfo's
  elseif knob_set = 7
  	Call @KnobChangeSet7	//# quick channels
  elseif knob_set = 8
  	Call @KnobChangeSet8	//# M-KONTROL setup-a label, color etc
  elseif knob_set = 9
  	Call @KnobChangeSet9	//# M-KONTROL setup-b cc nums
	elseif knob_set = 10
  	Call @KnobChangeSet10	//# M-KONTROL usage vals 1-4
	elseif knob_set = 11
  	Call @KnobChangeSet11	//# Macro setup 
	elseif knob_set = 12
  	Call @KnobChangeSet12	//# Macro usage
		
	endif
@End

@UpdateCurrentKnobset
	//# On entering select mode the following need knobsets selected
	if in_mode_select	//# disable knobs in_mode_select
		LabelKnobs { }
		LabelKnob 0, { }
		LabelKnob 1, { }
		LabelKnob 2, { }
		LabelKnob 3, { }
		knob_set = 99 //# dummy number to disable
	else
		if knob_set = 0 
		  Call @SetupKnobset0 //# scene settings
	  elseif knob_set = 1
	  	Call @SetupKnobset1 //# channel setup
	  elseif knob_set = 2
			pad_slot=0
	  	Call @SetupKnobset2	//# midi control setup
	  elseif knob_set = 3
	  	Call @SetupKnobset3	//# midi control usage
	  elseif knob_set = 4
	  	Call @SetupKnobset4	//# automation params
	  elseif knob_set = 5
	  	Call @SetupKnobset5	//# automation writes
	  elseif knob_set = 6
	  	Call @SetupKnobset6	//# lfo setup
	  elseif knob_set = 7
	  	Call @SetupKnobset7	//# quick channels
	  elseif knob_set = 8
	  	Call @SetupKnobset8	//# M-KONTROL setup-a
	  elseif knob_set = 9
	  	Call @SetupKnobset9	//# M-KONTROL setup-b
	  elseif knob_set = 10
	  	Call @SetupKnobset10	//# M-KONTROL usage
		elseif knob_set = 11
	  	Call @SetupKnobset11	//# macro setup
		elseif knob_set = 12
	  	Call @SetupKnobset12	//# macro usage
		endif
	endif
@End

@SetupKnobset0
	//# Scene settings
	knob_set = 0
	LabelKnobs {Scene setup}
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	LabelKnob 2, {Preset }, scene_preset+1
	LabelKnob 3, {G-Swing }, global_swing
	SetKnobValue 0, TranslateScale edit_scene, 0, 7, 0, 127
	SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
	SetKnobValue 2, TranslateScale scene_preset, 0, 7, 0, 127
	SetKnobValue 3, TranslateScale global_swing, 0, 100, 0, 127 
@End

@KnobChangeSet0
	//# scene settings xs0
	if LastKnob = 0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_scene
			edit_scene = val
			SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
		endif
	endif
	if LastKnob = 1
		scn_duration = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 32
		scene_durs[edit_scene] = scn_duration
		SendMIDICC 15, edit_scene, scene_durs[edit_scene] 
	endif
	if LastKnob = 2
		val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 7
		if val <> scene_preset
			scene_preset = val
			CopyArray scene_presets[scene_preset*8], scene_durs, 8
			SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
		endif
	endif
	if LastKnob = 3
		val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 100
		if val <> global_swing
			global_swing = val
			SendMIDICC 15, cc_swing, global_swing
		endif
	endif
	scn_to_label = current_scene
	Call @SetupLayoutScenes
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	LabelKnob 2, {Preset }, scene_preset+1
	LabelKnob 3, {G-Swing }, global_swing
@End

@SetupKnobset1
	//# Channels Setup
	knob_set = 1
	LabelKnobs {CHANNEL }, edit_chan+1, { SETUP}
	LabelPads {KNTRL CHANNELS}
	LabelKnob 0, {Label }, ch_labels[256+edit_chan]
	LabelKnob 1, {Color }, ch_colors[256+edit_chan]
	LabelKnob 2, {MidiCH }, ch_midi_chs[256+edit_chan]
	LabelKnob 3, {Layout }, ch_types[256+edit_chan]
	SetKnobValue 0, TranslateScale ch_labels[256+edit_chan], 0, 32, 0, 127
	SetKnobValue 1, TranslateScale ch_colors[256+edit_chan], 0, 6, 0, 127
	SetKnobValue 2, TranslateScale ch_midi_chs[256+edit_chan], 0, 15, 0, 127
	SetKnobValue 3, TranslateScale ch_types[256+edit_chan], 0, 7, 0, 127 
@End

@KnobChangeSet1
	//# channels Setup
	ch_slot=256 //# location for Channeles data for labelling 
	if LastKnob = 0
		ch_labels[256+edit_chan] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 32
		ch_pad_to_label=edit_chan
		ch_pad_data=edit_chan //should always be same here. only different for quick channels
		Call @LabelChannelPadC
	endif
	if LastKnob = 1
		ch_colors[256+edit_chan] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 6
		LatchPad LastPad, NO 
		ColorPad LastPad, ch_colors[256+edit_chan]
	endif
	if LastKnob = 2
		ch_midi_chs[256+edit_chan] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		ch_pad_to_label=edit_chan
		ch_pad_data=edit_chan //should always be same here. only different for quick channels
		Call @LabelChannelPadC
	endif
	if LastKnob = 3
		ch_types[256+edit_chan] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 7
		Call @SetDefaultsForChType
		SetKnobValue 0, TranslateScale ch_labels[256+edit_chan], 0, 32, 0, 127
		SetKnobValue 1, TranslateScale ch_colors[256+edit_chan], 0, 7, 0, 127
		SetKnobValue 2, TranslateScale ch_midi_chs[256+edit_chan], 0, 15, 0, 127
	endif
	LabelKnob 0, {Label }, ch_labels[256+edit_chan]
	LabelKnob 1, {Color }, ch_colors[256+edit_chan]
	LabelKnob 2, {MidiCH }, ch_midi_chs[256+edit_chan]
	LabelKnob 3, {Layout }, ch_types[256+edit_chan]
@End

@SetupKnobset2
	//# KNTRL Mode
	knob_set = 2
	pad_slot=(curr_chan*16) + edit_pad 
	LabelKnobs {PAD: }, edit_pad+1
	LabelPads {MIDI KNTRL CHANNEL: }, curr_chan+1
	LabelKnob 0, {Label }, ch_labels[pad_slot]
	LabelKnob 1, {Color }, ch_colors[pad_slot]
	LabelKnob 2, {Value }, ch_vals[pad_slot]
	SetKnobValue 0, TranslateScale ch_labels[pad_slot], 0, 32, 0, 127
	SetKnobValue 1, TranslateScale ch_colors[pad_slot], 0, 6, 0, 127
	SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
	if ch_labels[pad_slot]=32 //pgm chg message type
		LabelKnob 3, {MAX }, ch_maxs[pad_slot]
		SetKnobValue 3, TranslateScale ch_maxs[pad_slot], 0, 127, 0, 127
	else
		LabelKnob 3, {CC# }, ch_ccs[pad_slot]
		SetKnobValue 3, TranslateScale ch_ccs[pad_slot], 0, 127, 0, 127
	endif
@End

@KnobChangeSet2
	//# KNTRL mode SETUP EDIT
	pad_slot=(curr_chan*16) + edit_pad
	if LastKnob = 0
		ch_labels[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 32
		ch_pad_to_label=edit_pad
		chan_to_label=curr_chan
		Call @LabelChannelPadK
	endif
	if LastKnob = 1
		ch_colors[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 6
		LatchPad edit_pad, NO 
		ColorPad edit_pad, ch_colors[pad_slot]
	endif
	if LastKnob = 2
		ch_vals[pad_slot] = Round TranslateScale (GetKnobValue 2), 0, 127, ch_mins[pad_slot], ch_maxs[pad_slot]
		SendMIDICC ch_midi_chs[curr_chan], ch_ccs[pad_slot], ch_vals[pad_slot]
	endif
	if LastKnob = 3
		if ch_labels[pad_slot]=32 //pgm chg message type
			ch_maxs[pad_slot] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
			SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
		else 
			ch_ccs[pad_slot] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
		endif
	endif
	LabelKnob 0, {Label }, ch_labels[pad_slot]
	LabelKnob 1, {Color }, ch_colors[pad_slot]
	LabelKnob 2, {Value }, ch_vals[pad_slot]
	if ch_labels[pad_slot]=32 //pgm chg message type
		LabelKnob 3, {MAX }, ch_maxs[pad_slot]
	else
		LabelKnob 3, {CC# }, ch_ccs[pad_slot]
	endif
@End

@SetupKnobset3
	//# KONTROL KNOBS
	knob_set = 3
	pad_slot=(curr_chan*16) + edit_pad 
	LabelKnobs {PAD: }, edit_pad+1
	LabelPads {MIDI KNTRL CHANNEL: }, curr_chan+1
	if ch_labels[pad_slot]=32 //pgm chg message type
		LabelKnob 0, {LSB }, ch_lsb[pad_slot]
		LabelKnob 1, {MSB }, ch_msb[pad_slot]
		SetKnobValue 0, TranslateScale ch_lsb[pad_slot], 0, 15, 0, 127
		SetKnobValue 1, TranslateScale ch_msb[pad_slot], 0, 15, 0, 127
	else 
		LabelKnob 0, { }
		LabelKnob 1, {MIN }, ch_mins[pad_slot]
		SetKnobValue 1, TranslateScale ch_mins[pad_slot], 0, 127, 0, 127
	endif
	LabelKnob 2, {Value }, ch_vals[pad_slot]
	LabelKnob 3, {MAX }, ch_maxs[pad_slot]
	SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
	SetKnobValue 3, TranslateScale ch_maxs[pad_slot], 0, 127, 0, 127 
@End

@KnobChangeSet3
	//# KONTROL KNOB USAGE
	pad_slot=(curr_chan*16) + edit_pad 
	if LastKnob = 0
		if ch_labels[pad_slot]=32
			ch_lsb[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		endif
	endif
	if LastKnob = 1
		if ch_labels[pad_slot]=32
			ch_msb[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		else 
			Log{saving ch mins value }, ch_mins[pad_slot] 
			ch_mins[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
			SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
		endif	
	endif
	if LastKnob = 2
		ch_vals[pad_slot] = Round TranslateScale (GetKnobValue 2), 0, 127, ch_mins[pad_slot], ch_maxs[pad_slot]
		SendMIDICC ch_midi_chs[curr_chan], ch_ccs[pad_slot], ch_vals[pad_slot]
	endif
	if LastKnob = 3
		ch_maxs[pad_slot] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
		SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
	endif
	
	if ch_labels[pad_slot]=32 //pgm chg message type
		LabelKnob 0, {LSB }, ch_lsb[pad_slot]
		LabelKnob 1, {MSB }, ch_msb[pad_slot]
	else
		LabelKnob 0, { }
		LabelKnob 1, {MIN }, ch_mins[pad_slot]
	endif
	LabelKnob 2, {Value }, ch_vals[pad_slot]
	LabelKnob 3, {MAX }, ch_maxs[pad_slot]
@End

@SetupKnobset4
	//# AUTOMATION PARAMS
	knob_set = 4
	LabelPads {AUTOMATION SETUP PARAMTERS}
	LabelKnobs {AUTOMATION}
	a_ch = automation_chs[sel_autom_pad]
	a_pad = automation_pads[sel_autom_pad]
	pad_slot=(a_ch * 16) + a_pad 
	SetKnobValue 0, TranslateScale a_ch, -1, 15, 0, 127
	SetKnobValue 1, TranslateScale a_pad, -1, 15, 0, 127
	if a_ch>=0 and a_pad>=0
		SetKnobValue 2, TranslateScale ch_vals[pad_slot], ch_mins[pad_slot], ch_maxs[pad_slot], 0, 127
	else
		SetKnobValue 2, 0		
	endif
	SetKnobValue 3, TranslateScale record_autom_on, 0, 1, 0, 127 
	Call @LabelAutomationPads
@End

@KnobChangeSet4
	//# AUTOMATION PARAMS
	if LastKnob = 0
    a_ch = Round TranslateScale (GetKnobValue 0), 0, 127, -1, 15
		automation_chs[sel_autom_pad] = a_ch
		if a_ch>=0 and a_pad>=0
			ch_pad_to_label=sel_autom_pad
			pad_slot=(a_ch * 16) + a_pad
			Call @LabelChannelPadK
		endif
  endif
  if LastKnob = 1
    a_pad = Round TranslateScale (GetKnobValue 1), 0, 127, -1, 15
		automation_pads[sel_autom_pad] = a_pad
		if a_ch>=0 and a_pad>=0
			ch_pad_to_label=sel_autom_pad
			pad_slot=(a_ch * 16) + a_pad
			Call @LabelChannelPadK
		endif
  endif
  if LastKnob = 2
		if a_ch>=0 and a_pad>=0
	    pad_slot=(automation_chs[sel_autom_pad]* 16) + automation_pads[sel_autom_pad] 
			ch_vals[pad_slot] = Round TranslateScale (GetKnobValue 2), 0, 127, ch_mins[pad_slot], ch_maxs[pad_slot]
			SendMIDICC ch_midi_chs[automation_chs[sel_autom_pad]], ch_ccs[pad_slot], ch_vals[pad_slot]
		endif
	endif
  if LastKnob = 3
		rec = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 1
		if rec <> record_autom_on
			record_autom_on = rec	
			if record_autom_on
				LabelPads {Press play. Turn knobs. Automation will record until end of scene}
				Log {On beat get midi value send for midi kontrol param and save it to automation. Only while in automation mode}
			else
			  LabelPads {LabelPads {AUTOMATION SETUP PARAMTERS}
			endif
		endif
	endif
	Call @LabelAutomationPads
@End

@LabelAutomationPads
	for i = 0 to 15
		a_ch = automation_chs[i] //automation slot channel
		a_pad = automation_pads[i] //automation pad 0-15 setup
		if a_ch>=0 and a_pad>=0 //# initialised with value -1 so no labelling until assigned
			ch_pad_to_label=i 
			pad_slot=(a_ch * 16) + a_pad
			Call @LabelChannelPadK
		else 
			ColorPad i, col_unused
			LabelPad i, { }
		endif
		if record_autom_on
			ColorPad i, col_warn
		endif
	endfor
	a_ch=automation_chs[sel_autom_pad]
	a_pad=automation_pads[sel_autom_pad]
	pad_slot=(a_ch * 16) + a_pad
	if a_ch<0
		LabelKnob 0, {Ch --}
	else
		LabelKnob 0, {Ch }, automation_chs[sel_autom_pad]+1
	endif
	if a_pad<0
		LabelKnob 1, {Pad --}
	else
		LabelKnob 1, {Pad }, automation_pads[sel_autom_pad]+1
	endif
	if a_ch>=0 and a_pad>=0
		LabelKnob 2, {Value }, ch_vals[pad_slot]
	else
		LabelKnob 2, {Value -- }
	endif
	if record_autom_on
		LabelKnob 3, {REC ON}
	else
	 	LabelKnob 3, {REC OFF}
	endif
@End

@SetupKnobset5
	//# AUTOMATION WRITE Mode
	knob_set = 5
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i] //add scene durs up to the automation scene
	endfor
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4 //allows for scrolling through the scene to see automation. view holds 4 bars
		auto_adv_max = 0
	endif
	SetKnobValue 8, auto_ramp_min
	SetKnobValue 19, auto_ramp_max
	SetKnobValue 9, TranslateScale auto_lane, 0, 15, 0, 127
	SetKnobValue 10, TranslateScale auto_scene, 0, 7, 0, 127
	SetKnobValue 20, TranslateScale auto_ramp, 0, 15, 0, 127
	SetKnobValue 21, TranslateScale auto_adv_bar, 0, auto_adv_max, 0, 127
	//# Set KnobValues for automation slots
	for i = 0 to 7
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 11 to 18
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i - 3
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor	
	Call @LabelAutomationKnobs
@End

@KnobChangeSet5
	//# AUTOMATION WRITE mode
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	if LastKnob = 8
	  auto_ramp_min = Round TranslateScale (GetKnobValue 8), 0, 127, 0, 127
	  LabelKnob 8, {Min }, auto_ramp_min 
  endif
	if LastKnob = 19
	  auto_ramp_max = Round TranslateScale (GetKnobValue 19), 0, 127, 0, 127
	  LabelKnob 19, {Max }, auto_ramp_max
	endif
	if LastKnob = 20
	  auto_ramp = Round TranslateScale (GetKnobValue 20), 0, 127, 0, 15
	  LabelKnob 20, {Ramp }, auto_ramp
		endif
	if LastKnob = 9
	  auto_lane =  Round TranslateScale (GetKnobValue 9), 0, 127, 0, 15
		Call @LabelAutomationKnobs
	endif
	if LastKnob = 10
	  auto_scene =  Round TranslateScale (GetKnobValue 10), 0, 127, 0, 7
		Call @LabelAutomationKnobs
	endif
	if LastKnob = 21
	  auto_adv_bar =  Round TranslateScale (GetKnobValue 21), 0, 127, 0, auto_adv_max
		Call @LabelAutomationKnobs
	endif
	if (LastKnob>=0 and LastKnob<=7) or (LastKnob>=11 and LastKnob<=19)
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure)
		knob_slot=LastKnob
		if LastKnob>=11
			knob_slot=LastKnob-3
		endif
		data_slot = data_slot+knob_slot
		break_point = Round TranslateScale (GetKnobValue LastKnob), 0, 127, 0, 127
		Call @UpdateAutomationPoint
	endif
@End

@SetupKnobset6
	//# LFO's
  knob_set = 6
  ShowLayout 0
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	//the amt to set at scene x bar y
	autom_lfo_amt = autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]]  
	SetKnobValue 0, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2)], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2) + 1], 0, 15, 0, 127
	SetKnobValue 2, TranslateScale autom_scene, 0, 15, 0, 127
	SetKnobValue 3, TranslateScale autom_bar, 0, 15, 0, 127
	SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
	//SetKnobValue 5, TranslateScale lfo_num, 0, 1, 0, 127
	SetKnobValue 6, TranslateScale lfo_types[lfo_num], 0, 5, 0, 127
	SetKnobValue 7, TranslateScale lfo_freqs[lfo_num], 0, 127, 0, 127
	SetKnobValue 8, TranslateScale lfo_syncs[lfo_num], 0, 1, 0, 127
	SetKnobValue 9, TranslateScale lfo_xmods[lfo_num], 0, 10, 0, 127
	Call @LabelLFOKnobs
@End

@KnobChangeSet6
	//# LFO's  mode
	if LastKnob = 0
    d_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2)] = d_ch
		if d_ch>=0 and d_pad>=0
			ch_pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelChannelPadK
		endif
  endif
  if LastKnob = 1
    d_pad = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2) + 1] = d_pad
		if d_ch>=0 and d_pad>=0
			ch_pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelChannelPadK
		endif
  endif
  if LastKnob = 2
    autom_scene = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
  if LastKnob = 3
		autom_bar = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 31
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
	if LastKnob = 4
    autom_lfo_amt = Round TranslateScale (GetKnobValue 4), 0, 127, 0, 127
		autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]] = autom_lfo_amt
  endif
  if LastKnob = 5
    lfo_num = Round TranslateScale (GetKnobValue 5), 0, 127, 0, 1
		Call @SetupKnobset6
  endif
  if LastKnob = 6
    lfo_types[lfo_num] = Round TranslateScale (GetKnobValue 6), 0, 127, 0, 5
  endif
  if LastKnob = 7
    lfo_freqs[lfo_num] = Round TranslateScale (GetKnobValue 7), 0, 127, 0, 127
		//# how do we set this for synced? what are options. maybe need array of choices?
	endif
	if LastKnob = 8
    lfo_syncs[lfo_num] = Round TranslateScale (GetKnobValue 8), 0, 127, 0, 1
  endif
  if LastKnob = 9
    lfo_xmods[lfo_num] = Round TranslateScale (GetKnobValue 9), 0, 127, 0, 10
  endif	
	Call @LabelLFOKnobs
@End

@LabelLFOKnobs
	LabelPads {LFO },lfo_num+1, { DESTINATIONS } 
	LabelKnobs {LFO },lfo_num+1, { SETUP}   
	LabelXY {LFO }, lfo_num+1, { DEST }, dest_num+1, { OUTPUT}
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	LabelKnob 0, {D-CH }, d_ch+1
	LabelKnob 1, {D-PAD }, d_pad+1
	if autom_scene <=7
		LabelKnob 2, {A-SCENE }, autom_scene[lfo_num]+1 //0-7 + 8 which is autom off free
		LabelKnob 3, {A-BAR }, autom_bar[lfo_num]+1 //set dynamically but 0-31
		LabelKnob 4, {AMT }, autom_lfo_amt
  else
		LabelKnob 2, {Auto. OFF}
		LabelKnob 3, { }
  endif
	LabelKnob 4, {AMT }, autom_lfo_amt
	LabelKnob 5, {LFO# }, lfo_num+1
	lfo_type = lfo_types[lfo_num]
	if lfo_type=0
		LabelKnob 6, {SINE}
	elseif lfo_type=1
		LabelKnob 6, {COSINE}
  elseif lfo_type=2
		LabelKnob 6, {SQUARE}
  elseif lfo_type=3
		LabelKnob 6, {RAMP UP}
  elseif lfo_type=4
		LabelKnob 6, {RAMP DN}
  elseif lfo_type=5
		LabelKnob 6, {S&H}
  endif
  LabelKnob 7, {FREQ }, lfo_freqs[lfo_num]
  if lfo_syncs[lfo_num] = 0
	  LabelKnob 8, {FREE}
	else
		LabelKnob 8, {SYNC}
	endif
	LabelKnob 9, {X-MOD }, lfo_xmods[lfo_num]
	//label destination pads
	for i = 0 to 3
		d_ch = lfo_dests[(lfo_num*8) + (i * 2)] //destination channel
		d_pad = lfo_dests[(lfo_num*8) + (i * 2) + 1] //destination 0-15 setup in kntrl mode
		if d_ch>=0 and d_pad>=0 //# initialised with value -1 so no labelling until assigned
			ch_pad_to_label=i 
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelChannelPadK
		endif
	endfor
@End

@SetupKnobset7
	//# QUICK CHANNELS SETUP Mode
	knob_set = 7
	LabelKnobs {QUICK CHANNELS}
	SetKnobValue 0, TranslateScale quick_channels[0], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale quick_channels[1], 0, 15, 0, 127
	SetKnobValue 2, TranslateScale quick_channels[2], 0, 15, 0, 127
	SetKnobValue 3, TranslateScale quick_channels[3], 0, 16, 0, 127
	Call @LabelQuickChannelKnobs
@End

@KnobChangeSet7
	//# QUICK CHANNELS SETUP
	if LastKnob = 0
		quick_channels[0] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		ch_pad_to_label=8
		ch_pad_data=quick_channels[0]
	endif
	if LastKnob = 1
		quick_channels[1] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		ch_pad_to_label=9
		ch_pad_data=quick_channels[1]
	endif
	if LastKnob = 2
		quick_channels[2] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		ch_pad_to_label=10
		ch_pad_data=quick_channels[2]
	endif
	if LastKnob = 3
		quick_channels[3] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 16
		ch_pad_to_label=11
		ch_pad_data=quick_channels[3]
		if quick_channels[3]=16
			ch_pad_data=last_channel_visited
		endif
	endif
	ch_slot=256
	Call @LabelChannelPadC
	Call @LabelQuickChannelKnobs
@End

@LabelQuickChannelKnobs
	LabelKnob 0, {QCH1 }, quick_channels[0]+1
	LabelKnob 1, {QCH2 }, quick_channels[1]+1
	LabelKnob 2, {QCH3 }, quick_channels[2]+1
	if quick_channels[3] = 16
		LabelKnob 3, {QCH4 Last}
	else
		LabelKnob 3, {QCH4 }, quick_channels[3]+1
	endif
@End

@SetupKnobset8
	//# M-KONTROL SETUP A - Label, Color, MIDI_CH
	knob_set = 8
	pad_slot = [(16*17) + last_mkntrl_pad] //location channel 17
	LabelPads {M:KNTRL  16x4 KNOB KONTROL}
	LabelKnobs {SETUP PAD }, last_mkntrl_pad+1
	LabelKnob 0, {Label }, ch_labels[pad_slot]
	LabelKnob 1, {Color }, ch_colors[pad_slot]
	LabelKnob 2, {MidiCH }, ch_midi_chs[pad_slot]
	if toggle_plugin_ccs[last_mkntrl_pad]=-1
		LabelKnob 3, {BtnCC -}
	else 
		LabelKnob 3, {BtnCC }, toggle_plugin_ccs[last_mkntrl_pad]
	endif
	SetKnobValue 0, TranslateScale ch_labels[pad_slot], 0, 30, 0, 127
	SetKnobValue 1, TranslateScale ch_colors[pad_slot], 0, 6, 0, 127
	SetKnobValue 2, TranslateScale ch_midi_chs[pad_slot], 0, 15, 0, 127
	SetKnobValue 3, TranslateScale toggle_plugin_ccs[last_mkntrl_pad], -1, 127, 0, 127  
@End

@KnobChangeSet8
	//# M-KONTROL SETUP A - Label, Color, MIDI_CH
	ch_slot=16*17 //# location for Channeles data for labelling 
	pad_slot = [(16*17) + last_mkntrl_pad] //location channel 17
	if LastKnob = 0
		ch_labels[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 30
		ch_pad_to_label=last_mkntrl_pad
		ch_pad_data=last_mkntrl_pad //should always be same here. only different for quick channels
		Call @LabelChannelPadC
	endif
	if LastKnob = 1
		ch_colors[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 6
		LatchPad LastPad, NO 
		ColorPad LastPad, ch_colors[pad_slot]
	endif
	if LastKnob = 2
		ch_midi_chs[pad_slot] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		ch_pad_to_label=last_mkntrl_pad
		ch_pad_data=last_mkntrl_pad //should always be same here. only different for quick channels
		Call @LabelChannelPadC
	endif
	if LastKnob = 3
		toggle_plugin_ccs[last_mkntrl_pad] = Round TranslateScale (GetKnobValue 3), 0, 127, -1, 127
	endif
	LabelKnob 0, {Label }, ch_labels[pad_slot]
	LabelKnob 1, {Color }, ch_colors[pad_slot]
	LabelKnob 2, {MidiCH }, ch_midi_chs[pad_slot]
	if toggle_plugin_ccs[last_mkntrl_pad]=-1
		LabelKnob 3, {BtnCC -}
	else 
		LabelKnob 3, {BtnCC }, toggle_plugin_ccs[last_mkntrl_pad]
	endif
@End

@SetupKnobset9
	//# M-KONTROL SETUP B - CC#s 1-4
	knob_set = 9
	pad_slot = [4 * last_mkntrl_pad] //location channel 17
	LabelPads {M:KNTRL  16x4 KNOB KONTROL}
	LabelKnobs {SETUP PAD }, last_mkntrl_pad+1
	LabelKnob 0, {CC1-}, m_kntrl_ccs[pad_slot]
	LabelKnob 1, {CC2-}, m_kntrl_ccs[pad_slot+1]
	LabelKnob 2, {CC3-}, m_kntrl_ccs[pad_slot+2]
	LabelKnob 3, {CC4-}, m_kntrl_ccs[pad_slot+3]
	SetKnobValue 0, TranslateScale m_kntrl_ccs[pad_slot], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale m_kntrl_ccs[pad_slot+1], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale m_kntrl_ccs[pad_slot+2], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale m_kntrl_ccs[pad_slot+3], 0, 127, 0, 127 
@End

@KnobChangeSet9
	//# M-KONTROL SETUP B - CC#'s 1-4
	pad_slot = [4 * last_mkntrl_pad] //location channel 17
	if LastKnob = 0
		m_kntrl_ccs[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if LastKnob = 1
		m_kntrl_ccs[pad_slot+1] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if LastKnob = 2
		m_kntrl_ccs[pad_slot+2] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if LastKnob = 3
		m_kntrl_ccs[pad_slot+3] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {CC1-}, m_kntrl_ccs[pad_slot]
	LabelKnob 1, {CC2-}, m_kntrl_ccs[pad_slot+1]
	LabelKnob 2, {CC3-}, m_kntrl_ccs[pad_slot+2]
	LabelKnob 3, {CC4-}, m_kntrl_ccs[pad_slot+3]
@End

@SetupKnobset10
	//# M-KONTROL USAGE - VAL KNOBS1-4
	knob_set = 10
	pad_slot = [4 * last_mkntrl_pad] //location channel 17
	LabelPads {M:KNTRL  16x4 KNOB KONTROL}
	LabelKnobs {PAD }, last_mkntrl_pad+1
	LabelKnob 0, {K1 }, m_kntrl_vals[pad_slot]
	LabelKnob 1, {K2 }, m_kntrl_vals[pad_slot+1]
	LabelKnob 2, {K3 }, m_kntrl_vals[pad_slot+2]
	LabelKnob 3, {K4 }, m_kntrl_vals[pad_slot+3]
	SetKnobValue 0, TranslateScale m_kntrl_vals[pad_slot], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale m_kntrl_vals[pad_slot+1], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale m_kntrl_vals[pad_slot+2], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale m_kntrl_vals[pad_slot+3], 0, 127, 0, 127 
@End

@KnobChangeSet10
	//# M-KONTROL USAGE - Val knobs 1-4
	pad_slot = [4 * last_mkntrl_pad] //location channel 17
	if LastKnob = 0
		m_kntrl_vals[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if LastKnob = 1
		m_kntrl_vals[pad_slot+1] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if LastKnob = 2
		m_kntrl_vals[pad_slot+2] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if LastKnob = 3
		m_kntrl_vals[pad_slot+3] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {K1 }, m_kntrl_vals[pad_slot]
	LabelKnob 1, {K2 }, m_kntrl_vals[pad_slot+1]
	LabelKnob 2, {K3 }, m_kntrl_vals[pad_slot+2]
	LabelKnob 3, {K4 }, m_kntrl_vals[pad_slot+3]
@End

@SetupKnobset11
	//# MACRO SETUP
	knob_set = 11
	LabelKnobs {MACRO SETUP}
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
	LabelKnob 2, { }
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale macro_chans[sel_macro], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale macro_params[sel_macro], 0, 15, 0, 127
	SetKnobValue 2, 0
	SetKnobValue 3, 0
@End

@KnobChangeSet11
	//# MACRO SETUP
	if LastKnob = 0
		macro_chans[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
	endif
	if LastKnob = 1
		macro_params[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15	
	endif
	ch_pad_to_label=sel_macro
	pad_slot=(macro_chans[sel_macro] * 16) + macro_params[sel_macro]
	Call @LabelChannelPadK
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
@End

@SetupKnobset12
	//# MACRO USAGE
	knob_set = 12
	LabelKnobs {MACRO KNOBS}
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
	SetKnobValue 0, TranslateScale m1_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale m2_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale m3_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale m4_vals[sel_macro], 0, 127, 0, 127 
@End

@KnobChangeSet12
	//# MACRO USAGE
	if LastKnob = 0
		m1_vals[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if LastKnob = 1
		m2_vals[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if LastKnob = 2
		m3_vals[sel_macro] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if LastKnob = 3
		m4_vals[sel_macro] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
@End

@SetupLayoutScenes
	//#xsl setup layout for Scenes mode
	ShowLayout 2
	if mode=0 or mode=1
		//# Setup scene pads
		for i = 0 to 7
			if scene_durs[i] > 0
				ColorPad i, col_scene
				scn_to_label = i
				Call @LabelScenePad
			else
				ColorPad i, col_unused
				LabelPad i, { }
			endif
			LatchPad i, NO
	  endfor
		ColorPad current_scene, col_sel_scene
		ColorPad edit_scene, col_edit_scene
		if scene_change_requested>-1
			ColorPad scene_change_requested, col_pending
		endif
		for i = 8 to 15
			LatchPad i, NO
	    ColorPad i, col_unused
			LabelPad i, { }
		endfor
	elseif mode=2
		for i = 0 to 15
	  	ColorPad i, 2
			LabelPad i, {mode??}
		endfor
	endif
	if (songmode = 0)
		LabelPad 8, {PLAYSONG: Active }
		LatchPad 8, YES
	elseif (songmode = 1)
		LabelPad 8, {PLAYSONG: Locked S}, locked_to_scene+1
		LatchPad 8, NO
		LatchPad locked_to_scene, YES
	endif
	ColorPad 13, col_unused
	ColorPad 14, col_unused
	ColorPad 15, col_unused
	LabelPad 13, {<<RWD}
	LabelPad 14, {[STOP]}
	LabelPad 15, {PLAY>}
@End

@LabelScenePad
	//# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, {S}, scn_to_label+1, { [}, sc_dur, { bars]}
@End

@SetupLayoutAutom
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 2
		LabelPad i, {autom }, i
	endfor
@End

@SetupLayoutMacros
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 6
		LabelPad i, {Macros}, i
	endfor
@End
	
@SetupLayoutLFOS
	ShowLayout 0
	for i = 0 to 4
		ColorPad i, 6
		LabelPad i, {D}, i+1
	endfor
@End

@PrintPreset
	Log {Mode: }, mode
	if mode=5
		l=[]
		o=[]
		c=[]
		i=[]
		x=[]
		pad_slot=(edit_chan*16)
		CopyArray ch_labels[pad_slot], l, 16
		CopyArray ch_colors[pad_slot], o, 16
		CopyArray ch_ccs[pad_slot], c, 16
		CopyArray ch_mins[pad_slot], i, 16
		CopyArray ch_maxs[pad_slot], x, 16
		Log {********** END PRESET **********}
		Log {def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
		Log {def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
		Log {def_maxs =   [},x[0],{,},x[1],{,},x[2],{,},x[3],{,},x[4],{,},x[5],{,},x[6],{,},x[7],{,},x[8],{,},x[9],{,},x[10],{,},x[11],{,},x[12],{,},x[13],{,},x[14],{,},x[15],{]}
		Log {def_mins =   [},i[0],{,},i[1],{,},i[2],{,},i[3],{,},i[4],{,},i[5],{,},i[6],{,},i[7],{,},i[8],{,},i[9],{,},i[10],{,},i[11],{,},i[12],{,},i[13],{,},i[14],{,},i[15],{]}
		Log {def_ccs =    [},c[0],{,},c[1],{,},c[2],{,},c[3],{,},c[4],{,},c[5],{,},c[6],{,},c[7],{,},c[8],{,},c[9],{,},c[10],{,},c[11],{,},c[12],{,},c[13],{,},c[14],{,},c[15],{]}
		Log {def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
		Log {def_colors = [},o[0],{,},o[1],{,},o[2],{,},o[3],{,},o[4],{,},o[5],{,},o[6],{,},o[7],{,},o[8],{,},o[9],{,},o[10],{,},o[11],{,},o[12],{,},o[13],{,},o[14],{,},o[15],{]}
		Log {def_labels = [},l[0],{,},l[1],{,},l[2],{,},l[3],{,},l[4],{,},l[5],{,},l[6],{,},l[7],{,},l[8],{,},l[9],{,},l[10],{,},l[11],{,},l[12],{,},l[13],{,},l[14],{,},l[15],{]}
		Log {LabelKnob X, "PRESET NAME"}
		Log {********* START PRESET *********}
	elseif mode=6
		l=[]
		o=[]
		m=[]
		t=[]
		c=[]
		CopyArray ch_labels[16*17], l, 16
		CopyArray ch_colors[16*17], o, 16
		CopyArray ch_midi_chs[16*17], m, 16
		CopyArray toggle_plugin_ccs, t, 16
		CopyArray m_kntrl_ccs, c, 64
		Log {Printing preset for mode 6}
		Log {********** END PRESET **********}
		Log {m_kntrl_ccs[3*16] = [},c[48],{,},c[49],{,},c[50],{,},c[51],{,},c[52],{,},c[53],{,},c[54],{,},c[55],{,},c[56],{,},c[57],{,},c[58],{,},c[59],{,},c[60],{,},c[61],{,},c[62],{,},c[63],{]}		
		Log {m_kntrl_ccs[2*16] = [},c[32],{,},c[33],{,},c[34],{,},c[35],{,},c[36],{,},c[37],{,},c[38],{,},c[39],{,},c[40],{,},c[41],{,},c[42],{,},c[43],{,},c[44],{,},c[45],{,},c[46],{,},c[47],{]}		
		Log {m_kntrl_ccs[1*16] = [},c[16],{,},c[17],{,},c[18],{,},c[19],{,},c[20],{,},c[21],{,},c[22],{,},c[23],{,},c[24],{,},c[25],{,},c[26],{,},c[27],{,},c[28],{,},c[29],{,},c[30],{,},c[31],{]}		
		Log {m_kntrl_ccs[0*16] = [},c[0],{,},c[1],{,},c[2],{,},c[3],{,},c[4],{,},c[5],{,},c[6],{,},c[7],{,},c[8],{,},c[9],{,},c[10],{,},c[11],{,},c[12],{,},c[13],{,},c[14],{,},c[15],{]}
		Log {toggle_plugin_ccs = [},t[0],{,},t[1],{,},t[2],{,},t[3],{,},t[4],{,},t[5],{,},t[6],{,},t[7],{,},t[8],{,},t[9],{,},t[10],{,},t[11],{,},t[12],{,},t[13],{,},t[14],{,},t[15],{]}
		Log {ch_midi_chs[16*17]= [},m[0],{,},m[1],{,},m[2],{,},m[3],{,},m[4],{,},m[5],{,},m[6],{,},m[7],{,},m[8],{,},m[9],{,},m[10],{,},m[11],{,},m[12],{,},m[13],{,},m[14],{,},m[15],{]}
		Log {ch_colors[16*17] =  [},o[0],{,},o[1],{,},o[2],{,},o[3],{,},o[4],{,},o[5],{,},o[6],{,},o[7],{,},o[8],{,},o[9],{,},o[10],{,},o[11],{,},o[12],{,},o[13],{,},o[14],{,},o[15],{]}
		Log {ch_labels[16*17] =  [},l[0],{,},l[1],{,},l[2],{,},l[3],{,},l[4],{,},l[5],{,},l[6],{,},l[7],{,},l[8],{,},l[9],{,},l[10],{,},l[11],{,},l[12],{,},l[13],{,},l[14],{,},l[15],{]}
		Log {PRESET NAME: ???}
		Log {********* START PRESET *********}
	endif
@End

@SetDefaultsForChType
	//Setup a default channel type
	if ch_types[256+edit_chan]=0 //_qk:instances
		LabelKnob 3, {_QK:}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7]
		def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=1 //synth channel
		LabelKnob 3, {INSTR}
		def_labels = [0,1,3,2,5,6,8,31,11,12,19,28,17,18,31,32]
		def_colors = [2,2,5,5,3,3,2,0,4,4,4,4,4,4,0,0]
		def_vals =   [0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=2 //audio bus channel
		LabelKnob 3, {BUS}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
		def_vals =   [0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=3 //ruismaker drums
		LabelKnob 3, {RUISMKR}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]
		def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=4 //synth only (no audio)
		LabelKnob 3, {SYNTH}
		def_labels = [0,1,3,2,5,6,8,31,11,12,19,28,17,18,31,32]
		def_colors = [2,2,5,5,3,3,2,0,4,4,4,4,4,4,0,0]
		def_vals =   [0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=5
		LabelKnob 3, {TBC1}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
		def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=6
		LabelKnob 3, {TBC2}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6]
		def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	elseif ch_types[256+edit_chan]=7
		LabelKnob 3, {TBC3}
		def_labels = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_colors = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
		def_vals =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs =    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		def_mins =   [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs =   [127,127,127,127, 127,127,127,127, 127,127,127,127, 127,127,127,127]
		def_lsb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_msb =    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	endif	
	CopyArray def_labels, ch_labels[edit_chan*16], 16
	CopyArray def_colors, ch_colors[edit_chan*16], 16
	CopyArray def_vals, ch_vals[edit_chan*16], 16
	CopyArray def_ccs, ch_ccs[edit_chan*16], 16
	CopyArray def_mins, ch_mins[edit_chan*16], 16
	CopyArray def_maxs, ch_maxs[edit_chan*16], 16
	CopyArray def_lsb, ch_lsb[edit_chan*16], 16
	CopyArray def_msb, ch_msb[edit_chan*16], 16
@End

@SetupLayoutChannels
	ShowLayout 2
	for i = 0 to 15
		ch_pad_to_label=i
		LatchPad i, NO 
		if mode=1 // Channels setup
			ch_pad_data=i //should always be same here. only different for quick channels
			ch_slot=256
			Call @LabelChannelPadC
		elseif mode=6
		  ch_pad_data=i //should always be same here. only different for quick channels
			ch_slot=16*17
			Call @LabelChannelPadC
		else
		  ch_pad_to_label=i 
			pad_slot=(curr_chan*16) + i 
			Call @LabelChannelPadK
		endif
	endfor
@End

@LabelChannelPadC // Channels or MK mode - top level (stored in 16th & 17th  slot after ch data 0-15)
	//Laborious task of labelling pads when you cant store a string
	// requires ch_pad_data and ch_pad_to_label. Separate for use with quick channels
	ColorPad ch_pad_to_label, ch_colors[ch_slot + ch_pad_data]
	label_num = ch_labels[ch_slot + ch_pad_data]
	midi_ch = ch_midi_chs[ch_slot + ch_pad_data]
	if (label_num=0)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {MASTER }
	elseif (label_num=1)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {DRUMS }
	elseif (label_num=2)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {PERCS }
	elseif (label_num=3)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {BASS }
	elseif (label_num=4)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {PAD BASS }
	elseif (label_num=5)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {LEAD }
	elseif (label_num=6)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {PADS }
	elseif (label_num=7)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {STABS }
	elseif (label_num=8)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {ARP }
	elseif (label_num=9)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {KEYS }	
	elseif (label_num=10)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {PLUCK }	
	elseif (label_num=11)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {STRINGS }	
	elseif (label_num=12)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {FX }	
	elseif (label_num=13)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {LOOPS }	
	elseif (label_num=14)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {SEQUENCES }	
	elseif (label_num=15)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {DRUM BUS }	
	elseif (label_num=16)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {PERC BUS }	
	elseif (label_num=17)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {KICK BUS}	
	elseif (label_num=18)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {BASS BUS }	
	elseif (label_num=19)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {SYNTH BUS }	
	elseif (label_num=20)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {VOCALS }	
	elseif (label_num=21)
		LabelPad ch_pad_to_label, { ____}, {M}, {____ }, {MACROS }	
	elseif (label_num=22)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:KORDS }	
	elseif (label_num=23)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:BEATS }	
	elseif (label_num=24)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:PERCS }	
	elseif (label_num=25)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:BASS }	
	elseif (label_num=26)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:SYNTHS }	
	elseif (label_num=27)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:ARPS }	
	elseif (label_num=28)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:LOOPS }	
	elseif (label_num=29)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:FILLS }	
	elseif (label_num=30)
		LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {QK:FX }	
	else
	  LabelPad ch_pad_to_label, { ____}, midi_ch+1, {____ }, {OUT OF RANGE }
	endif
@End

@LabelChannelPadK // Kontrol mode 16pads per channel
	//Laborious task of labelling pads when you cant store a string
	ColorPad ch_pad_to_label, ch_colors[pad_slot]
	label_num = ch_labels[pad_slot]
	if (label_num=0)
		LabelPad ch_pad_to_label, {VOL}
	elseif (label_num=1)
		LabelPad ch_pad_to_label, {PAN}
	elseif (label_num=2)
		LabelPad ch_pad_to_label, {SEND-DLY}
	elseif (label_num=3)
		LabelPad ch_pad_to_label, {SEND-RVB}
	elseif (label_num=4)
		LabelPad ch_pad_to_label, {SEND-FX}
	elseif (label_num=5)
		LabelPad ch_pad_to_label, {FX D/W}
	elseif (label_num=6)
		LabelPad ch_pad_to_label, {FX AMT}
	elseif (label_num=7)
		LabelPad ch_pad_to_label, {HPF}
	elseif (label_num=8)
		LabelPad ch_pad_to_label, {LPF}
	elseif (label_num=9)
		LabelPad ch_pad_to_label, {GAIN}
	elseif (label_num=10)
		LabelPad ch_pad_to_label, {MID/SIDE}
	elseif (label_num=11)
		LabelPad ch_pad_to_label, {MOD WHEEL}
	elseif (label_num=12)
		LabelPad ch_pad_to_label, {MOD PARAM}
	elseif (label_num=13)
		LabelPad ch_pad_to_label, {ATTACK}
	elseif (label_num=14)
		LabelPad ch_pad_to_label, {DECAY}
	elseif (label_num=15)
		LabelPad ch_pad_to_label, {SUSTAIN}
	elseif (label_num=16)
		LabelPad ch_pad_to_label, {RELEASE}
	elseif (label_num=17)
		LabelPad ch_pad_to_label, {FREQ}
	elseif (label_num=18)
		LabelPad ch_pad_to_label, {Q}
	elseif (label_num=19)
		LabelPad ch_pad_to_label, {ENV AMT}
	elseif (label_num=20)
		LabelPad ch_pad_to_label, {OSC TYPE}
	elseif (label_num=21)
		LabelPad ch_pad_to_label, {PWM}
	elseif (label_num=22)
		LabelPad ch_pad_to_label, {DETUNE}
	elseif (label_num=23)
		LabelPad ch_pad_to_label, {LFO RATE}
	elseif (label_num=24)
		LabelPad ch_pad_to_label, {LFO AMT}
	elseif (label_num=25)
		LabelPad ch_pad_to_label, {SUSTAIN}
	elseif (label_num=26)
		LabelPad ch_pad_to_label, {PITCH}
	elseif (label_num=26)
		LabelPad ch_pad_to_label, {MIX}
	elseif (label_num=28)
		LabelPad ch_pad_to_label, {CHARACTER}
	elseif (label_num=29)
		LabelPad ch_pad_to_label, {INSTRUMENT}
	elseif (label_num=30)
		LabelPad ch_pad_to_label, {SELECT}
	elseif (label_num=31)
		LabelPad ch_pad_to_label, {SHOW/HIDE}
	elseif (label_num=32)
		LabelPad ch_pad_to_label, {PGM CHG}
	endif
@End

@LabelAutomationKnobs
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i]
	endfor
	for i = 0 to 7
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i), HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i
		LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i) % HostBeatsPerMeasure)+1
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 11 to 18
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i-3) , HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
	  LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i-3) % HostBeatsPerMeasure)+1
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i - 3
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	LabelKnob 8, {Min}, auto_ramp_min 
	LabelKnob 19, {Max}, auto_ramp_max 
	LabelKnob 9, {Lane }, auto_lane+1
	LabelKnob 10, {Scene }, auto_scene+1
	LabelKnob 20, {Ramp}, auto_ramp
	LabelKnob 21, {Bar }, song_bar + auto_adv_bar - scene_durs[auto_scene] + 1 
	LabelKnobs {AUTOMATION: Lane: }, auto_lane+1, {   Scene }, auto_scene+1, { Bars: }, song_bar-scene_durs[auto_scene]+1, { to }, song_bar
@End

@GetAutoValueAtDataSlot
	// Sets var break_point to the value stored in auto_data array at data_slot
	if auto_lane=0
		break_point = auto_data_ch0[data_slot]
	elseif auto_lane=1
		break_point = auto_data_ch1[data_slot]
	elseif auto_lane=2
		break_point = auto_data_ch2[data_slot]
	elseif auto_lane=3
		break_point = auto_data_ch3[data_slot]
	elseif auto_lane=4
		break_point = auto_data_ch4[data_slot]
	elseif auto_lane=5
		break_point = auto_data_ch5[data_slot]
	elseif auto_lane=6
		break_point = auto_data_ch6[data_slot]
	elseif auto_lane=7
		break_point = auto_data_ch7[data_slot]
	elseif auto_lane=8
		break_point = auto_data_ch8[data_slot]
	elseif auto_lane=9
		break_point = auto_data_ch9[data_slot]
	elseif auto_lane=10
		break_point = auto_data_ch10[data_slot]
	elseif auto_lane=11
		break_point = auto_data_ch11[data_slot]
	elseif auto_lane=12
		break_point = auto_data_ch12[data_slot]
	elseif auto_lane=13
		break_point = auto_data_ch13[data_slot]
	elseif auto_lane=14
		break_point = auto_data_ch14[data_slot]
	elseif auto_lane=15
		break_point = auto_data_ch15[data_slot]
	endif	
@End

@UpdateAutomationPoint
	//# requires the slot to update as data_slot and value as break_point
	if auto_lane=0
		auto_data_ch0[data_slot] = break_point
	elseif auto_lane=1
		auto_data_ch1[data_slot] = break_point
	elseif auto_lane=2
		auto_data_ch2[data_slot] = break_point
	elseif auto_lane=3
		auto_data_ch3[data_slot] = break_point
	elseif auto_lane=4
		auto_data_ch4[data_slot] = break_point
	elseif auto_lane=5
		auto_data_ch5[data_slot] = break_point
	elseif auto_lane=6
		auto_data_ch6[data_slot] = break_point
	elseif auto_lane=7
		auto_data_ch7[data_slot] = break_point
	elseif auto_lane=8
		auto_data_ch8[data_slot] = break_point
	elseif auto_lane=9
		auto_data_ch9[data_slot] = break_point
	elseif auto_lane=10
		auto_data_ch10[data_slot] = break_point
	elseif auto_lane=11
		auto_data_ch11[data_slot] = break_point
	elseif auto_lane=12
		auto_data_ch12[data_slot] = break_point
	elseif auto_lane=13
		auto_data_ch13[data_slot] = break_point
	elseif auto_lane=14
		auto_data_ch14[data_slot] = break_point
	elseif auto_lane=15
		auto_data_ch15[data_slot] = break_point
	endif
@End

@SendAutomationData
	//# Change this to be based on current_scene_beat or something
  auto_data_slot = HostBar*HostBeatsPerMeasure + HostBeat
	if auto_data_ch0[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[0], automation_cc_vals[0], auto_data_ch0[auto_data_slot]
	endif
	if auto_data_ch1[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[1], automation_cc_vals[1], auto_data_ch1[auto_data_slot]
	endif
	if auto_data_ch2[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[2], automation_cc_vals[2], auto_data_ch2[auto_data_slot]
	endif
	if auto_data_ch3[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[3], automation_cc_vals[3], auto_data_ch3[auto_data_slot]
	endif
	if auto_data_ch4[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[4], automation_cc_vals[4], auto_data_ch4[auto_data_slot]
	endif
	if auto_data_ch5[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[5], automation_cc_vals[5], auto_data_ch5[auto_data_slot]
	endif
	if auto_data_ch6[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[6], automation_cc_vals[6], auto_data_ch6[auto_data_slot]
	endif
	if auto_data_ch7[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[7], automation_cc_vals[7], auto_data_ch7[auto_data_slot]
	endif
	if auto_data_ch8[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[8], automation_cc_vals[8], auto_data_ch8[auto_data_slot]
	endif
	if auto_data_ch9[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[9], automation_cc_vals[9], auto_data_ch9[auto_data_slot]
	endif
	if auto_data_ch10[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[10], automation_cc_vals[10], auto_data_ch10[auto_data_slot]
	endif
	if auto_data_ch11[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[11], automation_cc_vals[11], auto_data_ch11[auto_data_slot]
	endif
	if auto_data_ch12[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[12], automation_cc_vals[12], auto_data_ch13[auto_data_slot]
	endif
	if auto_data_ch13[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[13], automation_cc_vals[13], auto_data_ch13[auto_data_slot]
	endif
	if auto_data_ch14[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[14], automation_cc_vals[14], auto_data_ch14[auto_data_slot]
	endif
	if auto_data_ch15[auto_data_slot] >= 0
		SendMIDICC automation_cc_chs[15], automation_cc_vals[15], auto_data_ch15[auto_data_slot]
	endif
	@End