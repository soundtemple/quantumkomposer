//# QUANTUM KONTROLLER SUITE
//# KEYBRD APP
//# 1 dial to select a keyboard with custom layout that triggers notes for each channel in your project
//# easily trigger every instrument on every track
//# To build your layouts populate the data in @BuildLayouts, @BuildKeyboardLayout and @SetLayoutName

@OnLoad
	mgen_device_id=4 //used for midi control of pads. each mgen instance is assigned a number
	mgen_sel_dev=0 //used for midi control of pads	
	log_notes=FALSE //setting to log notes (sent to instruments) as played
  ShowLayout 4
	LabelPads {[ QUANTUM:NONKEYBOARD ]}
	SetShortName {NONK}
	
	if unassigned layout
		Call @InitKnobVariables
		Call @SysexMessageSetup
		Call @BuildLayouts
		Call @SetupKnobset
		Call @LabelLayout
	endif
@End

@Description
  QUANTUM:KEYBOARD or NONK is a keyboard for non-players.
	It's used to trigger multiple instruments across many channels
	Each of the 16 keyboards has a layout and transpose controls
	It should be routed in (only) one of two ways:
	1. Directly to your instruments OR
	2. via KORDS for current chord triggering
	When NONK	is routed via KORDS drum channels wont receive notes
	Layouts are configurable. See @BuildKeyboardLayout in this script.
	>>>Press SHIFT to start NONKING
@End


@SysexMessageSetup
	//QK Sysex messages. from KNTRL to BEATS and from BEATS to midi controllers
	qk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40] //QK messages
	len_header=6 
	//QK message types
	sx_chan_select=24 //selected instrument channel
	sx_mgen_knobs=40 //MGEN 4 knobs --to knobs controller
@End

@InitKnobVariables
	keyboard=0 //current keyboard
	number_of_keyboards=17 //number of keyboards
	last_note_pad=0 //the last pad hit in a keyboard layout
	note=60 //the note number to play on pad press after oct_adj and txpose
	chan=0 // the midi channel to send note on pad press
	velo=100 // the velocity to send with pad press. 0 for Vel thru
	FillArray layouts, 0, number_of_keyboards //the layout to apply to the keyboard
	use_knobset0=TRUE
	led_index=20 // notes 20-46 used for updating LED feedback on 16pads
	send_cc_back_to_knobs = TRUE
  knobs_controller=[15,40,41,42,43] //midi controller ch & 4 base ccs. cc's=cc's+(4xmgen_device_id
	
	//Arrays used for curent keyboard info
	FillArray labels, 0, 1024 //index to labels
	FillArray pad_channels, -1, 1024 //midi channel a note_pad will play on. overrides keyboard channel if >-1
	FillArray notes, 60, 1024 //the note number a note_pad will play on
 	global_velo=100 //the def velocity for a note_pad to play at
	FillArray colors, 0, 1024 //the pad color of each pad in each keyboard layout
	FillArray oct_adjustments, 0, number_of_keyboards //each layout has a default octave adj.
	FillArray txpose_adjustments, 0, number_of_keyboards //each layout has a default transposition
	FillArray random_vel_amts, 0, number_of_keyboards //allowable +/- fluctuation in velocity
@end

@SendMidiCCBackToKnobs //# Update controller knob vals with midi cc
	//send LED feedback when mgen device is active device to mgen knobs
	if send_cc_back_to_knobs and mgen_device_id=mgen_sel_dev
		SendMidiCC knobs_controller[0], knobs_controller[1], (Round GetKnobValue 0)
		SendMidiCC knobs_controller[0], knobs_controller[2], (Round GetKnobValue 1), 25
		SendMidiCC knobs_controller[0], knobs_controller[3], (Round GetKnobValue 2), 50
		SendMidiCC knobs_controller[0], knobs_controller[4], (Round GetKnobValue 3), 75
	endif
@End
	
@BuildLayouts
	//Store your layout info here
	//Pads from top left to bottom right
	
	layouts =        [1,1,2,2, 7,7,7,7, 5,5,5,5, 4,4,4,4] // Layout to use with each keyboard
	keybd_channels = [0,1,2,3, 4,5,6,7, 8,9,10,11, 8,9,10,11] //default midi channel use if not specified in layout
	kntrl_keyboard_selection=[0,1,2,3, 4,5,6,7, 8,9,10,11, 12,13,14,15] //on KNTRL Instr. channel change - select a keyboard 
	
	for i = 0 to number_of_keyboards
		keyboard_to_build = i 
		Call @BuildKeyboardLayout
	endfor
	
@End

@BuildKeyboardLayout
	// Build a keyboard layout. You can add as many layouts as you like. Also update @SetLayoutName
	// Select them in the GUI or add default in layouts array above
	// Usage: the first layout shows everything you need to build a layout.
	// See @InitKnobVariables FillArray's for default values
	kb2b = keyboard_to_build
	if layouts[kb2b] = 0 //name: KICK and DRUMS
		labels[kb2b*16] = [8,8,9,9,9,9,9,9, 1,2,3,4,5,6,7,15]	
		notes[kb2b*16] = [48,49,50,51, 52,53,54,55, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [5,5,6,6,7,7,1,1, 1,1,2,2,3,3,4,4]
		pad_channels[kb2b*16] = [1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0]
	elseif layouts[kb2b] = 1 // DRUMS AND PERCS
		labels[kb2b*16] = [8,8,9,9,9,9,9,9, 1,2,3,4,5,6,7,15]	
		notes[kb2b*16] = [48,49,50,51, 52,53,54,55, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [4,5,6,7,1,2,3,4, 1,1,2,2,3,3,4,4]
		pad_channels[kb2b*16] = [1,1,1,1, 1,1,1,1, 0,0,0,0, 0,0,0,0]
	elseif layouts[kb2b] = 2 //name: PERCS AND FX/LOOPS
		labels[kb2b*16] = [11,13,12,29, 14,14,14,14, 8,8,9,9,9,9,9,9]	
		notes[kb2b*16] = [48,49,50,51, 52,53,54,55, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [2,4,1,5,3,3,3,3, 4,5,6,7,1,2,3,4]
		pad_channels[kb2b*16] = [2,2,2,2,2,2,2,2, 1,1,1,1,1,1,1,1]
	elseif layouts[kb2b] = 3 //name: FX / LOOPS and COMBO
		labels[kb2b*16] = [8,8,9,9,9,9,9,9, 11,13,12,29, 14,14,14,14]	
		notes[kb2b*16] = [48,49,50,51, 52,53,54,55, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [1,2,3,4,5,6,7,4, 1,2,3,4,5,6,7,4]
		pad_channels[kb2b*16] = [1,1,1,1,1,1,1,1, 2,2,2,2,2,2,2,2]
	elseif layouts[kb2b] = 4 //name: KORDS:MELODY CHANNEL KEYBOARD
		labels[kb2b*16] = [24,28,25,28,26,28,27,24,24,28,25,28,26,28,27,24]
		notes[kb2b*16] = [60,62,64,65,67,69,71,72, 48,50,52,53, 55,57,59,60]
		colors[kb2b*16] = [4,0,4,0, 4,0,4,4, 4,0,4,0, 4,0,4,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch 
	elseif layouts[kb2b] = 5 //name: KORDS:HARMONY CHANNELS KEYBOARD
		labels[kb2b*16] = [20,20,20,20, 21,21,21,21, 22,22,22,22, 23,23,23,23]	
		notes[kb2b*16] = [36,48,60,72, 37,49,61,73, 38,50,62,74, 39,51,63,75]
		colors[kb2b*16] = [2,2,2,2, 3,3,3,3, 4,4,4,4, 5,5,5,5]
		pad_channels[kb2b*16] = [8,8,8,8, 9,9,9,9, 10,10,10,10, 11,11,11,11]
	elseif layouts[kb2b] = 6 //name: MAJOR
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [60,62,64,65,67,69,71,72, 48,50,52,53, 55,57,59,60]
		colors[kb2b*16] = [4,0,0,0, 0,0,0,4, 4,0,0,0, 0,0,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 7 //name: NATURAL MINOR
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [60,62,63,65,67,68,70,72, 48,50,51,53, 55,56,58,60]
		colors[kb2b*16] = [4,0,0,0, 0,0,0,4, 4,0,0,0, 0,0,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 8 //name: HARMONIC MINOR
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [60,62,63,65,67,68,71,72, 48,50,51,53, 55,56,59,60]
		colors[kb2b*16] = [4,0,0,0, 0,0,0,4, 4,0,0,0, 0,0,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 9 //name: CHROMATIC w/ MAJOR HIGHLIGHTS
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [56,57,58,59, 60,61,62,63, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [0,4,0,4,4,0,4,0,4,0,4,0,4,4,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 10 //name: CHROMATIC w/ NAT MINOR HIGHLIGHTS
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [56,57,58,59, 60,61,62,63, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [4,0,4,0,4,0,4,4,4,0,4,4,0,4,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 11 //name: CHROMATIC w/ HAR MINOR HIGHLIGHTS
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [56,57,58,59, 60,61,62,63, 48,49,50,51, 52,53,54,55]
		colors[kb2b*16] = [4,0,0,4,4,0,4,4,4,0,4,4,0,4,0,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 12 //name: MAJOR PENTATONIC [0,2,4,7,9]
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [55,57,60,62,64,67,69,72,36,38,40,43,45,48,50,52]
		colors[kb2b*16] = [0,0,5,0,0,0,0,5,5,0,0,0,0,5,0,0]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 13 //name: MINOR PENTATONIC [0,3,5,7,10]
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [55,58,60,63,65,67,70,72,36,39,41,43,46,48,51,53]
		colors[kb2b*16] = [0,0,5,0,0,0,0,5,5,0,0,0,0,5,0,0]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 14 //name: BLUES MAJOR [0,2,3,4,8,8,10] 
		labels[kb2b*16] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]	
		notes[kb2b*16] = [63,64,68,70,72,74,75,76,48,50,52,52,56,58,60,62]
		colors[kb2b*16] = [0,0,0,0,5,0,0,0,5,0,0,0,0,0,5,0]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 15 //name: KORDS:MELODY CHANNEL CHORD NOTES ONLY
		labels[kb2b*16] = [24,25,26,27,24,25,26,27, 24,25,26,27,24,25,26,27]
		notes[kb2b*16] = [60,64,67,71, 72,76,79,83,  36,40,43,47, 48,52,55,59]
		colors[kb2b*16] = [4,3,3,3, 4,3,3,3, 4,3,3,3, 4,3,3,3]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 16 //name: SLICED LOOP#1
		labels[kb2b*16] = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]
		notes[kb2b*16] = [60,61,62,63, 64,65,66,67, 68,69,70,71, 72,73,74,75]
		colors[kb2b*16] = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	elseif layouts[kb2b] = 17 //name: SLICED LOOP#2
		labels[kb2b*16] = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]	
		notes[kb2b*16] = [85,86,87,88, 89,90,91,92, 93,94,95,96, 97,98,99,100]
		colors[kb2b*16] = [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	else //name: default keyboard
		labels[kb2b*16] = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0]	
		notes[kb2b*16] = [56,57,58,59,60,61,62,63, 48,49,50,51,52,53,54,55]
		colors[kb2b*16] = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0]
		FillArray pad_channels[kb2b*16], keybd_channels[keyboard_to_build], 16 //fill with default midi ch
	endif	
@End

@SetLayoutName
	// Set your layout names here. 
	layout_num=layouts[keyboard] 
	if layout_num=0
		LabelPads keyboard+1, { - }, {KICK & DRUMS}
	elseif layout_num=1
	  LabelPads keyboard+1, { - }, {DRUMS & PERCS}
	elseif layout_num=2
		LabelPads keyboard+1, { - }, {PERCS & FX}
	elseif layout_num=3
		LabelPads keyboard+1, { - }, {FX & PERCS}
	elseif layout_num=4
		LabelPads keyboard+1, { - }, {KORDS:MELODY KEYBOARD CH:}, keybd_channels[keyboard]+1
	elseif layout_num=5
		LabelPads keyboard+1, { - }, {KORDS:HARMONY KEYBOARD CHs 9-12}
	elseif layout_num=6
		LabelPads keyboard+1, { - }, {MAJOR}
	elseif layout_num=7
		LabelPads keyboard+1, { - }, {NATURAL MINOR}
	elseif layout_num=8
		LabelPads keyboard+1, { - }, {HARMONIC MINOR}
	elseif layout_num=9
		LabelPads keyboard+1, { - }, {CHROMATIC w/ MAJOR HIGHLIGHTS}
	elseif layout_num=10
		LabelPads keyboard+1, { - }, {CHROMATIC w/ NAT MINOR HIGHLIGHTS}
	elseif layout_num=11
		LabelPads keyboard+1, { - }, {CHROMATIC w/ HAR MINOR HIGHLIGHTS}
	elseif layout_num=12
		LabelPads keyboard+1, { - }, {MAJOR PENTATONIC}
	elseif layout_num=13
		LabelPads keyboard+1, { - }, {MINOR PENTATONIC}
	elseif layout_num=14
		LabelPads keyboard+1, { - }, {BLUES MAJOR}
	elseif layout_num=15
		LabelPads keyboard+1, { - }, {KORDS: MELODY CHORD NOTES ONLY}
	elseif layout_num=16
	  LabelPads keyboard+1, { - }, {SLICED LOOP#1}
	elseif layout_num=17
		LabelPads keyboard+1, { - }, {SLICED LOOP#2}
	else
	  LabelPads keyboard+1, { - }, {ANOTHER LAYOUT}
	endif
@End

@OnMidiInput
	if MIDICommand=0xD0 or MIDICommand=0xE0 //Aftertouch or pitchbend pass through
		SendMIDIThruOnCh keybd_channels[last_note_pad]
	endif
@End

@OnMidiCC
	if MIDIChannel <> 15
		Exit
	endif
	if MIDIByte2=24 and MIDIByte3<=15
		// updates the selected keyboard based on the current channel in KNTRL
		// map KNTRL channels to KB-1 keyboards using kntrl_keyboard_selection array
		keyboard=kntrl_keyboard_selection[MIDIByte3]
		keyboard_to_build=keyboard
		Call @BuildKeyboardLayout
		Call @LabelLayout
		Call @SetupKnobSet
	elseif MIDIByte2>=40 and MIDIByte2<=43 //KNTRL Knobs on CH16
		if mgen_sel_dev=mgen_device_id
			last_knob = MIDIByte2-40 //simulate  LastPad action
			SetKnobValue last_knob, MIDIByte3 // change knob position
			Call @OnKnobChange2 //handle that change
		endif
	elseif MIDIByte2>=91 and MIDIByte2<=98 and MIDIByte3>0
		mgen_sel_dev=MIDIByte2-91+1 // range 1-9 to match display
		if mgen_sel_dev= mgen_device_id
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif 
	endif
@End

@OnMidiNote
	if MIDIChannel=15 and MidiNote>=20 and MIDINote<=36 and mgen_sel_dev=mgen_device_id and mgen_device_id>=0 
		// notes 20-36 on channel 16  used to trigger MGEN pads 0-15
		if MIDINote=36 //SHIFT
			if MIDICommand=0x90 //noteOn	
				Call @OnShiftDown2
			endif
		else
			last_pad = MIDINote-20
			if MIDICommand=0x90 and MIDIByte3>0 //noteOn
				Call @OnPadDown2 //instead of OnPadDown which is only triggered by touch of GUI pads in Mosaic
			elseif MIDICommand=0x90 and MIDIByte3=0
				Call @OnPadUp2
			elseif MIDICommand=0x80 //Note off
			  Call @OnPadUp2
			endif
		endif
	endif		
@End

@OnSysex
  ReceiveSysex sysex_msg
  qk_msg=YES
  for i = 0 to len_header-1 //check header make sure its a QK sysex message
    if sysex_msg[i] <> qk_sysex_header[i]
      qk_msg=NO
    endif
  endfor
  if qk_msg 
    msg_start=len_header+1 //where msg_data starts
		msg_end=SysexSize-1 //where msg_data ends
		qk_msg_type=sysex_msg[len_header] //the message type received
		//handle msg types...
		if qk_msg_type = sx_chan_select
			Log {Receive message to set new instrument channel}
		endif
	endif
@End

@OnPadDown
  // implemented so we can use incoming midi to trigger onPadDown and onPadUp
	last_pad = LastPad
	Call @OnPadDown2
@End

@OnPadDown2
  last_note_pad = (keyboard*16)+last_pad //access ch, note, label for last pad hit in a layout
	if pad_channels[last_note_pad]>=0
		chan = pad_channels[last_note_pad]
	else
		chan = keybd_channels[keyboard]
	endif
	note = Clip (notes[last_note_pad] + (oct_adjustments[keyboard]*12) + txpose_adjustments[keyboard]), 0, 127
	rnd_vel_amt = Random 0, random_vel_amts[keyboard]
	if global_vel=0 //THRU
		velo = MIDIByte3 or 100 //if note on velocity is 0 then use 100
	else
	  velo = Clip (global_velo + rnd_vel_amt), 0, 127
	endif
	// SEND THE NOTE and store note data for note off msg
	SendMIDINoteOn chan, note, velo
	note_on_store[last_pad] = note
	chan_on_store[last_pad] = chan
	
	//color held pad white
	pad_to_label=last_pad
	pad_color=8
	Call @UpdateSinglePad
	
	if log_notes
		Log {Pad: }, last_pad, { Ch: }, chan, { Note: }, (NoteName note, YES), { Velo: }, velo, { Keyboard: }, Keyboard, { Layout: }, layouts[keyboard]
	endif
	Call @SetupKnobSet
@End

@OnPadUp
	// implemented so we can use incoming midi to trigger onPadDown and onPadUp
  Call @OnPadUp2
	last_pad = LastPad
@End


@OnPadUp2
  // SEND NOTE OFF
	SendMIDINoteOff chan_on_store[last_pad], note_on_store[last_pad], 127
	
	//re-color white pad back to pad color
	LatchPad last_pad, FALSE
	pad_to_label=last_pad
	pad_color=colors[(keyboard*16)+last_pad]
	Call @UpdateSinglePad
@End

@OnShiftDown
  Call @OnShiftDown2
@End

@OnShiftDown2
	ShowLayout 2
  use_knobset0 = not use_knobset0	
	Call @SetupKnobSet
	Call @SendMidiCCBackToKnobs
@End

@SetupKnobSet
	if use_knobset0
		Call @SetupKnobSet0
	else
	  Call @SetupKnobSet1
	endif
	Call @SendMidiCCBackToKnobs
@End

@SetupKnobSet0
	//# Default Knobs
	knob_set=0
	LabelKnobs {SETUP}
	LabelKnob 0, {Keybrd }, keyboard+1
	if global_velo=0
		LabelKnob 1, {vTHRU}
	else
		LabelKnob 1, {Velo }, global_velo
	endif
	LabelKnob 2, {Oct }, oct_adjustments[keyboard]
	LabelKnob 3, {Txpose }, txpose_adjustments[keyboard]
	SetKnobValue 0, TranslateScale keyboard, 0, number_of_keyboards-1, 0, 127
	SetKnobValue 1, TranslateScale global_velo, 0, 127, 0, 127
	SetKnobValue 2, TranslateScale oct_adjustments[keyboard], -2, 2, 0, 127
	SetKnobValue 3, TranslateScale txpose_adjustments[keyboard], -12, 12, 0, 127 
@End

@SetupKnobset1
	//# Shifted knobset
	knob_set=1
	LabelKnobs {SETUP2}
	LabelKnob 0, {Keybrd }, keyboard+1
	LabelKnob 1, {Layout }, layouts[keyboard]
	LabelKnob 2, {RndV+/- }, random_vel_amts[keyboard]
	LabelKnob 3, {DefCh }, keybd_channels[keyboard]+1
	SetKnobValue 0, TranslateScale keyboard, 0, number_of_keyboards-1, 0, 127
	SetKnobValue 1, TranslateScale layouts[keyboard], 0, 15, 0, 127
	SetKnobValue 2, TranslateScale random_vel_amts[keyboard], 0, 64, 0, 127
	SetKnobValue 3, TranslateScale keybd_channels[keyboard], 0, 15, 0, 127 
@End

@OnKnobChange
  last_knob=LastKnob
	Call @OnKnobChange2
@End

@OnKnobChange2
  if use_knobset0
		Call @HandleKnobChange0
	else
	  Call @HandleKnobChange1
	endif
	Call @SendMidiCCBackToKnobs
@End

@HandleKnobChange0
	if last_knob=0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, number_of_keyboards-1
		if val <> keyboard
			keyboard = val
			keyboard_to_build=keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	elseif last_knob=1
	  global_velo = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
		if global_velo=0
			LabelKnob 1, {vTHRU}
		else
			LabelKnob 1, {Velo }, global_velo
		endif
	elseif last_knob=2
	  val = Round TranslateScale (GetKnobValue 2), 0, 127, -2, 2
		if val <> oct_adjustments[keyboard]
			oct_adjustments[keyboard] = val
			keyboard_to_build=keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	elseif last_knob=3
	  val = Round TranslateScale (GetKnobValue 3), 0, 127, -12, 12
		if val <> txpose_adjustments[keyboard]
			txpose_adjustments[keyboard] = val
			keyboard_to_build=keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	endif
@End

@HandleKnobChange1
	if last_knob=0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, number_of_keyboards-1
		if val <> keyboard
			keyboard = val
			keyboard_to_build=keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	elseif last_knob=1
	  val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		if val <> layouts[keyboard]
			layouts[keyboard] = val
			keyboard_to_build = keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	elseif last_knob=2
	  val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 64
		if val <> random_vel_amts[keyboard]
			random_vel_amts[keyboard] = val
			LabelKnob 2, {RndV+/- }, random_vel_amts[keyboard]
		endif
	elseif last_knob=3
	  val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 15
		if val <> keybd_channels[keyboard]
			keybd_channels[keyboard] = val
			keyboard_to_build=keyboard
			Call @BuildKeyboardLayout
			Call @LabelLayout
			Call @SetupKnobSet
		endif
	endif
@End

@LabelLayout
	Call @SetLayoutName
	for i = 0 to 15
		pad_to_label=i
		Call @LabelNotePad
	endfor
@End

@LabelNotePad
	note_pad_to_label = (keyboard*16)+pad_to_label //access ch, note, label for last pad hit in a layout
	if pad_channels[note_pad_to_label] >= 0
		chan = pad_channels[note_pad_to_label]
	else
		chan = keybd_channels[keyboard]
	endif
	note = notes[note_pad_to_label] + (oct_adjustments[keyboard]*12) + txpose_adjustments[keyboard]
	label = labels[note_pad_to_label]
	if label=0 // lll
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, { }
	elseif label=1
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {KICK}
	elseif label=2
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {LO_TOM}
	elseif label=3
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {SNARE}
	elseif label=4
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {CLAP}
	elseif label=5
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HHC}
	elseif label=6
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HHO}
	elseif label=7
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HIHAT}
	elseif label=8
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {SHAKER}
	elseif label=9
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {PERC}, pad_to_label+1
	elseif label=10
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {LOOP SLICE}
	elseif label=11
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {CRASH}
	elseif label=12
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {SCAPES}
	elseif label=13
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {RIZER}
	elseif label=14	
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {SYNC LOOP}
	elseif label=15
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {RIDE}
	elseif label=16
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {BASS}
	elseif label=17
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {PAD BASS}
	elseif label=18
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {LEAD}
	elseif label=19
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {PAD}
	elseif label=20
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HARM1}
	elseif label=21
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HARM2}
	elseif label=22
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HARM3}
	elseif label=23
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {HARM4}
	elseif label=24
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {ROOT}
	elseif label=25
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {3RD}
	elseif label=26
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {5TH}
	elseif label=27
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {7TH}
	elseif label=28
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {NON CHORD}
	elseif label=29
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {  FX  }
	elseif label=30
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER1}
	elseif label=31
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER2}
	elseif label=32
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER3}
	elseif label=33
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER4}
	elseif label=34
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER5}
	elseif label=35
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER6}
	elseif label=36
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER7}
	elseif label=37
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER9}
	elseif label=38
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER10}
	elseif label=39
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {USER11}
	else
		LabelPad pad_to_label, {Ch}, chan+1, {           }, (NoteName note, YES), { (}, note, {)}, { ________ }, {NOTE PAD}
	endif
	pad_color=colors[note_pad_to_label]
	Call @UpdateSinglePad
@End

@UpdateAllPadColors
	//update pad colors and send midi feedback for LED lighting
	for i = 0 to 15
		pad_to_label=i
		pad_color=colors[(keyboard*16)+pad_to_label]
		Call @UpdateSinglePad
	endfor
@End

@UpdateSinglePad
	//update color on a single pad
	if pad_color=8
		LatchPad pad_to_label, TRUE
	else
		LatchPad pad_to_label, FALSE
		ColorPad pad_to_label, pad_color
	endif
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, pad_to_label+led_index, pad_color
	endif
@End

