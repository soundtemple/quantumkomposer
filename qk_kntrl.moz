//# QUANTUM KONTROLLER SUITE
//# KNTRL APP
//# Handles messages to all connected instances for:
//# Synchronised scene change... and other stuff 
@OnLoad
	ShowLayout 2
	LabelPads {[ KNTRL ]}
	SetShortName {KNTRL}
	if unassigned scene_durs // duration in first scene 
		mode = 0 //# 0Scenes, 1Channels, 2Kontrol, 3Autom., 4LFOS
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:ChordLocked
		edit_mode_active=FALSE
		edit_chan=0 // selected channel for editing
		edit_pad=0 //selected pad in a channel for editing
		use_instr_knobset_a=TRUE //used to toggle between two kntrl knobsets. Edit mode cant access
		use_mgen_knobset_a=TRUE
		drambo_layout_active=FALSE //layouts 5 & 6 at present. Update padDownChannels mode if layouts change
		SetMetroPPQN 4
		ppqn = 4
		edit_scene=0
		locked_to_scene=0
		pad_is_down=FALSE
		reset_mxr=FALSE //confirm reset mixer in settings mode
		reset_whole_layout=FALSE //confirm reset whole layout in settings mode
		last_channel_visited=0 //# last channel a user visited 0-16 (16 is top level)
		scene_change_requested = -1 //# on pad down has next scene number
		in_mode_select = FALSE //# Toggle for changing modes mode
		number_of_modes = 16 //# Change in operational mode 
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		curr_chan=0 //# 0-15 KNTRL channels + Channel Select + M-Kontrol Channel
		print_preset=TRUE
		send_cc_back_to_knobs = TRUE
		midi_controller=[15,36,37,38,39] //midi controller channel then 4 ccs for kntrl of kntrl knobs
		scene_copied=FALSE
		loop_song_mode=FALSE
		//SYSEX
		lp_sysex_header=[0xF0,0x00,0x20,0x29,0x02,0x0D]
		qk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40]
		len_header=6
		Call @InitKnobVariables //# All knob settings on start
		Call @SetupKnobset0
		Call @SetupLayoutScenes
		//Log {On load successful}
	endif
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	current_scene = 0 // #0-7 Pads 0-7
	scene_durs=[4,8,0,0,0,0,0,0]
	scene_names=[0,1,2,3,4,5,6,7]
	scene_presets[0*8]=[1,2,2,1,0,0,0,0]
	scene_presets[1*8]=[4,8,16,16, 8,16,8,4]
	scene_presets[2*8]=[16,16,32,32, 16,32,32,16]
	scene_presets[3*8]=[16,32,32,16, 32,32,16,16]
	scene_presets[4*8]=[32,32,32,32, 32,32,32,32]
	global_swing=0
	scene_preset=0
	scene_beat_count=0
	//# Color Scheme
	col_scene = 2
	col_sel_scene = 4
	col_edit_scene = 3
	col_pending = 3
	loop_col = 6
	col_warn = 1
	col_mode_select = 5 //# Mode selection buttons
	col_unused = 0
	col_mode_edit = 6 //# Mode selection buttons in edit mode
	//CC's used to communicate with KORDS, BEATS n NOTES
	cc_scene_select=100
	cc_scene_duration=101 //+ scene_num0-7 ie 101-108
	cc_rtn_to_song_mode=22
	cc_swing=23
	send_cc21_for_spa=FALSE // chg SPA pattern when KNTRL changes scene
	
	//MIDI KONTROL DATA STRUCTURE
	// 16 channels --> layout, midi_ch, label,color,lsb,msb
	// 16 instruments --> label,color,cc#,value,min,max
	// 16 mixers --> Vol,Pan,Gain,M/S, SendA,SendB,LPF,HPF, EQFeq,Res,Gain,Shelf, Mute,Solo,Arm, ??
	// 16 MidiGENs --> (channels 17-24) label,color, ccs1-4, plugin_btn, midi_ch=1
	
	//CHANNELS
	layouts_locked=TRUE
	chan_lsb=[0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0] //# specific to pgm change msg
	chan_msb=[0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0] //# specific to pgm change msg
	chan_pgm=[]
	FillArray chan_pgm_max, 127, 16
	// Default setup for Channels - midi chs are fixed
	chan_labels =  [16,1,2,15,3,3,5,5,4,6,10,8,20,21,22,23]
	chan_colors =  [2,2,6,6,4,4,4,4,3,3,3,3,5,5,5,0]
	chan_midi_chs= [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
	chan_layouts =  [5,5,5,5,6,6,6,6,6,6,6,6,2,16,17,0]
	FillArray chan_mute, FALSE, 16 //toggle mute, solo, arm
	FillArray chan_solo, FALSE, 16
	FillArray chan_arm, FALSE, 16
	
	//INSTRUMENTS (16) (16x4pages) label, color, value, cc#, mix, max 
	inst_state=[] // the stored val for each instr slot 4pages 16pad slots
	inst_curr_page=[0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0]
	inst_labels=[]
	inst_color=[]
	inst_ccs=[] //# midi cc num sent chs 0-15 
	inst_mins=[] //# range parameter for the val attribute
	inst_maxs=[] //# range parameter for the val attribute
	inst_def_vals=[] //default vals for an instrument 64 slots
	FillArray inst_maxs, 127, 1024 //# default the max cc range to 127
	// label number vars. Update these if @LabelInstr changes	
	lbl_num_pgm_dec=57
	lbl_num_pgm_inc=58
	lbl_num_res_mxr=59
	lbl_num_res_inst=60
	lbl_num_ch_num=62
	lbl_num_drum_ch=63
	// MIXER - Vol,Pan,Gain,M/S, SendsA-D, EQ LO,EQ HI, LPF,HPF,  Mute,Solo,Arm, [instr],[eq],[fx1],[fx2]
	mixer_mode=0 //# the section of the mixer VOL, SEND/FILT, EQ, FX, MUTE/SOLO, [instr],[eq],[fx1],[fx2]
	mixer_state=[] //the main container for mixer cc values
	chan_mx_ccs = [7,8,6,9, 10,11,12,13, 14,15,16,17, 117,118,119,120, 121,122,123, 124,125,126,127]
	chan_mx_def_vals = [90,64,64,64, 0,0,0,0, 64,64,0,127, 0,0,0,0, 0,0,0] //def values for mixer params
	protected_cc_to_label=[-1,35,36,37,38,-1, 1,0,2,3, 4,5,6,7] 
	protected_cc_to_label[113]=[8,9,10,11, 12,13,14,15, 64,65,66, 124,125,126,127]
	lower_mx_ccs_max=14
	upper_mx_ccs_min=113
	//send ccs back to controller
	curr_chan_ccs_update_controller = [7,8,6,9, 10,11,12,13, 14,15,16,17, 117,118,119,120, 121,122,123]
	
	mute_solo_arm=0 //remember pad state 0-2
	for ch = 0 to 15 //set up mixer on all channels with default vals on def cc's
		for i = 0 to 18
			mixer_state[(ch*20) + i] = chan_mx_def_vals[i] //store vals in the curr_chan not the midi chan 
		endfor
	endfor
	mixer_cc_slots=[]
	for i = 0 to 23 //Midi CC in from controller just coming on set a cc's
		mixer_cc_slots[chan_mx_ccs[i]] = i // reverse relation cc value to chan_mx_ccs index for midicc in only
	endfor
	//SETUP MIDI MAPPING PARAMS FOR DEFAULT INSTR. CHANNELS
	for i = 0 to 15
		edit_chan=i 
		Call @BuildLayoutPages
	endfor
	//# MIDI GEN KONTROL SECTION
	allow_edit_mgen_ccs=FALSE
	sel_mgen_dev=0 //# return to last pad used MG-kntrl mode
	mgen_vals=[]
	mgen_labels =  [2,3,12,15,15,16,17,18,20,14,1,15,0,0,0,0]
	mgen_colors =  [2,2,2,7,7,4,3,5, 6,0,0,0,2,0,1,3]
	mgen_guis = [91,92,93,94,95,96,97,98,99,0,0,0,0,0,0,0]
	for i = 0 to 8
		mgen_guis[i] = i+91  ////fixed cc's for showing MG GUI 92-99 (8 instances)
		mgen_ccs[(i*4)+0] = ((i*4)+0)+40 //fixed cc's for controlling MG apps
		mgen_ccs[(i*4)+1] = ((i*4)+1)+40 //k2 (9*4) = ccs40-75 )
		mgen_ccs[(i*4)+2] = ((i*4)+2)+40 //k3
		mgen_ccs[(i*4)+3] = ((i*4)+3)+40 //k4
	endfor 
	//Ruismaker instruments per channel 
	rmkr_instrs[0*8] = [10,11,12,13, 14,15,16,17] //ch1 8 kiks all arrays len=8
	rmkr_instrs[1*8] = [70,73,76,79, 82,85,88,91] //ch4 low toms
	rmkr_instrs[2*8] = [30,31,32,33, 34,35,36,36] //ch2 snares
	rmkr_instrs[3*8] = [50,50,51,51, 101,101,111,111] //ch3 claps
	rmkr_instrs[4*8] = [60,60,60,62, 62,62,66,66] //ch5 hhc
	rmkr_instrs[5*8] = [61,63,63,64, 65,65,67,67] //ch6 hho
	rmkr_instrs[6*8] = [71,80,74,77, 86,89,92,83] //ch7 perc1
	rmkr_instrs[7*8] = [72,81,75,78, 87,90,93,84] //ch8 perc2
@End

@OnMidiCC //KNTRL midi implementation. Receive only CH16 - output to active channel
  // Commands (hex#) NoteOn=0x90;NoteOff=0x80;CC=0xB0;ProgramChange=0xC0;Aftertouch=0xD0;Pitchbend=0xE0
	// CCs0-13 THRU: CH Mixer
	// CCs14-17 IN: KNTRL KNOBS1-4 for knobset chg without using via AUM MidiControl
	// CC22 OUT: StepPolyArpUnit change pattern
	// CC26-35 --- FREE!
	// CC38-86 OUT: MG KNTRL KNOBS CC's 1-4 * 12 slots
	// CC87-98 OUT: MidiGen device (1-16) GUI show/hide 	
	// CCs99 OUT: update all scene durs
	// cc100: Scene change using cc100 and midi byte3 vals 0-7. Launchpad cc strip lights up
	// CCs101-108 OUT: scene duration update. IN: SCENE CHANGE REQ	
	// CCs109-116: scene change - this is how kntrl communicates with other QK devices for scene update
	// ccs117-127: CH Mixer controls
	//Log {Lowr: }, lower_mx_ccs_max, { uppr: }, upper_mx_ccs_min
	if MIDIChannel <> 15
		Exit //other cc's must be on ch16 (1-16)
		
	elseif MIDIByte2=0 or MIDIByte2=5 //TRANSPORT on CH16 - Aum: STOP, PLAY
		SendMIDICC MIDIChannel, MIDIByte2, MIDIByte3 
	
	elseif MIDIByte2<=17 or MIDIByte2>=117 //MIXER CONTROLS  curr_ch (21<>113)
		//ModWheel & mod source msgs + Mixer(Vol,Gain,Pan,M/S,SendA,SendB,HPF,LPF,EQ) 
		SendMIDIThruOnCh chan_midi_chs[curr_chan]
		//Log {-- THRU TO: MIXER KNTRL CH:}, chan_midi_chs[curr_chan],{ cc}, MIDIByte2, { - }, MIDIByte3
		mixer_state[(curr_chan*20) + mixer_cc_slots[MIDIByte2]] = MIDIByte3 // for a and b cc sets
	
	elseif MIDIByte2=24 and (MIDIByte3>=0 and MIDIByte3<=14) // Switch INSTRUMENT channel 0-15
		in_mode_select=FALSE
		last_pad = MIDIByte3
		mode=1
		if (last_pad=curr_chan) or drambo_layout_active  
			//user hit goto channel pad twice or Drambo layout so select pad 
			curr_chan = last_pad
			SendMIDICC chan_midi_chs[curr_chan], 124, 127 //toggle instrument GUI
		endif
		Call @PadDownChannelsMode
		
	elseif MIDIByte2=25
		if MIDIByte3>0
			SendMIDICC 15, 25, 127 //Toggle KNTRL gui 
		endif
			
	elseif (MIDIByte2>=26 and MIDIByte2<=35)
		//General purpose cc's available for mapping. forward message on.
		//See midi implementation chart for purpose
		SendMIDICC 15, MIDIByte2, MIDIByte3
		
	elseif MIDIByte2>=36 and MIDIByte2<=39 //KNTRL Knobs on CH16
		last_knob = MIDIByte2-36 //simulate  LastPad action
		SetKnobValue last_knob, MIDIByte3 // change knob position
		Call @OnKnobChange2 //handle that change 
	
	elseif MIDIByte2>=40 and MIDIByte2<=43 //selected mgen device knobs
		last_knob=MIDIByte2-40 //cc's4043 are for knobs 0-3
		pad_slot=[4 * sel_mgen_dev] //where we store the cc value for that instance and knob0-3  
		SendMIDICC 15, mgen_ccs[pad_slot+last_knob], MIDIByte3
	
	elseif MIDIByte2>=76 and MIDIByte2<=79 //mix bus volumes
		mixbusvol_ccs=[30,46,62,78]
		SendMIDICC 12, mixbusvol_ccs[MIDIByte2-76], MIDIByte3
		mixer_state[(12*20) + mixer_cc_slots[mixbusvol_ccs[MIDIByte2-76]]] = MIDIByte3
	
	elseif MIDIByte2=80 //Channel Volume Kick Bus
		SendMIDICC 15, 80, MIDIByte3
		
	elseif MIDIByte2>=82 and MIDIByte2<=86
	  mode=7 //MIXER MODES
		in_mode_select = FALSE
		Call @SetupLayoutChannels
		mixer_mode=MIDIByte2-82
		Call @SetupKnobset7
		Call @SendMidiCCBackToKnobs
			
	elseif MIDIByte2=87 //Master Volume
		SendMIDICC 14, MIDIByte2-80, MIDIByte3
		mixer_state[(14*20)+ mixer_cc_slots[MIDIByte2-13]] = MIDIByte3
	
	elseif MIDIByte2=88
		SendMIDICC 15, 88, 1 // LED FEEDBACK
		SendMIDICC 15, 88, 11, 200
		for ch = 0 to 14
			for n = 0 to 127
				SendMIDINoteOff ch, n, 127 //handle stuck notes
			endfor
		endfor
		
	elseif MIDIByte2=90 and MIDIByte3<=8 // MGEN setup in MG Kntrol
			mode=6
			in_mode_select=FALSE
			sel_mgen_dev=MIDIByte3
			Call @SetupLayoutChannels
			Call @SetupKnobset10
			LatchPad sel_mgen_dev, YES
			
	elseif MIDIByte2>=91 and MIDIByte2<=99 // MGEN GUI toggle
		if MIDIByte3>0
			SendMIDICC MIDIChannel, sel_mgen_dev+91, MIDIByte3
			mode=6
			in_mode_select=FALSE
			sel_mgen_dev=MIDIByte2-91
			Call @SetupLayoutChannels
			Call @SetupKnobset10
			LatchPad sel_mgen_dev, YES
			SendMIDICC MIDIChannel, MIDIByte2, MIDIByte3, 10 //open new mgen gui
		endif
		
	elseif (MIDIByte2=100) and (MIDIChannel=15) and (MIDIByte3<=7) //SCENE CHANGE CH16 CC100 only vals0-7
		last_pad = MIDIByte3
		mode=0
		Call @PadDownScenesMode
		
	elseif (MIDIByte2>=109) and (MIDIByte2<=116) and (MIDIByte3=127) //SCENE CHANGE CH16 CC109-116 val127
		last_pad = MIDIByte2-109
		mode=0
		Call @PadDownScenesMode
		
	else
	  SendMIDIThru
	endif
@End

@OnMidiNote //Ony on CH16 the lowest notes can control the pads and shift button
	if MIDIChannel=15 and MIDINote<=16 //NoteOn or NoteOff KNTRL PADS
		// lowest notes on any channel used to trigger KNTRL pads 0-15
		if MIDINote=16 //SHIFT
			if MIDICommand=0x90 //noteOn	
				Call @OnShiftDown2
			endif
		else
			last_pad = MIDINote
			if MIDICommand=0x90 and MIDIByte3>0 //noteOn
				Call @OnPadDown2 //instead of OnPadDown which is only triggered by touch of GUI pads in Mosaic
			elseif MIDICommand=0x90 and MIDIByte3=0
				Call @OnPadUp2
			elseif MIDICommand=0x80 //Note off
			  Call @OnPadUp2
			endif
		endif
	elseif MIDIChannel=15
		//SendMIDIThruOnCh chan_midi_chs[curr_chan]
		//Log {Notes on other channels thru}
	endif
@End

@OnMidiInput
	if MIDICommand=0xD0 or MIDICommand=0xE0 //Aftertouch or pitchbend
		if MIDIChannel=15
			SendMIDIThruOnCh chan_midi_chs[curr_chan]
		else
		  SendMIDIThru
		endif
	endif
@End

@OnSysex
  ReceiveSysex sysex_msg
  qk_msg=YES
  lp_msg=YES 
  for i = 0 to len_header-1
    if sysex_msg[i] <> qk_sysex_header[i]
      qk_msg=NO
    endif
    if sysex_msg[i] <> lp_sysex_header[i]
      lp_msg=NO
    endif
  endfor
  
  if qk_msg // sysex message generated by QK:KNTRL
    Log {QK MSG---START---}
    Log {Message_type: }, sysex_msg[len_header]
		for i = (len_header+1) to (SysexSize-1)
			Log {Pad}, i-len_header, {:}, sysex_msg[i]
		endfor
    Log {QK MSG---END-----}
  elseif lp_msg // sysex message generated by LAUNCHPAD
    Log {LP MSG---START---}
		SendSysexThru
   	Log SysexSize, { Bytes long}
		Log {LP MSG---END-----}
  else
    Log {MSG header not recognised}
	endif
@End


@SendMidiCCBackToKnobs
	//# Update controller knob vals with midi cc
	// Log {sending midi to CONTROLLER ... CH:}, midi_controller[0]+1, { cc#}, midi_controller[1], {-},midi_controller[4]
	if send_cc_back_to_knobs
		SendMidiCC midi_controller[0], midi_controller[1], (Round GetKnobValue 0)
		SendMidiCC midi_controller[0], midi_controller[2], (Round GetKnobValue 1), 25
		SendMidiCC midi_controller[0], midi_controller[3], (Round GetKnobValue 2), 50
		SendMidiCC midi_controller[0], midi_controller[4], (Round GetKnobValue 3), 75
		for i = 0 to 14 //send selected mixer vals for curr_chan back to midi controller
			val = mixer_state[(curr_chan*20)+i]
			SendMIDICC 15, curr_chan_ccs_update_controller[i], val, (i*40)+40
		endfor
	endif
@End

@OnHostStart
	//# keep track of scene progress
	//Log HostBar, { : }, HostBeat, { = }, (HostBeatsPerMeasure * HostBar) + HostBeat
	if (HostBeat = 0) and (HostBar = 0)
		//# starting playback from beginning		
		scene_beat_count = -1
		scene_changed = FALSE
		if (songmode = 0)
			current_scene = 0
		endif
	else
		//# continuing playback
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
	endif
	if mode=0 or mode=1 or mode=6
		ColorPad 15, 3
	endif
	//Log {---- Host Started ----}
@End

@OnHostStop
  scene_beat_count = 0
	if mode=0 or mode=1
		Call @SetupLayoutScenes
	elseif mode=6
	  Call @SetupLayoutChannels
	endif
  //Log {---- Host Stopped ---- }, scene_beat_count, { - }
@End 


@OnNewBeat
	//# increment beat counts
	scene_beat_count = scene_beat_count + 1
	//# Handle Scene and Chord changes
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	if (scene_change_requested > -1) and (HostBeat = 0)
		//# user requested scene change and its a new bar (& return to song)
		//# Log {Handling scene change request. It a new bar}
		Call @HandleSceneChange
	elseif (scene_beat_count >= current_scene_duration)
		//# its time to increment scene
		Log {Time to increment scene }, scene_change_requested
		Call @HandleSceneChange
	endif
	Log {Logging current info}, scene_change_requested
	Call @LogCurrentInfo
@End

@OnNewBar
@End

@OnShiftDown
  Call @OnShiftDown2 //simply to allow midi note in simulation of SHIFT Note16 any channel
@End

@OnShiftDown2
	//Log {MODE: }, mode
	scene_copied=FALSE
	if in_mode_select //# Exit SHIFT MODE
		in_mode_select = FALSE	
		reset_mxr=FALSE
		reset_whole_layout=FALSE
		if mode=0 //SCENCES
			Call @SetupLayoutScenes
			Call @Setupknobset0
		elseif mode=1
			Call @SetupLayoutChannels
		elseif mode=2
			Call @LabelMIDILearnPads
		elseif mode=5 //instrument mode
			edit_pad=0
			Call @SetupLayoutChannels
			if layouts_locked
				Call @Setupknobset4 //Locked instrument knobs
			else
				Call @Setupknobset2 //setup INSTRUMENT KNOBS
			endif
			LatchPad 0, YES
		elseif mode=6 //MG control mode
			Call @SetupLayoutChannels
		elseif mode=7 //Mixer mode
			Call @SetupLayoutChannels
			mixer_mode=0
			Call @SetupKnobset7
		endif
		Call @UpdateCurrentKnobset
	elseif mode=2
		mode=0 //just exiting midi learn
	  Call @SetupSettingsLayout
	else //not in mode select
		Call @SetupSettingsLayout
		Call @UpdateCurrentKnobset
		//LabelPads {KNTRL : [ SETTINGS ]}
	endif
@End

@OnShiftUp
@End

@OnPadDown
  last_pad = LastPad // so midi in can simulate LastPad also see OnMidiIn
	Call @OnPadDown2 //midi input cant trigger @OnPadDown, It calls @OnPadDown2
@End

@OnPadDown2 // for midi in as well notes 0-15 on any channel
	//# Pad Down actions
	pad_is_down = TRUE
	if in_mode_select
		if last_pad=0
		  in_mode_select = FALSE
			mode=0 //SCENES
			Call @SetupKnobset0
			Call @SetupLayoutScenes
		elseif last_pad=1 //# ___MG___ KONTRL CHANNEL
			mode=6
			in_mode_select=FALSE
			Call @SetupLayoutChannels
			if edit_mode_active
				edit_chan=0
				if use_mgen_knobset_a
					Call @SetupKnobset8
				else
				  Call @SetupKnobset9
				endif
			else
				Call @SetupKnobset10
			endif
			LatchPad sel_mgen_dev, YES
		elseif last_pad=2 // TOGGLE EDIT MODE
			edit_mode_active = NOT edit_mode_active
			Call @SetupSettingsLayout
		elseif last_pad=3
			mode=1
			in_mode_select = FALSE
			Call @SetupLayoutChannels
			if edit_mode_active
				edit_chan=0
				curr_chan=0
				Call @SetupKnobset1 //# Channels mode curr_chan
			endif
			LatchPad curr_chan, YES
			LabelPads {KNTRL : [ INSTRUMENT CHANNELS ]}
		elseif last_pad=4
			SendMIDICC chan_midi_chs[curr_chan], 124, 127 // show / hide INSTR
		elseif last_pad=5
			SendMIDICC chan_midi_chs[curr_chan], 125, 127 // show / hide EQ
		elseif last_pad=6
			SendMIDICC chan_midi_chs[curr_chan], 126, 127 // show / hide FX1
		elseif last_pad=7
			SendMIDICC chan_midi_chs[curr_chan], 127, 127 // show / hide FX2
		elseif last_pad=15
			if chan_layouts[curr_chan]=2 or chan_layouts[curr_chan]=16 or chan_layouts[curr_chan]=17 //mixbus, rtns or master 
				// reset all values to default params for busses 1-4 or all sends 1-4
				pad_slot = (64*curr_chan)
				if reset_mxr  //user hit same pad again. switch knobset
					edit_chan=curr_chan
					Call @BuildLayoutPages
					for i = 0 to 63
						SendMIDICC chan_midi_chs[curr_chan], inst_ccs[(64*curr_chan)+i], inst_def_vals[i]
					endfor
					reset_mxr=FALSE
					Call @SetupSettingsLayout
				else 
					LabelPad last_pad, {Yes, Reset?}, { SHIFTx2 to cancel}
					reset_mxr=TRUE
				endif	
			else
				// reset mixer (special handle for returns and mixbus)
				if reset_mxr  //user hit same pad again. switch knobset
					for i = 0 to 18
						mixer_state[(curr_chan*20) + i] = chan_mx_def_vals[i]
						SendMIDICC chan_midi_chs[curr_chan], chan_mx_ccs[i], chan_mx_def_vals[i]
					endfor
					//Log {RESET MIXER PARAMS TO DEFAULTS AND SENT MIDI}
					reset_mxr=FALSE
					Call @SetupSettingsLayout
				else 
					LabelPad last_pad, {Yes, Reset?}, { SHIFTx2 to cancel}
					reset_mxr=TRUE
				endif
			endif
		elseif last_pad>=8 and last_pad<=12 // MIXER MODES
		  mode=7 //MIXER MODES
			in_mode_select = FALSE
			Call @SetupLayoutChannels
			mixer_mode=last_pad-8
			Call @SetupKnobset7
			Call @SendMidiCCBackToKnobs
		elseif last_pad=14
			layouts_locked = NOT layouts_locked
			Call @SetupSettingsLayout	
		elseif last_pad>=13
			if print_preset and NOT HostRunning
				Call @PrintPreset
			endif
		endif
	elseif NOT in_mode_select
		Call @ModeSetup
	endif
	//LOG {MODE: }, mode
@End

@OnPadUp
  Call @OnPadUp2
@End

@OnPadUp2
  pad_is_down = FALSE
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + last_pad 
	if inst_labels[pad_slot] = 123 //send note pad released
		SendMIDINoteOff chan_midi_chs[curr_chan], inst_state[pad_slot], 127
		Log {send note off }, (NoteName inst_state[pad_slot], YES)
	endif
@End

@ModeSetup
	if in_mode_select
		Call @SetupSettingsLayout
		Call @UpdateCurrentKnobset
		LabelPads {KNTRL : [ SETTINGS ]}
	elseif mode=0  //SCENES MODE
		Call @PadDownScenesMode
	elseif mode=1 // channels mode
		Call @PadDownChannelsMode
	elseif mode=2 // midi learn
		Call @PadDownMidiLearnMode
	elseif mode=3 // unused
		//log {unused}
	elseif mode=4 // unused
		//log {unused}
	elseif mode=5 // INSTRUMENT mode
		Call @PadDownInstrMode
	elseif mode=6 // mgen mode
		Call @PadDownMGMode
	elseif mode=7 // MIXER modes
		Call @PadDownMixerMode
	endif
@End

@PadDownScenesMode
	if last_pad >= 0 and last_pad <= 7 //SCENES MODE
		//Log { SCENE CHANGE REQUESTED }
		scene_change_requested = last_pad
		//qk devices manage own pattern timing. Others LK, Drambo we use instant change in HandleSceneChange
		SendMIDICC 15, 100, scene_change_requested //scn change request cc100, val scn to chg to QK devices only
		songmode=1 //# Lock to selected scene
		edit_scene=last_pad
		locked_to_scene=last_pad
		if NOT HostRunning //# immediate change else newbeat/bar handles
			Call @HandleSceneChange 
		endif
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	elseif mode=0 and last_pad=12
		SendMIDINoteOn 15, 12, 1 //LED FEEDBACK
		SendMIDINoteOn 15, 12, 2, 200 //LED FEEDBACK
		for ch = 0 to 14
			for n = 0 to 127
				SendMIDINoteOff ch, n, 127 // handle sometimes stuck notes from KORDS
			endfor
		endfor
	elseif mode=0 and last_pad=13 //toggle loop song / play song n stop
		loop_song_mode = not loop_song_mode
		Call @SetupLayoutScenes
	elseif mode=0 and last_pad>=14 and last_pad<=15
		Call @HandleTransportRequest
	elseif mode=0 and last_pad=9 // return to song mode
		SendMIDICC 15, cc_rtn_to_song_mode, 127
		return_to_song_mode_requested = TRUE
  	scene_change_requested = current_scene
		if NOT HostRunning
			scene_change_requested = current_scene
			if HostBar = 0
				scene_change_requested = 0
			endif
			Call @HandleSceneChange
		endif
  	songmode = 0
  	ColorPad 0, col_pending
    ColorPad 8, col_pending
		LabelPads {KNTRL: [ LOOPING SONG ] }
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	elseif mode=0 and last_pad=10 //#update all scene durations
		for i = 0 to 7
			SendMIDICC 15, cc_scene_duration+i, scene_durs[i]
		endfor
	elseif mode=0 and last_pad=11
		if scene_copied //handle paste scene
			LabelPads {Copied scene }, copied_scene+1, { contents to scene }, edit_scene+1, { for all QK midi generators}
			SendMIDICC 15, 89, edit_scene+8
			scene_durs[edit_scene] = scene_durs[copied_scene]
		else
			copied_scene=edit_scene
			SendMIDICC 15, 89, copied_scene
		endif
		scene_copied = not scene_copied
	  Call @SetupLayoutScenes
	endif
@End

@PadDownChannelsMode
	if last_pad=15
		Exit
	endif
	edit_chan = last_pad 
	if edit_mode_active
		//# update last channel visited if not one of the quick channels
		Call @SetupKnobset1
		for i = 0 to 15
			LatchPad i, no 
		endfor
		LatchPad last_pad, YES 
	elseif chan_labels[LastPad]>0 and chan_labels[LastPad]<23 //ch16 rsvd KNTRL
		mode=5 //goto INSTRUMENT MODE
		curr_chan = last_pad  
		edit_pad=0
		Call @SetupLayoutChannels
		use_instr_knobset_a = TRUE
		if layouts_locked
			Call @Setupknobset4 //Locked instrument knobs
		else
			Call @Setupknobset2 //setup INSTRUMENT KNOBS
		endif
		LatchPad 0, YES
	endif
	Call @SendMidiCCBackToKnobs
	SendMIDICC 15, 24, last_pad //LED FEEDBACK
	if chan_layouts[last_pad]=5 or chan_layouts[last_pad]=6
		drambo_layout_active = TRUE
	else
	  drambo_layout_active = FALSE
	endif
@End

@PadDownInstrMode
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + last_pad 
	val=127 // for mute solo arm messages if required
	chan = chan_midi_chs[curr_chan]
	re_label_pad_on_press=FALSE
	Call @SetupLayoutChannels
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + last_pad 
	LatchPad last_pad, YES
	SendMIDINoteOn 15, last_pad, 8 //LED FEEDBACK
	lbl=inst_labels[pad_slot]
	if inst_ccs[pad_slot]=121 //MUTE
		chan_mute[curr_chan] = NOT chan_mute[curr_chan]
		inst_colors[pad_slot] = 6
		if not chan_mute[curr_chan]
			val=0
			inst_colors[pad_slot] = 0
		endif
		SendMIDICC chan, chan_mx_ccs[16], val
		mixer_state[(curr_chan*20)+16] = val
		LatchPad last_pad, NO
		re_label_pad_on_press=TRUE
	elseif inst_ccs[pad_slot]=122 //SOLO
		chan_solo[curr_chan] = NOT chan_solo[curr_chan]
		inst_colors[pad_slot] = 4
		if not chan_solo[curr_chan] 
			val=0
			inst_colors[pad_slot] = 0
		endif
		SendMIDICC chan, chan_mx_ccs[17], val
		mixer_state[(curr_chan*20)+17] = val
		LatchPad last_pad, NO
		re_label_pad_on_press=TRUE
	elseif inst_ccs[pad_slot]=123 //ARM
		chan_arm[curr_chan] = NOT chan_arm[curr_chan]
		inst_colors[pad_slot] = 1
		if not chan_arm[curr_chan]
			val=0
			inst_colors[pad_slot] = 0
		endif
		SendMIDICC chan, chan_mx_ccs[18], val
		mixer_state[(curr_chan*20)+18] = val
		LatchPad last_pad, NO
		re_label_pad_on_press=TRUE
	elseif lbl=64 or lbl=65 or lbl=66 //mute solo arm but not std mixer is return or mixbus
		rtnbuscols[64]=[6,4,1]
		if inst_state[pad_slot]=127
			val=0
			inst_colors[pad_slot] = 0
		else
		  val=127
			inst_colors[pad_slot] = rtnbuscols[lbl]
		endif
		inst_state[pad_slot] = val
		SendMIDICC chan, inst_ccs[pad_slot], val
		LatchPad last_pad, NO
		re_label_pad_on_press=TRUE
	elseif lbl=61 or lbl=100 or lbl=101 or lbl=119 or lbl=120 or lbl=124 or lbl=125 or lbl=126 or lbl=127
		SendMIDICC chan, inst_ccs[pad_slot], 127 //buttons for plugins 
		use_instr_knobset_a = NOT use_instr_knobset_a
	elseif lbl=105 //drum comp solo
	  if inst_state[pad_slot]=127
			val=1
		else
		  val=127
		endif
		inst_state[pad_slot] = val
		SendMIDICC chan, inst_ccs[pad_slot], val
	elseif lbl=123 //send note
	  SendMIDINoteOn chan, inst_state[pad_slot], 100
		Log {send note on }, (NoteName inst_state[pad_slot], YES)
	elseif inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc // PGM CHG MSG
		use_instr_knobset_a = TRUE
		curr_pgm = chan_pgm[curr_chan]
		if last_pad = edit_pad //user hit same pad again. send the pgm chg
			if inst_labels[pad_slot]=lbl_num_pgm_inc
				new_pgm = Clip curr_pgm+1, 0, chan_pgm_max[curr_chan] 
			else
				new_pgm = Clip curr_pgm-1, 0, chan_pgm_max[curr_chan]
			endif
			if new_pgm <> chan_pgm[curr_chan]
				chan_pgm[curr_chan] = new_pgm
				SendMIDIBankSelect chan_midi_chs[curr_chan], chan_msb[curr_chan], chan_lsb[curr_chan]
				SendMIDIProgramChange chan_midi_chs[curr_chan], chan_pgm[curr_chan]
				//Log {Sent PGM MSG: CHAN:}, chan_midi_chs[curr_chan]+1, { PGM: }, chan_pgm[curr_chan], { MSB: }, chan_msb[curr_chan], { LSB: }, chan_lsb[curr_chan]
			endif
			use_instr_knobset_a = FALSE
		endif
	elseif inst_labels[pad_slot]=lbl_num_res_mxr //RESET MIXER
		if last_pad = edit_pad //user hit same pad again. switch knobset
			for i = 0 to 18
				mixer_state[(curr_chan*20) + i] = chan_mx_def_vals[i]
				SendMIDICC chan_midi_chs[curr_chan], chan_mx_ccs[i], chan_mx_def_vals[i]
			endfor
			if layouts_locked
				Call @LabelInstrumentKnobsLocked
			else
				Call @LabelInstrumentKnobs
			endif
			Call @SetupLayoutChannels
			//Log {RESET MIXER PARAMS TO DEFAULTS AND SENT MIDI}
		else 
			LabelPad last_pad, {Yes, Reset?}, { SHIFTx2 to cancel}
		endif
	elseif inst_labels[pad_slot]=lbl_num_res_inst //RESET PAGE LAYOUT
		if last_pad = edit_pad //user hit same pad again. switch knobset
			edit_chan=curr_chan
			Call @BuildLayoutPages
			if layouts_locked
				Call @LabelInstrumentKnobsLocked
			else
				Call @LabelInstrumentKnobs
			endif
			Call @SetupLayoutChannels
			page_slot = (64*curr_chan)
			for i = 0 to 63
				SendMIDICC chan, inst_ccs[page_slot+i], inst_state[page_slot+i]
			endfor
		else
			LabelPad last_pad, {Yes, Reset?}, { SHIFTx2 to cancel}
		endif
	endif 
	if last_pad = edit_pad //user hit same pad again. switch knobset
		use_instr_knobset_a = NOT use_instr_knobset_a
	endif
	edit_pad = last_pad 
	if re_label_pad_on_press
		if last_pad = edit_pad //user hit same pad again. switch knobset
			use_instr_knobset_a = use_instr_knobset_a
		endif
		pad_to_label=last_pad 
		Call @LabelInstrPad
	endif
	if layouts_locked
		Call @Setupknobset4 //Locked instrument knobs
	else
		Call @Setupknobset2 //setup INSTRUMENT KNOBS
	endif
@End

@PadDownMGMode
	// Midi Gen plugins kontrol
	if last_pad=12
		SendMIDICC 15, mgen_guis[sel_mgen_dev], 127
	elseif last_pad>=9 and last_pad<=13
		//empty pads
	elseif last_pad>=14 and last_pad<=15
		Call @HandleTransportRequest
	elseif edit_mode_active
		if last_pad = edit_pad //user hit same pad again. switch knobset
			use_mgen_knobset_a = NOT use_mgen_knobset_a
		endif
		edit_pad = last_pad 
		sel_mgen_dev=last_pad
		if use_mgen_knobset_a
			Call @Setupknobset8 //setup a
		else 
			Call @SetupKnobset9 //setup b
		endif
	else
		SendMIDICC MIDIChannel, sel_mgen_dev+91, 127 //toggle old GUI off
		sel_mgen_dev=last_pad
		SendMIDICC MIDIChannel, sel_mgen_dev+91, 127 //toggle new GUI ON
		edit_pad = last_pad
		Call @SetupKnobset10 //use m-kntrl knobs
	endif
	for i = 0 to 15
		LatchPad i, no 
		SendMIDINoteOn 15, i,  mgen_colors[i] //LED FEEDBACK
	endfor
	LatchPad sel_mgen_dev, YES
	SendMIDINoteOn 15, sel_mgen_dev, 8 //LED FEEDBACK
@End

@PadDownMixerMode
	if last_pad=15
		Exit
	else
	  curr_chan=last_pad
		chan = chan_midi_chs[curr_chan]
		layout=chan_layouts[curr_chan]
		if mixer_mode>=0 and mixer_mode<=3 and drambo_layout_active 
			SendMIDICC chan, 124, 127 //goto drambo instrument selected for mixer control
		endif
	endif
	if layout=2 or layout=16 or layout=17 //MixBus, Return or Master
		mode=5 //goto INSTRUMENT MODE  
		edit_pad=0
		edit_chan=curr_chan
		Call @SetupLayoutChannels
		use_instr_knobset_a = TRUE
		if layouts_locked
			Call @Setupknobset4 //Locked instrument knobs
		else
			Call @Setupknobset2 //setup INSTRUMENT KNOBS
		endif
		LatchPad 0, YES
	else
		val=127
		if mixer_mode=4 and mute_solo_arm=0
			chan_mute[curr_chan] = NOT chan_mute[curr_chan]
			if not chan_mute[curr_chan]
				val=0
			endif
			SendMIDICC chan, chan_mx_ccs[16], val
			mixer_state[(curr_chan*20)+16] = val
		elseif mixer_mode=4 and mute_solo_arm=1
			chan_solo[curr_chan] = NOT chan_solo[curr_chan]
			if not chan_solo[curr_chan]
				val=0
			endif
			SendMIDICC chan, chan_mx_ccs[17], val
			mixer_state[(curr_chan*20)+17] = val
		elseif mixer_mode=4 and mute_solo_arm=2
			chan_arm[curr_chan] = NOT chan_arm[curr_chan]
			if not chan_arm[curr_chan]
				val=0
			endif
			SendMIDICC chan, chan_mx_ccs[18], val
			mixer_state[(curr_chan*20)+18] = val
		endif
		Call @SetupKnobset7
		Call @SendMidiCCBackToKnobs
	endif
@End

@PadDownMidiLearnMode
	//Setup midi learn assignments
	Call @LabelMIDILearnPads
	ColorPad last_pad, 1
	last_midi_learn_pad=last_pad
	Call @SetupKnobset3
@End

@HandleTransportRequest
	//# Transport buttons handling
	if last_pad=14 
		SendMIDICC 15,0,127 //STOP
		ColorPad 15, 0
		SendMIDICC 15, 100, current_scene
		SendMIDICC 15, 109+current_scene, 127//go to scene on stop
		if songmode = 0 // in song mode
			SendMIDICC 15, 22, 127 //make sure QK devices are in song mode too
		endif
	elseif last_pad=15
		SendMIDICC 15,5,127 //PLAY
		ColorPad 15, 3
	endif
@End

@HandleSceneChange
	//# Work out which scene is next
	scene_changed = TRUE
  if scene_change_requested > -1
  	current_scene = scene_change_requested
  	if return_to_song_mode_requested
  		songmode = 0
			ColorPad current_scene, col_pending
		else
	  	songmode = 1 //# lock to scene if user requests
  	endif
  	return_to_song_mode_requested = FALSE
		scene_change_requested = -1
  elseif (songmode > 0)
  	current_scene = current_scene
  elseif (current_scene = 7) //# End of song. Loop back to beginning
    current_scene = 0 
		if not loop_song_mode
			SendMIDICC 15, 109, 127 // Pattern change
			SendMIDICC 15, 100, current_scene //goto scene 1
			SendMIDICC 15, 0, 127 // transport stop
		endif
  elseif scene_durs[current_scene + 1] <= 0
  	//# also song end
  	current_scene = 0 //# no duration in next scene return to beginning
		if not loop_song_mode
			SendMIDICC 15, 109, 127 // Pattern change
			SendMIDICC 15, 100, current_scene
			SendMIDICC 15, 0, 127 // transport stop	
		endif
  else
		current_scene = current_scene + 1 //# Going to next
		Log {GOING TO NEXT Scene:}, current_scene+1
  endif
	if send_cc21_for_spa
		SendMIDICC 15, 21, current_scene // Pattern change for StepPolyArpUnit
	endif
	SendMIDICC 15, current_scene+109, 127 // Scene change non QK devices
  scene_beat_count = 0
  Log {----- SCENE CHANGE -----}, {S}, current_scene+1
	if mode=0
		Call @SetupLayoutScenes
	endif
@End

@LogCurrentInfo
	current_scene_duration = scene_durs[current_scene]
	Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1
	LabelPads {[ KNTRL ]    Scene}, current_scene+1, {   Bar }, (Div scene_beat_count, HostBeatsPerMeasure)+1,  {.}, HostBeat+1, {   Beat }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure) 
@End

@SetupSettingsLayout
	// #Label all settings mode pads
	in_mode_select = TRUE
	ShowLayout 2
	LabelPads {KNTRL : [ SETTINGS ]}
	LabelPad 0, {SCENES}
	LabelPad 1, { __MGEN__ }, { KONTROL }
	LabelPad 2, {EDIT}
	LabelPad 3, { ___ALL___ }, {CHANNELS}
	LabelPad 4, { ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {[INSTR]}
	LabelPad 5, { ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {[EQ]}
	LabelPad 6, { ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {[FX1]}
	LabelPad 7, { ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {[FX2]}
	if chan_layouts[curr_chan]=2 //mixbus1-4
		LabelPad 15,{ ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {RESET MBx4}
	elseif chan_layouts[curr_chan]=16 //returns
		LabelPad 15,{ ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {RESET RTNS}
	elseif chan_layouts[curr_chan]=17 //master
		LabelPad 15,{ ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {RESET MSTR}
	else
		LabelPad 15,{ ___CH}, chan_midi_chs[curr_chan]+1, {___ }, {RESET MXR} 
	endif
	LabelPad 8, { __MIXER__ }, {VOL PAN} //channels Vol, Gain, Pan, Mid/Side
	LabelPad 9, { __MIXER__ }, {SENDS} //HPF LPF SEND A SEND B
	LabelPad 10,{ __MIXER__ }, {EQ}
	LabelPad 11,{ __MIXER__ }, {FX}
	LabelPad 12,{ __MIXER__ }, {MUTE SOLO} //mute solo
	settings_cols = [4,3,0,3, 5,5,5,5, 2,2,2,2, 2,0,0,1]
	for i = 0 to 15
		ColorPad i, settings_cols[i]
		LatchPad i, NO
		SendMIDINoteOn 15, i, settings_cols[i] // LED FEEDBACK
	endfor
	LabelPad 13, {LOG PRESET} 
	if layouts_locked
		LabelPad 14, { ___INST___ }, {LAYOUTS 🔒}
	else
	  LabelPad 14, { ___INST___ }, { LAYOUTS }
	endif
	if edit_mode_active
		LabelPad 2, {<= EDIT =>}
			for i = 1 to 3
				ColorPad i, col_mode_edit
				SendMIDINoteOn 15, i, col_mode_edit
		endfor
	endif
@End

@OnKnobChange
	// so midi input can simulate knob chnge even it calls @OnKnobChange2 directly 
	last_knob = LastKnob
	Call @OnKnobChange2 
@End

@OnKnobChange2
	if NOT pad_is_down //prevent knob change when pad is down
		if knob_set = 0 
		  Call @KnobChangeSet0 //# scene settings
	  elseif knob_set = 1
	  	Call @KnobChangeSet1 //# channel setup
	  elseif knob_set = 2
	  	Call @KnobChangeSet2	//# Instrument knobs unlocked
	  elseif knob_set = 3
	  	Call @KnobChangeSet3	//# Midi control usage
	  elseif knob_set = 4
	  	Call @KnobChangeSet4	//# Instrument knobs locked
	  elseif knob_set = 5
	  	Call @KnobChangeSet5	//# unused
	  elseif knob_set = 6
	  	Call @KnobChangeSet6	//# unused
	  elseif knob_set = 7
	  	Call @KnobChangeSet7	//# MIXER KONTROLS
	  elseif knob_set = 8
	  	Call @KnobChangeSet8	//# M-KONTROL setup-a label, color etc
	  elseif knob_set = 9
			if allow_edit_mgen_ccs
		  	Call @KnobChangeSet9	//# M-KONTROL setup-b cc nums
			endif
		elseif knob_set = 10
	  	Call @KnobChangeSet10	//# M-KONTROL usage vals 1-4
		endif
	endif
@End

@UpdateCurrentKnobset
	//# On entering select mode the following need knobsets selected
	if in_mode_select	//# disable knobs in_mode_select
		LabelKnobs { }
		LabelKnob 0, { }
		LabelKnob 1, { }
		LabelKnob 2, { }
		LabelKnob 3, { }
		knob_set = 99 //# dummy number to disable
	else
		if knob_set = 0 
		  Call @SetupKnobset0 //# scene settings
	  elseif knob_set = 1
	  	Call @SetupKnobset1 //# channel setup
	  elseif knob_set = 2
			pad_slot=0
	  	if layouts_locked
				Call @Setupknobset4 //Locked instrument knobs
			else
				Call @Setupknobset2 //setup INSTRUMENT KNOBS
			endif
	  elseif knob_set = 3
	  	Call @SetupKnobset3	//# unused
	  elseif knob_set = 4
	  	Call @SetupKnobset4	//# unused
	  elseif knob_set = 5
	  	Call @SetupKnobset5	//# unused
	  elseif knob_set = 6
	  	Call @SetupKnobset6	//# unused
	  elseif knob_set = 7
	  	Call @SetupKnobset7	//# MIXER MODES
	  elseif knob_set = 8
	  	Call @SetupKnobset8	//# M-KONTROL setup-a
	  elseif knob_set = 9
	  	Call @SetupKnobset9	//# M-KONTROL setup-b
	  elseif knob_set = 10
	  	Call @SetupKnobset10	//# M-KONTROL usage
		endif
	endif
@End

@SetupKnobset0
	//# Scene settings
	knob_set = 0
	LabelPads {KNTRL : [ SCENES ]}
	LabelKnobs {SCENE SETUP}
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	//LabelKnob 2, {Preset }, scene_preset+1
	LabelKnob 2, { }
	LabelKnob 3, {G-Swing }, global_swing
	SetKnobValue 0, TranslateScale edit_scene, 0, 7, 0, 127
	SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
	SetKnobValue 2, TranslateScale scene_preset, 0, 7, 0, 127
	SetKnobValue 3, TranslateScale global_swing, 0, 100, 0, 127 
@End

@KnobChangeSet0
	//# scene settings xs0
	if last_knob = 0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_scene
			edit_scene = val
			SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
		endif
	endif
	if last_knob = 1
		scn_duration = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 32
		scene_durs[edit_scene] = scn_duration
		SendMIDICC 15, cc_scene_duration+edit_scene, scene_durs[edit_scene] 
	endif
	if last_knob = 2
		//Scene Preset selection disabled - too many accidental unwanted changes for minimal benefit
		//val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 7
		//if val <> scene_preset
			//scene_preset = val
			//CopyArray scene_presets[scene_preset*8], scene_durs, 8
			//SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
		//endif
	endif
	if last_knob = 3
		val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 100
		if val <> global_swing
			global_swing = val
			SendMIDICC 15, cc_swing, global_swing
		endif
	endif
	scn_to_label = current_scene
	Call @SetupLayoutScenes
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	//LabelKnob 2, {Preset }, scene_preset+1
	LabelKnob 2, { }
	LabelKnob 3, {G-Swing }, global_swing
@End

@SetupKnobset1
	//# Channels Setup
	knob_set = 1
	LabelKnobs {CHANNEL }, edit_chan+1, { SETUP}
	LabelPads {KNTRL : [ INSTRUMENT CHANNELS ]}
	LabelKnob 0, {Label }, chan_labels[edit_chan]
	LabelKnob 1, {Color }, chan_colors[edit_chan]
	LabelKnob 2, {MidiCH }, chan_midi_chs[edit_chan]+1
	layout = chan_layouts[edit_chan]
	if layout = 0
		LabelKnob 3, {Layout:Free}
	elseif layout = 1
		LabelKnob 3, {Combo}
	elseif layout = 2
		LabelKnob 3, {Bus A-D}
	elseif layout = 3	
		LabelKnob 3, {Ruismkr}
	elseif layout = 4	
		LabelKnob 3, {Drum Comp}
	elseif layout = 5	
		LabelKnob 3, {D'mbo Perc}
	elseif layout = 6	
		LabelKnob 3, {D'mbo Syn}
	elseif layout = 7	
		LabelKnob 3, {Skaka}
	elseif layout = 8	
		LabelKnob 3, {Mersenne}
	elseif layout = 9
		LabelKnob 3, {Larange}
	elseif layout = 10
		LabelKnob 3, {Audiokit D1}
	elseif layout = 11	
		LabelKnob 3, {Kronecker}
	elseif layout = 12
		LabelKnob 3, {Redshrike}
	elseif layout = 13
		LabelKnob 3, {Syn'master}
	elseif layout = 14
		LabelKnob 3, {RuisFM}
	elseif layout = 15
		LabelKnob 3, {Lorentz}
	elseif layout = 16
		LabelKnob 3, {Returns}
	elseif layout = 17
		LabelKnob 3, {Master}
	elseif layout = 18
		LabelKnob 3, {Hillman}
	elseif layout = 19
		LabelKnob 3, {Zeeon}
	elseif layout = 20
		LabelKnob 3, {User3}
	endif
	SetKnobValue 0, TranslateScale chan_labels[edit_chan], 0, 22, 0, 127
	SetKnobValue 1, TranslateScale chan_colors[edit_chan], 0, 6, 0, 127
	SetKnobValue 2, TranslateScale chan_midi_chs[edit_chan], 0, 15, 0, 127
	SetKnobValue 3, TranslateScale chan_layouts[edit_chan], 0, 20, 0, 127 
@End

@KnobChangeSet1
	//# channels Setup - 12MIXBUS, 13RETURNS, 14MASTER, 15KNTRL are fixed
	if last_knob=0 and edit_chan<12
		chan_labels[edit_chan] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 22
		pad_to_label=edit_chan
		chan_pad=edit_chan //settings mode label and pad pos. diff
		Call @LabelChanPad
	endif
	if last_knob=1 
		chan_colors[edit_chan] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 6
		LatchPad edit_chan, NO 
		ColorPad edit_chan, chan_colors[edit_chan]
	endif
	if last_knob=3 and edit_chan<12
		chan_layouts[edit_chan] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 20
		Call @BuildLayoutPages 
		SetKnobValue 0, TranslateScale chan_labels[edit_chan], 0, 32, 0, 127
		SetKnobValue 1, TranslateScale chan_colors[edit_chan], 0, 7, 0, 127
		SetKnobValue 2, TranslateScale chan_midi_chs[edit_chan], 0, 15, 0, 127
	endif
	LabelKnob 0, {Label }, chan_labels[edit_chan]
	LabelKnob 1, {Color }, chan_colors[edit_chan]
	LabelKnob 2, {MidiCH }, chan_midi_chs[edit_chan]+1
@End

@LabelInstrumentKnobs
	LabelKnobs {CH:}, chan_midi_chs[edit_chan]+1, { CC#}, inst_ccs[pad_slot]
	LabelPads {KNTRL : [ INSTRUMENT }, curr_chan+1, { ] }
	if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
		LabelKnob 2, {Pgm }, chan_pgm[curr_chan]
	else
	  LabelKnob 2, {Value }, inst_state[pad_slot]
	endif	
	if use_instr_knobset_a // Label : Color : Value : CC#
		LabelKnob 0, {Lbl# }, inst_labels[pad_slot]
		LabelKnob 1, {Color }, inst_colors[pad_slot]
		LabelKnob 3, {Page }, inst_curr_page[curr_chan]+1
	else // LSB CC# : MSB MIN : Value : MAX
		if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
			LabelKnob 0, {LSB }, chan_lsb[curr_chan] // only one per channel
			LabelKnob 1, {MSB }, chan_msb[curr_chan] // only one per channel
			LabelKnob 3, {MAX }, chan_pgm_max[curr_chan]
		else 
			LabelKnob 0, {CC# }, inst_ccs[pad_slot]
			LabelKnob 1, {MIN }, inst_mins[pad_slot]
			LabelKnob 3, {MAX }, inst_maxs[pad_slot]
		endif
	endif
@End

@SetupKnobset2
	//# INTRUMENT KONTROL MODE use_instr_knobset_a
	knob_set=2
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + edit_pad
	if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
		SetKnobValue 2, TranslateScale chan_pgm[curr_chan], 0, chan_pgm_max[curr_chan], 0, 127
	else
		val = inst_state[pad_slot] //Value knob2
		SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
	endif	
	if use_instr_knobset_a // Label : Color : Value : CC#
		SetKnobValue 0, TranslateScale inst_labels[pad_slot], -1, 127, 0, 127
		SetKnobValue 1, TranslateScale inst_colors[pad_slot], 0, 6, 0, 127
		SetKnobValue 3, TranslateScale inst_curr_page[curr_chan], 0, 3, 0, 127
	else 
		if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
			SetKnobValue 0, TranslateScale chan_lsb[curr_chan], 0, 15, 0, 127
			SetKnobValue 1, TranslateScale chan_msb[curr_chan], 0, 15, 0, 127
			SetKnobValue 3, TranslateScale chan_pgm_max[curr_chan], 0, 127, 0, 127
		else 
			SetKnobValue 0, TranslateScale inst_ccs[pad_slot], 0, 127, 0, 127
			SetKnobValue 1, TranslateScale inst_mins[pad_slot], 0, 127, 0, 127
			SetKnobValue 3, TranslateScale inst_maxs[pad_slot], 0, 127, 0, 127
		endif 
	endif
	Call @LabelInstrumentKnobs
	Call @SendMidiCCBackToKnobs
@End 
@KnobChangeSet2
	//# INSTRUMENT KONTROL MODE
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + edit_pad
	pad_to_label=edit_pad 
	chan_to_label=curr_chan
	if last_knob = 0 // LABEL : LSB / CC#
		if use_instr_knobset_a
			new_label_num = Round TranslateScale (GetKnobValue 0), 0, 127, -1, 127
			if new_label_num <> inst_labels[pad_slot]
				inst_labels[pad_slot] = new_label_num 
				Call @LabelInstrPad
			endif
		else
			if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //PGM CHG
				chan_lsb[curr_chan] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
			else
				inst_ccs[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
				if inst_ccs[pad_slot]<= lower_mx_ccs_max or inst_ccs[pad_slot]>=upper_mx_ccs_min
					inst_labels[pad_slot]=protected_cc_to_label[inst_ccs[pad_slot]] 
					Call @LabelInstrPad //protected cc - has a fixed label
				endif
			endif
		endif
	endif
	if last_knob = 1 // COLOR : (MSB or MIN)
		if use_instr_knobset_a
			inst_colors[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 6
			LatchPad edit_pad, NO 
			ColorPad edit_pad, inst_colors[pad_slot]
		else
			if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //PGM CHG
				chan_msb[curr_chan] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
			else 
				inst_mins[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
				val = inst_state[pad_slot]
				SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
				inst_state[pad_slot] = Clip val, inst_mins[pad_slot], inst_maxs[pad_slot]
			endif	
		endif
	endif
	if last_knob = 2 // VALUE : VALUE
		if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //PGM CHG
			chan_pgm[curr_chan] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, chan_pgm_max[curr_chan]
		else 
			val = Round TranslateScale (GetKnobValue 2), 0, 127, inst_mins[pad_slot], inst_maxs[pad_slot]
			if NOT pad_is_down
				if inst_labels[pad_slot]=63 //Ruismaker drum ch#
					drum_ch = inst_ccs[pad_slot]-22 //# drum ch cc's 22-29
					val = rmkr_instrs[(8*drum_ch) + val] //see array of selectable drum sounds per ch
					//Log {Drum ch: }, drum_ch, { Instrument#: }, inst, { cc#: }, inst_ccs[pad_slot]
				endif
				inst_state[pad_slot] = val
				if not inst_labels[pad_slot]=123 // Send Note not cc - handled in PadDown/Up 
					SendMIDICC chan_midi_chs[curr_chan], inst_ccs[pad_slot], val 
				endif
			endif
			if inst_labels[pad_slot]=lbl_num_drum_ch or inst_labels[pad_slot]=lbl_num_ch_num or inst_labels[pad_slot]=123 
				Call @LabelInstrPad // Label has value in the label so update the label text
			endif
		endif
	endif
	if last_knob = 3 // PAGE : PGMMAX / MAX
		if use_instr_knobset_a	
			page = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 3 // change page
			if (page <> inst_curr_page[curr_chan]) and NOT pad_is_down
				inst_curr_page[curr_chan] = page
				Call @SetupLayoutChannels
			endif
		else
		  if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //PGM CHG MAX
				chan_pgm_max[curr_chan] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
				SetKnobValue 2, TranslateScale chan_pgm[curr_chan], 0, chan_pgm_max[curr_chan], 0, 127
			else
				inst_maxs[pad_slot] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127 //MAX VALUE
				val = inst_state[pad_slot]
				SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
				inst_state[pad_slot] = Clip val, inst_mins[pad_slot], inst_maxs[pad_slot] 
			endif
		endif
	endif
	Call @LabelInstrumentKnobs
@End
@SetupKnobset4
	//# INTRUMENT KONTROL MODE with locked layouts active
	knob_set=4
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + edit_pad
	SetKnobValue 0, TranslateScale inst_mins[pad_slot], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale inst_maxs[pad_slot], 0, 127, 0, 127
	if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
		SetKnobValue 2, TranslateScale chan_pgm[curr_chan], 0, chan_pgm_max[curr_chan], 0, 127
	else
		val = inst_state[pad_slot] //Value knob2
		SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
	endif
	SetKnobValue 3, TranslateScale inst_curr_page[curr_chan], 0, 3, 0, 127
	Call @LabelInstrumentKnobsLocked
	Call @SendMidiCCBackToKnobs
@End 
@KnobChangeSet4
	//# INSTRUMENT KONTROL MODE with locked layouts active
	pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + edit_pad
	pad_to_label=edit_pad 
	chan_to_label=curr_chan
	if last_knob = 0 // MIN
		inst_mins[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
		val = inst_state[pad_slot]
		SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
		inst_state[pad_slot] = Clip val, inst_mins[pad_slot], inst_maxs[pad_slot]
	endif
	if last_knob = 1 // MAX
		inst_maxs[pad_slot] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127 //MAX VALUE
		val = inst_state[pad_slot]
		SetKnobValue 2, TranslateScale val, inst_mins[pad_slot], inst_maxs[pad_slot], 0, 127
		inst_state[pad_slot] = Clip val, inst_mins[pad_slot], inst_maxs[pad_slot]
	endif
	if last_knob=2 // VALUE CC or PGM CHG
		if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //PGM CHG
			chan_pgm[curr_chan] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, chan_pgm_max[curr_chan]
		else 
			val = Round TranslateScale (GetKnobValue 2), 0, 127, inst_mins[pad_slot], inst_maxs[pad_slot]
			if NOT pad_is_down
				if inst_labels[pad_slot]=63 //Ruismaker drum ch#
					drum_ch = inst_ccs[pad_slot]-22 //# drum ch cc's 22-29
					val = rmkr_instrs[(8*drum_ch) + val] //see array of selectable drum sounds per ch
					//Log {Drum ch: }, drum_ch, { Instrument#: }, val, { cc#: }, inst_ccs[pad_slot]
				endif
				if inst_labels[pad_slot]=123
					log {Its a note send pad}
				else
					SendMIDICC chan_midi_chs[curr_chan], inst_ccs[pad_slot], val 
					inst_state[pad_slot] = val
				endif
			endif
			if inst_labels[pad_slot]=lbl_num_drum_ch or inst_labels[pad_slot]=lbl_num_ch_num or inst_labels[pad_slot]=123
				Call @LabelInstrPad // drum ch# has value in label so update
			endif
		endif
	endif
	if last_knob = 3 // PAGE 
		page = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 3 // change page
		if (page <> inst_curr_page[curr_chan]) and NOT pad_is_down
			inst_curr_page[curr_chan] = page
			Call @SetupLayoutChannels
		endif
	endif
	Call @LabelInstrumentKnobsLocked
@End
@LabelInstrumentKnobsLocked
	LabelKnobs {CH:}, chan_midi_chs[edit_chan]+1, { CC#}, inst_ccs[pad_slot]
	LabelPads {KNTRL : [ INSTRUMENT }, curr_chan+1, { ] }
	LabelKnob 0, {MIN }, inst_mins[pad_slot]
	LabelKnob 1, {MAX }, inst_maxs[pad_slot]
	if inst_labels[pad_slot]=lbl_num_pgm_dec or inst_labels[pad_slot]=lbl_num_pgm_inc //pgm chg message type
		LabelKnob 2, {Pgm }, chan_pgm[curr_chan]
	else
	  LabelKnob 2, {Value }, inst_state[pad_slot]
	endif
	LabelKnob 3, {Page }, inst_curr_page[curr_chan]+1
@End

@SetupKnobset7
	//# MIXER KONTROLS
	knob_set = 7
	if mixer_mode=4
		SetKnobValue 0, TranslateScale mute_solo_arm, 0, 2, 0, 127
		SetKnobValue 1, 0
		SetKnobValue 2, 0
		SetKnobValue 3, 0
	else
	for i = 0 to 3
		val = mixer_state[(curr_chan*20) + (mixer_mode*4) + i]
		SetKnobValue i, TranslateScale val, 0, 127, 0, 127	
	endfor
	endif
	Call @LabelMixerModes
@End

@KnobChangeSet7
	//# MIXER KONTROL
	if mixer_mode=4
		mute_solo_arm = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 2
	else
		for i = 0 to 3
			if last_knob = i 
				val = Round TranslateScale (GetKnobValue i), 0, 127, 0, 127
				cc = chan_mx_ccs[(mixer_mode*4) + i]
				midi_chan = chan_midi_chs[curr_chan]
				mixer_state[(curr_chan*20) + mixer_cc_slots[cc]] = val
				SendMIDICC midi_chan, cc, val
				if send_cc_back_to_knobs
					SendMIDICC 15, cc, val //update controller active chan cc
				endif
				LabelKnobs {CH:}, chan_midi_chs[curr_chan]+1, { CC: }, cc
			endif
		endfor
	endif
	Call @LabelMixerModes
@End

@LabelMixerModes
	// MIXER MODES
	if mixer_mode=0
		LabelPads {KNTRL : [ VOL PAN GAIN MID/SIDE ]}
		LabelKnob 0, {VOL }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 0]
		LabelKnob 1, {PAN }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 1]
		LabelKnob 2, {GAIN }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 2]
		LabelKnob 3, {M/S } , mixer_state[(curr_chan*20) + (mixer_mode*4) + 3]
	elseif mixer_mode=1
		mixer_mode=1 
	  LabelPads {KNTRL : [ SENDS ]}
		LabelKnob 0, {SENDA }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 0]
		LabelKnob 1, {SENDB }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 1]
		LabelKnob 2, {SENDC }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 2]
		LabelKnob 3, {SENDD }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 3]
	elseif mixer_mode=2
	  mixer_mode=2 
		LabelPads {KNTRL : [ EQ ] }
		LabelKnob 0, {LO EQ }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 0]
		LabelKnob 1, {HI EQ }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 1]
		LabelKnob 2, {HPF }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 2]
		LabelKnob 3, {LPF }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 3]
	elseif mixer_mode=3
		LabelPads {KNTRL : [ FX ] }
		LabelKnob 0, {D/W1 }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 0]
		LabelKnob 1, {AMT1 }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 1]
		LabelKnob 2, {D/W2 }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 2]
		LabelKnob 3, {AMT2 }, mixer_state[(curr_chan*20) + (mixer_mode*4) + 3]
	elseif mixer_mode=4
		LabelPads {KNTRL : [ MUTE SOLO ARM ]}
		LabelKnobs {CH:}, chan_midi_chs[curr_chan]+1, { CC: }, 121+mute_solo_arm
		if mute_solo_arm=0
			LabelKnob 0, {MUTE}
		elseif mute_solo_arm=1
			LabelKnob 0, {SOLO}
		elseif mute_solo_arm=2
			LabelKnob 0, {ARM}
		endif	
		LabelKnob 1, { }
		LabelKnob 2, { }
		LabelKnob 3, { }
	endif
	for i = 0 to 15 //Color pads in mute solo arm mode
		LatchPad i, no
		SendMIDINoteOn 15, i, chan_colors[i] //LED FEEDBACK
		if mixer_mode=4 and mute_solo_arm = 0
			if chan_mute[i]
				ColorPad i, 6
				SendMIDINoteOn 15, i, 6 //LED FEEDBACK
			else
			  ColorPad i, col_unused
				SendMIDINoteOn 15, i, 0 //LED FEEDBACK
			endif
		elseif mixer_mode=4 and mute_solo_arm = 1
			if chan_solo[i]
				ColorPad i, 4
				SendMIDINoteOn 15, i, 4 //LED FEEDBACK
			else
			  ColorPad i, col_unused
				SendMIDINoteOn 15, i, 0 //LED FEEDBACK
			endif
		elseif mixer_mode=4 and mute_solo_arm = 2
			if chan_arm[i]
				ColorPad i, 1
				SendMIDINoteOn 15, i, 1 //LED FEEDBACK
			else
			  ColorPad i, col_unused
				SendMIDINoteOn 15, i, 0 //LED FEEDBACK
			endif	
		endif	
	endfor
	if mixer_mode <> 4
		LatchPad curr_chan, YES
		SendMIDINoteOn 15, curr_chan, 8
	endif
@End


@SetupKnobset8
	//# MGEN -KONTROL SETUP A - Label, Color, MIDI_CH
	knob_set = 8
	LabelPads {KNTRL : [ MIDI GENERATORS ]}
	LabelKnobs {SETUP PAD }, sel_mgen_dev+1
	LabelKnob 0, {Label }, mgen_labels[sel_mgen_dev]
	LabelKnob 1, {Color }, mgen_colors[sel_mgen_dev]
	LabelKnob 2, {GUI CC }, mgen_guis[sel_mgen_dev]
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale mgen_labels[sel_mgen_dev], 0, 20, 0, 127
	SetKnobValue 1, TranslateScale mgen_colors[sel_mgen_dev], 0, 7, 0, 127
	SetKnobValue 2, TranslateScale mgen_guis[sel_mgen_dev], 0, 127, 0, 127 
	SetKnobValue 3, 0	
@End

@KnobChangeSet8
	//# MGEN -KONTROL SETUP A - Label, Color, MIDI_CH
	if last_knob=0 and sel_mgen_dev<=9
		mgen_labels[sel_mgen_dev] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 20
		pad_to_label=sel_mgen_dev
		mgen_pad=sel_mgen_dev // settings mode labels pad7 diff loc.
		Call @LabelMGENPad
	endif
	if last_knob = 1
		mgen_colors[sel_mgen_dev] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 7
		LatchPad last_pad, NO 
		ColorPad last_pad, mgen_colors[sel_mgen_dev]
	endif
	if allow_edit_mgen_ccs
		if last_knob = 2
			mgen_guis[sel_mgen_dev] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
		endif
	endif
	LabelKnob 0, {Label }, mgen_labels[sel_mgen_dev]
	LabelKnob 1, {Color }, mgen_colors[sel_mgen_dev]
	LabelKnob 2, {GUI CC }, mgen_guis[sel_mgen_dev]
@End

@SetupKnobset9
	//# MGEN -KONTROL SETUP B - CC#s 1-4
	knob_set = 9
	pad_slot=[4 * sel_mgen_dev] //location channel 17
	LabelPads {KNTRL : [ MIDI GENERATORS ]}
	LabelKnobs {SETUP PAD }, sel_mgen_dev+1
	LabelKnob 0, {cc#}, mgen_ccs[pad_slot]
	LabelKnob 1, {cc#}, mgen_ccs[pad_slot+1]
	LabelKnob 2, {cc#}, mgen_ccs[pad_slot+2]
	LabelKnob 3, {cc#}, mgen_ccs[pad_slot+3]
	SetKnobValue 0, TranslateScale mgen_ccs[pad_slot], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale mgen_ccs[pad_slot+1], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale mgen_ccs[pad_slot+2], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale mgen_ccs[pad_slot+3], 0, 127, 0, 127 
@End

@KnobChangeSet9
	//# MGEN-KONTROL SETUP B - CC#'s 1-4 (*** IF allow_edit_mgen_ccs OnKnobChange)
	pad_slot=[4 * sel_mgen_dev] //location channel 17
	if last_knob = 0
		mgen_ccs[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if last_knob = 1
		mgen_ccs[pad_slot+1] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if last_knob = 2
		mgen_ccs[pad_slot+2] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if last_knob = 3
		mgen_ccs[pad_slot+3] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {cc#}, mgen_ccs[pad_slot]
	LabelKnob 1, {cc#}, mgen_ccs[pad_slot+1]
	LabelKnob 2, {cc#}, mgen_ccs[pad_slot+2]
	LabelKnob 3, {cc#}, mgen_ccs[pad_slot+3]
@End

@SetupKnobset10
	//# MGEN-KONTROL USAGE - VAL KNOBS1-4
	knob_set = 10
	pad_slot=[4 * sel_mgen_dev] //location channel 17
	LabelPads {KNTRL : [ MIDI GENERATORS ]}
	LabelKnobs {PAD }, sel_mgen_dev+1
	LabelKnob 0, {cc}, mgen_ccs[pad_slot+0], {:}, mgen_vals[pad_slot]
	LabelKnob 1, {cc}, mgen_ccs[pad_slot+1], {:}, mgen_vals[pad_slot+1]
	LabelKnob 2, {cc}, mgen_ccs[pad_slot+2], {:}, mgen_vals[pad_slot+2]
	LabelKnob 3, {cc}, mgen_ccs[pad_slot+3], {:}, mgen_vals[pad_slot+3]
	SetKnobValue 0, TranslateScale mgen_vals[pad_slot], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale mgen_vals[pad_slot+1], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale mgen_vals[pad_slot+2], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale mgen_vals[pad_slot+3], 0, 127, 0, 127 
@End

@KnobChangeSet10
	//# MGEN-KONTROL USAGE - Val knobs 1-4
	pad_slot=[4 * sel_mgen_dev] //location channel 17
	if last_knob = 0
		mgen_vals[pad_slot] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if last_knob = 1
		mgen_vals[pad_slot+1] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if last_knob = 2
		mgen_vals[pad_slot+2] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if last_knob = 3
		mgen_vals[pad_slot+3] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {CC}, mgen_ccs[pad_slot+0], {:}, mgen_vals[pad_slot]
	LabelKnob 1, {CC}, mgen_ccs[pad_slot+1], {:}, mgen_vals[pad_slot+1]
	LabelKnob 2, {CC}, mgen_ccs[pad_slot+2], {:}, mgen_vals[pad_slot+2]
	LabelKnob 3, {CC}, mgen_ccs[pad_slot+3], {:}, mgen_vals[pad_slot+3]
	SendMIDICC 15, mgen_ccs[pad_slot+last_knob], mgen_vals[pad_slot+last_knob]
	//Log {sending Mgen CH15 CC#},mgen_ccs[pad_slot+last_knob], { - }, mgen_vals[pad_slot+last_knob]
@End

@SetupLayoutScenes
	//setup layout for Scenes mode
	ShowLayout 2
	FillArray pad_cols, 0, 16
	if mode=0 or mode=1
		//# Setup scene pads
		for i = 0 to 7
			if scene_durs[i] > 0
				pad_cols[i]=2
				scn_to_label = i
				Call @LabelScenePad
			else
				LabelPad i, { }
				pad_cols[i]=0
			endif
			LatchPad i, NO
	  endfor
		pad_cols[current_scene]=3
		if scene_change_requested>-1
			pad_cols[scene_change_requested]=6
		endif
		for i = 8 to 15
			LatchPad i, NO
	    pad_cols[i]=0
			LabelPad i, { }
		endfor
	elseif mode=2
		for i = 0 to 15
			pad_cols[i]=2
		endfor
	endif
	if (songmode = 0)
		LabelPad 8, {SONG MODE ACTIVE}
		LabelPad 9, {-}
		pad_cols[8]=3
	elseif (songmode = 1)
		LabelPad 8, {LOCKED TO S}, locked_to_scene+1
		LabelPad 9, {TO SONGMODE}
		pad_cols[8]=[4]
		pad_cols[9]=3
		pad_cols[locked_to_scene]=4
	endif
	LabelPad 10, {UPDATE ALL SCENES}
	pad_cols[10]=6
	if scene_copied
		pad_cols[11]=3
		LabelPad 11, {PASTE TO SCENE }, edit_scene+1
		LabelPads {Use Scene knob to select scene then hit paste to copy contents across all QK midi generators}
	else
		pad_cols[11]=6
		LabelPad 11, {COPY SCENE }, edit_scene+1
	endif
	LabelPad 12, {ALL KORDS NOTES OFF}
	pad_cols[12]=6
	if loop_song_mode
		LabelPad 13, {LOOP SONG MODE}
		pad_cols[13]=8
	else
	  LabelPad 13, {LOOP SONG OFF}
		pad_cols[13]=0 
	endif
	pad_cols[14]=1
	pad_cols[15]=3
	LabelPad 14, {[STOP]}
	LabelPad 15, {PLAY>}
	for i=0 to 15
		SendMIDINoteOn 15, i, pad_cols[i]
		ColorPad i, pad_cols[i]
	endfor
@End

@LabelScenePad
	//# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, {S}, scn_to_label+1, { [}, sc_dur, { bars]}
@End


@PrintPreset
	Log {Mode: }, mode, { Edit Chan: }, edit_chan+1
	if mode=5 //instrument pages
		l=[]
		o=[]
		c=[]
		i=[]
		x=[]
		v=[]
		pg=inst_curr_page[edit_chan]
		pad_slot = (64*edit_chan) + (16*pg)
		CopyArray inst_labels[pad_slot], l, 16
		CopyArray inst_colors[pad_slot], o, 16
		CopyArray inst_ccs[pad_slot], c, 16
		CopyArray inst_mins[pad_slot], n, 16
		CopyArray inst_maxs[pad_slot], x, 16
		for i = 0 to 15
			v[i] = inst_state[pad_slot+i]
		endfor
		Log {********** END PRESET **********}
		Log {def_maxs[16*}, pg, {]   = [},x[0],{,},x[1],{,},x[2],{,},x[3],{,},x[4],{,},x[5],{,},x[6],{,},x[7],{,},x[8],{,},x[9],{,},x[10],{,},x[11],{,},x[12],{,},x[13],{,},x[14],{,},x[15],{]}
		Log {def_mins[16*}, pg, {]   = [},n[0],{,},n[1],{,},n[2],{,},n[3],{,},n[4],{,},n[5],{,},n[6],{,},n[7],{,},n[8],{,},n[9],{,},n[10],{,},n[11],{,},n[12],{,},n[13],{,},n[14],{,},n[15],{]}
		Log {def_ccs[16*}, pg, {]    = [},c[0],{,},c[1],{,},c[2],{,},c[3],{,},c[4],{,},c[5],{,},c[6],{,},c[7],{,},c[8],{,},c[9],{,},c[10],{,},c[11],{,},c[12],{,},c[13],{,},c[14],{,},c[15],{]}
		Log {def_vals[16*}, pg, {]   = [},v[0],{,},v[1],{,},v[2],{,},v[3],{,},v[4],{,},v[5],{,},v[6],{,},v[7],{,},v[8],{,},v[9],{,},v[10],{,},v[11],{,},v[12],{,},v[13],{,},v[14],{,},v[15],{]} 
		Log {def_colors[16*}, pg, {] = [},o[0],{,},o[1],{,},o[2],{,},o[3],{,},o[4],{,},o[5],{,},o[6],{,},o[7],{,},o[8],{,},o[9],{,},o[10],{,},o[11],{,},o[12],{,},o[13],{,},o[14],{,},o[15],{]}
		Log {def_labels[16*}, pg, {] = [},l[0],{,},l[1],{,},l[2],{,},l[3],{,},l[4],{,},l[5],{,},l[6],{,},l[7],{,},l[8],{,},l[9],{,},l[10],{,},l[11],{,},l[12],{,},l[13],{,},l[14],{,},l[15],{]}
		Log {LabelKnob 3, "PRESET NAME"}
		Log {********* START PRESET *********}
	elseif mode=6 or mode=1 
		l=[]
		o=[]
		m=[]
		t=[]
		c=[]
		a=[]
		if mode=6
			CopyArray mgen_labels, l, 16 
			CopyArray mgen_colors, o, 16
		else
		  CopyArray chan_labels, l, 16 
			CopyArray chan_colors, o, 16 
		endif
		CopyArray chan_midi_chs, m, 16 
		CopyArray mgen_guis, t, 16
		CopyArray mgen_ccs, c, 64
		CopyArray chan_layouts, a, 16
		Log {********** END PRESET **********}
		if mode=6 //midi gen instances control page
		Log {mgen_guis = [},t[0],{,},t[1],{,},t[2],{,},t[3],{,},t[4],{,},t[5],{,},t[6],{,},t[7],{,},t[8],{,},t[9],{,},t[10],{,},t[11],{,},t[12],{,},t[13],{,},t[14],{,},t[15],{]}
		Log {mgen_colors =  [},o[0],{,},o[1],{,},o[2],{,},o[3],{,},o[4],{,},o[5],{,},o[6],{,},o[7],{,},o[8],{,},o[9],{,},o[10],{,},o[11],{,},o[12],{,},o[13],{,},o[14],{,},o[15],{]}
		Log {mgen_labels =  [},l[0],{,},l[1],{,},l[2],{,},l[3],{,},l[4],{,},l[5],{,},l[6],{,},l[7],{,},l[8],{,},l[9],{,},l[10],{,},l[11],{,},l[12],{,},l[13],{,},l[14],{,},l[15],{]}
		endif
		if mode=1
		log {chan_layouts =  [},a[0],{,},a[1],{,},a[2],{,},a[3],{,},a[4],{,},a[5],{,},a[6],{,},a[7],{,},a[8],{,},a[9],{,},a[10],{,},a[11],{,},a[12],{,},a[13],{,},a[14],{,},a[15],{]}
		Log {chan_midi_chs= [},m[0],{,},m[1],{,},m[2],{,},m[3],{,},m[4],{,},m[5],{,},m[6],{,},m[7],{,},m[8],{,},m[9],{,},m[10],{,},m[11],{,},m[12],{,},m[13],{,},m[14],{,},m[15],{]}
		Log {chan_colors =  [},o[0],{,},o[1],{,},o[2],{,},o[3],{,},o[4],{,},o[5],{,},o[6],{,},o[7],{,},o[8],{,},o[9],{,},o[10],{,},o[11],{,},o[12],{,},o[13],{,},o[14],{,},o[15],{]}
		Log {chan_labels =  [},l[0],{,},l[1],{,},l[2],{,},l[3],{,},l[4],{,},l[5],{,},l[6],{,},l[7],{,},l[8],{,},l[9],{,},l[10],{,},l[11],{,},l[12],{,},l[13],{,},l[14],{,},l[15],{]}
		endif
		Log {********* START PRESET *********}
		Log {Printing preset for mode: }, mode
	elseif mode=2
		CopyArray midi_learn_assign_ccs[16*midi_learn_page], c, 16
		CopyArray midi_learn_assign_chs[16*midi_learn_page], h, 16
	  Log {midi_learn_assign_ccs[16*}, midi_learn_page, {] = [},c[0],{,},c[1],{,},c[2],{,},c[3],{,},c[4],{,},c[5],{,},c[6],{,},c[7],{,},c[8],{,},c[9],{,},c[10],{,},c[11],{,},c[12],{,},c[13],{,},c[14],{,},c[15],{]}
		Log {midi_learn_assign_chs[16*}, midi_learn_page, {] = [},h[0],{,},h[1],{,},h[2],{,},h[3],{,},h[4],{,},h[5],{,},h[6],{,},h[7],{,},h[8],{,},h[9],{,},h[10],{,},h[11],{,},h[12],{,},h[13],{,},h[14],{,},h[15],{]}
	endif
@End

@BuildLayoutPages
	//Setup a default layout page
	drambo_layout_active=FALSE //default. only for layouts 5 & 6 at present
	for i = 0 to 3 //wiping layout so we only need to add back in what has changed
		def_labels[16*i] = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
		def_colors[16*i] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_vals[16*i]   = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		for p = 0 to 15
			def_ccs[(16*i)+p] = 30 + (16*i) + p
		endfor
		def_mins[16*i]   = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_maxs[16*i]   = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	endfor
	
	if chan_layouts[edit_chan]=0 
		LabelKnob 3, {Layout:Free}
		Call @CreateMixerPage4
	elseif chan_layouts[edit_chan]=1 
		LabelKnob 3, {Combo}
		def_labels[16*0] = [123,85,85,85,85,85,85,85,  35,46,47,49,48,57,58,0]
		def_colors[16*0] = [4,4,4,4,4,4,4,4, 4,3,3,3,3,0,0,4]
		def_vals[16*0]   = [0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,90]
		def_ccs[8] = 1
		def_labels[16*1] = [19,20,21,76,28,29,30,31,45,43,44,45,43,44,39,0]
		def_colors[16*1] = [4,4,4,4,3,3,3,3,5,5,5,6,6,6,4,4]
		def_vals[16*1]   = [90,90,90,90,0,20,20,10,0,0,0,0,0,0,0,100]
		def_labels[16*2] = [24,25,26,32,27,27,-1,-1,24,25,26,32,28,29,30,31]
		def_colors[16*2] = [3,3,5,6,2,2,0,0,3,3,5,6,4,4,4,4]
		def_vals[16*2]   = [0,0,0,65,0,40,40,10,0,0,0,64,0,0,0,0]
		Call @CreateMixerPage4
	elseif chan_layouts[edit_chan]=2
		LabelKnob 3, {Bus A-D} //MIX BUSSES ABCD
		mixbuseq_gui=[124,125,126,127]
		mixbusfx=[117,118,119,120]
		for i = 0 to 3
			for p = 0 to 15
				def_ccs[(16*i)+p] = 30 + (16*i) + p
			endfor
			clr=i+1 
			def_labels[16*i] = [0,1,3,125,     4,5,61,94,   85,85,10,11, 61,64,65,66]
			def_colors[16*i] = [clr,clr,clr,0, clr,clr,5,5,   clr,clr,3,3,     2,0,0,0]
			def_vals[16*i]   = [90,64,64,0,    0,0,0,64, 0,0,20,127,  0,0,0,0]
			def_ccs[(16*i)+3] = mixbuseq_gui[i]
			def_ccs[(16*i)+8] = mixbusfx[i]
		endfor	
	elseif chan_layouts[edit_chan]=3
		LabelKnob 3, {Ruismkr}
		def_labels[16*0] = [62,-1,53,51,-1,124,47,0,22,29,42,27,48,46,2,0]
		def_colors[16*0] = [0,0,4,4,0,0,4,4,6,6,6,6,6,6,6,6]
		def_vals[16*0]   = [0,0,0,0,64,0,0,87,64,40,64,0,0,0,64,64]
		def_ccs[16*0]    = [110,31,102,106,34,124,105,103,14,15,16,21,19,20,18,17]
		def_maxs[16*0]   = [7,7,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
		def_labels[16*1] = [63,63,63,63,63,63,63,63,29,29,29,29,29,29,29,29]
		def_colors[16*1] = [1,1,2,2,3,3,4,4,1,1,2,2,3,3,4,4]
		def_vals[16*1]   = [0,0,0,0,0,0,0,0,64,64,66,64,64,64,64,64]
		def_ccs[16*1]    = [22,23,24,25,26,27,28,29,31,39,47,55,63,72,80,88]
		def_maxs[16*1]   = [7,7,7,7,7,7,7,7,127,127,127,127,127,127,127,127]
		def_labels[16*2] = [0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22]
		def_colors[16*2] = [1,1,2,2,3,3,4,4,1,1,2,2,3,3,4,4]
		def_vals[16*2]   = [64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]
		def_ccs[16*2]    = [33,41,49,57,66,74,82,90,30,38,46,54,62,71,79,87]
		def_maxs[16*2]   = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
		Call @CreateMixerPage4
	elseif chan_layouts[edit_chan]=4
		LabelKnob 3, {Drum Comp}
		for i = 0 to 3 
			def_labels[16*i] =  [0,22,29,104,81,79,24,105, 0,22,29,104,81,79,24,105]
			def_vals[16*i]   = [64,64,64,64,64,64,127,0, 64,64,64,64,64,64,127,0]
			def_mins[16*i]   = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
			def_maxs[16*i]   = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
		endfor
		def_colors[16*0] =  [1,1,1,1,1,1,1,0, 2,2,2,2,2,2,2,0]
		def_colors[16*1] =  [2,2,2,2,2,2,2,0, 4,4,4,4,4,4,4,0]
		def_colors[16*2] =  [3,3,3,3,3,3,3,0, 3,3,3,3,3,3,3,0] 
		def_colors[16*3] =  [2,2,2,2,2,2,2,0, 2,2,2,2,2,2,2,0]
	elseif chan_layouts[edit_chan]=5
		LabelKnob 3, {D'mbo Perc} //Drambo layout
		drambo_layout_active=TRUE
		def_labels[16*0] = [0,2,1,71,72,73,10,11, 88,49,53,46,51,34,47,52]
		def_colors[16*0] = [2,2,2,3,3,3,4,4, 1,2,2,3,3,3,4,4]
		def_vals[16*0]   = [127,64,64,64,64,64,0,127,  0,0,64,0,64,32,0,64]
		def_ccs[16*0]    = [7,8,6,14,9,15,16,17,117,118,40,119,42,43,120,45]
		def_labels[16*1] = [64,64,64,64,64,64,64,64,106,106,106,106,106,106,106,106]
		def_colors[16*1] = [0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4]
		def_vals[16*1]   = [0,0,0,0,0,0,0,0,127,127,127,127,127,127,127,127]
		def_labels[16*2] = [85,85,85,85,85,85,85,85,123,123,123,123,123,123,123,123]
		def_colors[16*2] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] 
		def_vals[16*2]   = [0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55] 
		def_labels[16*3] = [85,85,85,85,85,85,85,85,35,36,12,14,-1,-1,-1,-1]
		def_colors[16*3] = [0,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs[(16*3)+8] = [1,2,117,119] //modwheel , breath, fx1dw, fx2dw
	elseif chan_layouts[edit_chan]=6 //Drambo layout
		LabelKnob 3, {D'mbo Syn}
		drambo_layout_active=TRUE
		def_labels[16*0] = [0,2,1,71,72,73,10,11, 88,49,53,46,51,34,47,52]
		def_colors[16*0] = [2,2,2,3,3,3,4,4, 1,2,2,3,3,3,4,4]
		def_vals[16*0]   = [127,64,64,64,64,64,0,127,  0,0,64,0,64,32,0,64]
		def_ccs[16*0]    = [7,8,6,14,9,15,16,17,117,118,40,119,42,43,120,45]
		def_labels[16*1] = [106,106,106,106,24,25,44,32, 43,44,98,40, 28,29,30,31]
		def_colors[16*1] = [4,4,4,4,3,3,3,3, 4,4,4,4,2,2,2,2]
		def_vals[16*1]   = [127,127,127,127,127,0,127,64, 90,127,64,64, 10,50,100,50]
		def_labels[16*2] = [22,89,69,79,22,89,77,79, 22,89,87,54,22,89,77,79]
		def_colors[16*2] = [4,4,4,4,3,3,3,3, 5,5,5,5,2,2,2,2]
		def_vals[16*2]   = [64,64,0,0,64,64,0,0,64,64,0,0,64,64,0,0]
		def_labels[16*3] = [85,85,85,85,85,85,85,85, 35,36,12,14,64,64,64,64]
		def_colors[16*3] = [0,0,0,0,0,0,0,0, 4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0]
		def_ccs[(16*3)+8] = [1,2,117,119] //modwheel , breath, fx1dw, fx2dw
	elseif chan_layouts[edit_chan]=7
		LabelKnob 3, {Skaka}
		def_vals[16*0]   = [64,127,0,0, 64,127,0,0, 64,127,0,0, 64,127,0,0]
		def_vals[16*1]   = [64,127,0,0, 64,127,0,0, 64,127,0,0, 64,127,0,0]
		def_vals[16*2]   = [64,127,0,0, 64,127,0,0, 64,127,0,0, 64,127,0,0]
		def_labels[16*0] = [22,34,74,75, 22,34,74,75, 22,34,74,75, 22,34,74,75]
		def_labels[16*1] = [22,34,74,75, 22,34,74,75, 22,34,74,75, 22,34,74,75]
		def_labels[16*2] = [22,34,74,75, 22,34,74,75, 22,34,74,75, 22,34,74,75]
		def_colors[16*0] = [1,1,1,1, 2,2,2,2, 3,3,3,3, 4,4,4,4]
		def_colors[16*1] = [2,2,2,2, 3,3,3,3, 4,4,4,4, 6,6,6,6]
		def_colors[16*2] = [3,3,3,3, 4,4,4,4, 6,6,6,6, 2,2,2,2]
		def_labels[16*3] = [29,18,124,125,126,52,11,0, 12,13,14,15,64,65,66,59]
		def_colors[16*3] = [6,6,0,0,0,4,5,5,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [45,64,0,0,0,64,64,80, 0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,8,124,125,126,11,12,13,117,118,119,120,121,122,123,93]
	elseif chan_layouts[edit_chan]=8
		LabelKnob 3, {Mersenne}
		def_colors[16*0] =  [6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6]
		def_colors[16*1] =  [5,5,5,5,5,5,5,5, 5,5,5,5,5,5,5,5]
		def_colors[16*2] =  [4,4,4,4,4,4,4,4, 6,5,4,1,1,1,1,1]
		def_labels[16*0] =  [22,17,32,44,43,78,44,79,  78,28,29,79,28,29,0,27]
		def_labels[16*1] =  [22,17,32,44,43,78,44,79,  78,28,29,79,28,29,0,27]
		def_labels[16*2] =  [26,24,25,29,80,28,29,21, 81,81,81,22,51,27,0,29]
		def_vals[16*0]   =  [64,64,64,0,64,30,0,30,  64,0,64,30,0,64,100,0]
		def_vals[16*1]   =  [64,64,64,0,64,30,0,30,  64,0,64,30,0,64,100,0]
		def_vals[16*2]   =  [0,127,0,64,0,0,30,0, 0,0,0,64,64,0,100,90]
		def_labels[16*3] = [49,68,46,51,24,25,47,86,35,85,85,85,-1,124,57,58]
		def_colors[16*3] = [1,1,2,2,1,1,2,2,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,30,0,64,50,64,0,64,0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,2,3,4,5,124,92,93]
	elseif chan_layouts[edit_chan]=9
		LabelKnob 3, {Lagrange}
		def_labels[16*0] = [82,79,32,44,32,44,28,29,  82,79,32,44,32,44,28,29]
		def_colors[16*0] = [6,6,6,6,4,4,4,4,  5,5,5,5,4,4,4,4]			
		def_vals[16*0]   = [0,64,64,64,64,64,0,127,  0,64,64,64,64,64,0,127]
		def_labels[16*1] = [82,79,32,28,29,19,20,21,  28,29,28,29,46,86,86,51]
		def_colors[16*1] = [3,3,3,4,4,6,5,3,  1,1,1,1,2,2,2,2]			
		def_vals[16*1]   = [0,64,64,0,127,90,90,90,  0,127,0,127,0,10,40,64]
		def_labels[16*2] = [26,24,32,28,29,30,31,25,  26,24,32,28,29,30,31,25]			
		def_colors[16*2] = [6,6,6,6,6,6,6,6,  5,5,5,5,5,5,5,5]			
		def_vals[16*2]   = [0,127,64,0,127,0,30,0,  0,127,64,0,127,0,30,0]
		def_labels[16*3] = [28,29,30,31,43,45,43,45,35,85,85,85,90,124,57,58]
		def_colors[16*3] = [4,4,4,4,2,2,2,2,4,4,4,4,4,0,0,0]
		def_vals[16*3]   = [0,127,127,10,64,0,64,0,0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,86,87,88,12,87,124,92,93]
	elseif chan_layouts[edit_chan]=10
		LabelKnob 3, {AudioKit D1}
		def_labels[16*0] = [28,29,30,31,89,17,2,19, 28,29,30,31,89,17,2,20]			
		def_colors[16*0] = [6,6,6,6,6,6,6,6, 5,5,5,5,5,5,5,5]			
		def_vals[16*0]   = [0,20,64,20,64,64,64,90, 0,20,64,20,64,64,64,90]
		def_labels[16*1] = [19,20,18,91,24,25,24,25,  43,44,-1,43,44,-1,43,44]			
		def_colors[16*1] = [6,5,4,4,3,3,3,3, 2,2,0,2,2,0,2,2]			
		def_vals[16*1]   = [90,90,64,90,20,20,20,20,  64,0,-1,64,0,-1,64,0]
		def_ccs[16*1]    = [37,45,48,49,50,51,52,53,54,55,56,57,58,59,60,61]
		def_labels[16*2] = [2,68,38,68,-1,48,48,39,  26,6,47,50,51,86,51,46]			
		def_colors[16*2] = [4,4,4,4,0,1,1,0,  1,1,1,2,2,1,1,1]			
		def_vals[16*2]   = [64,0,64,0,-1,0,0,0,  90,30,20,0,0,30,30,0]
		def_labels[16*3] = [9,68,51,49,9,68,51,15,  35,125,0,6,7,124,57,58]			
		def_colors[16*3] = [1,1,1,1,2,2,2,2,  4,0,0,0,0,0,0,0]			
		def_vals[16*3]   = [0,64,0,0,0,64,0,0,  0,-1,90,0,127,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,86,125,7,12,13,124,92,93]
	elseif chan_layouts[edit_chan]=11
		LabelKnob 3, {Kronecker}	
		def_labels[16*0] = [44,68,32,54,70,0,44,21,  32,44,24,28,29,30,31,19]			
		def_colors[16*0] = [6,6,6,6,3,3,3,4,  3,3,3,3,4,4,4,4,6]			
		def_vals[16*0]   = [0,64,64,40,0,90,0,0, 0,64,127,0,0,64,0,64,90]
		def_labels[16*1] = [44,68,32,54,70,0,44,21,  32,44,24,28,29,30,31,20]			
		def_colors[16*1] = [5,5,5,5,3,3,3,4,  3,3,3,4,4,4,4,5]			
		def_vals[16*1]   = [0,64,64,40,0,90,0,0, 0,64,127,0,0,64,0,64,90]
		def_labels[16*2] = [44,22,32,44,51,32,18,10,  70,67,32,44,28,29,43,45]			
		def_colors[16*2] = [1,1,1,2,2,2,1,1,  2,2,2,3,3,3,3,3]			
		def_vals[16*2]   = [0,64,64,0,64,64,100,90, 0,64,64,0,0,64,64,64]
		def_labels[16*3] = [46,86,86,51,7,6,18,24,  35,85,85,85,-1,124,57,58]			
		def_colors[16*3] = [3,3,3,3,3,3,3,3, 4,4,4,4,0,0,0,0]			
		def_vals[16*3]   = [0,20,40,64,30,0,64,64, 0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,2,3,4,5,124,92,93]
	elseif chan_layouts[edit_chan]=12
		LabelKnob 3, {Redshrike}
		def_labels[16*0] = [44,16,32,68,9,17,19,76,  32,28,29,44,26,28,29,21]			
		def_colors[16*0] = [6,6,6,6,6,6,6,6,  3,3,3,3,4,4,4,4]			
		def_vals[16*0]   = [0,0,64,0,30,0,90,0,  64,0,20,0,0,0,127,0]
		def_labels[16*1] = [81,81,7,22,28,29,43,51,  24,32,28,29,30,31,25,27]			
		def_colors[16*1] = [1,1,1,1,1,1,1,1,  3,3,3,3,3,3,3,3]			
		def_vals[16*1]   = [0,0,127,64,0,20,64,64,  127,64,0,20,0,64,0,0]
		def_labels[16*2] = [46,86,86,51,7,6,18,24,  49,68,53,96,47,86,7,6]			
		def_colors[16*2] = [1,1,1,1,1,1,1,1,  2,2,2,2,4,4,4,4]			
		def_vals[16*2]   = [0,20,50,64,0,30,0, 64,  0,64,30,0,0,64,64,0]
		def_labels[16*3] = [28,29,30,31,0,23,39,1,35,85,85,85,-1,124,57,58]
		def_colors[16*3] = [4,4,4,4,4,2,2,2,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,64,127,0,90,64,0,64,0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,2,3,4,5,124,92,93]
	elseif chan_layouts[edit_chan]=13
		LabelKnob 3, {Syn'master}
		def_labels[16*0] = [19,2,82,87,42,89,17,76,   20,2,82,87,42,89,17,76]
		def_maxs[16*0]   = [127,127,12,127,127,127,127,127, 127,127,12,127,127,127,127,127]
		def_colors[16*0] = [6,6,6,6,6,6,6,6,  5,5,5,5,5,5,5,5]			
		def_vals[16*0]   = [127,64,0,64,64,0,0,0,  127,64,0,64,64,0,0,0]
		def_labels[16*1] = [28,29,30,31,28,29,30,31,44,44,44,124,39,83,84,0]
		def_colors[16*1] = [6,6,6,6,5,5,5,5,2,2,2,0,0,0,0,4]
		def_vals[16*1]   = [0,48,127,33,0,45,127,34,127,127,127,0,0,91,64,90]
		def_ccs[16*1]    = [46,47,48,49,50,51,52,53,54,55,56,124,58,59,60,61]
		def_labels[16*2] = [24,25,27,40,28,29,30,31,24,25,27,40,28,29,30,31]
		def_colors[16*2] = [3,3,3,0,4,4,4,4,3,3,3,0,4,4,4,4]
		def_vals[16*2]   = [0,0,0,127,0,40,127,10,30,0,0,127,0,40,127,10]
		def_labels[16*3] = [48,49,46,51,77,47,86,52,35,85,85,85,-1,125,57,58]
		def_colors[16*3] = [1,1,2,2,2,1,1,1,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,25,0,20,64,0,64,20,0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,2,3,4,5,125,92,93]
	elseif chan_layouts[edit_chan]=14
		LabelKnob 3, {RuisFM}
		def_labels[16*0] = [16,26,62,10,118,124,47,1,22,41,40,28,29,48,2,0]
		def_colors[16*0] = [4,4,0,5,5,0,5,5,6,6,6,6,6,6,6,6]
		def_vals[16*0]   = [0,0,1,0,0,64,0,100,64,64,64,64,64,0,64,100]
		def_ccs[16*0]    = [14,16,110,25,24,124,105,103,15,17,18,20,19,21,22,23]
		def_maxs[16*0]   = [5,7,5,127,127,127,127,127,127,127,127,127,127,127,127,127]
		def_labels[16*1] = [22,40,28,29,22,40,28,29,22,40,28,29,22,40,28,29]
		def_colors[16*1] = [1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4]
		def_vals[16*1]   = [64,64,64,64,64,64,61,64,64,64,64,64,64,64,64,64]
		def_ccs[16*1]    = [31,34,36,35,43,46,48,47,55,58,60,59,68,71,73,72]
		def_labels[16*2] = [22,28,29,0,22,28,29,0,0,0,0,0,0,0,-1,124]
		def_colors[16*2] = [5,5,5,5,6,6,6,6,1,2,3,4,5,6,0,0]
		def_vals[16*2]   = [64,64,64,100,64,64,64,100,100,100,100,100,100,100,0,64]
		def_ccs[16*2]    = [80,85,84,88,92,97,96,100,39,51,63,76,88,100,52,124]
	elseif chan_layouts[edit_chan]=15
		LabelKnob 3, {Lorentz}
		def_labels[16*0] = [28,29,30,31,28,29,30,31,  19,17,20,74,76,22,21,7]			
		def_colors[16*0] = [4,4,4,4,3,3,3,3,  6,6,5,5,3,3,4,4]			
		def_vals[16*0]   = [0,0,127,20,0,0,127,20,  127,0,0,0,0,0,127]
		def_labels[16*1] = [10,24,32,25,27,-1,43,46, 114,22,51,40,-1,-1,0,70]
		def_colors[16*1] = [4,3,3,3,3,0,2,2,1,1,1,1,0,0,0,0]
		def_vals[16*1]   = [0,127,0,0,0,-1,90,0,0,64,100,0,-1,-1,90,20]
		def_labels[16*2] = [46,86,86,51,11,10,18,24,49,68,53,96,-1,-1,-1,-1]
		def_colors[16*2] = [1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,0]
		def_vals[16*2]   = [0,0,20,40,64,20,64,64,0,64,30,10,-1,-1,0,0]
		def_ccs[16*2]    = [62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77]
		def_labels[16*3] = [-1,-1,-1,-1,-1,23,39,1,35,85,85,85,-1,124,57,58]
		def_colors[16*3] = [0,0,0,0,0,2,2,2,4,4,4,4,0,0,0,0]
		def_vals[16*3]   = [0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,2,3,4,5,124,92,93]
	elseif chan_layouts[edit_chan]=16
		LabelKnob 3, {Returns}
		mixbusfx_gui=[124,125,126,127]
		for i = 0 to 3
			for p = 0 to 15
				def_ccs[(16*i)+p] = 30 + (16*i) + p
			endfor
			clr=i+1 
			def_labels[16*i] = [0,1,3,125,     10,11,72,73,  85,85,85,126,       127,64,65,66]
			def_colors[16*i] = [clr,clr,clr,0, 3,3,clr,clr,        clr,clr,clr,4,   4,0,0,0]
			def_vals[16*i]   = [90,64,64,0,    20,127,64,64,      0,0,0,0,         0,0,0,0]
			def_ccs[(16*i)+11] = mixbusfx_gui[i] 	
		endfor
	elseif chan_layouts[edit_chan]=17
		LabelKnob 3, {Master}
		def_labels[16*0] = [0,2,1,-1,125,101,100,124,-1,-1,-1,-1,-1,64,65,66]
		def_colors[16*0] = [2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_vals[16*0]   = [90,64,64,0,0,0,0,0,0,0,0,0,0,0,0,0]
		def_ccs[16*0]    = [7,8,6,33,125,126,127,124,38,39,40,41,42,121,122,123]
		def_labels[16*1] = [115,1,114,10, 115,1,114,11, 115,1,114,25, 115,1,114,25]
		def_colors[16*1] = [4,4,4,3,6,6,6,3,1,1,1,3,5,5,5,3]
		def_vals[16*1]   = [48,64,64,0,61,64,64,127,84,64,64,62,98,64,64,64]
		def_labels[16*2] = [116,116,116,116,116,116,18,101,  53,54,117,28,31,1,18,100]
		def_colors[16*2] = [6,4,3,5,1,4,0,0,     4,4,4,4,4,4,4,0]
		def_ccs[16*2] = 	 [63,64,65,66,67,68,69,126, 71,72,73,74,75,76,77,127]
		def_vals[16*2]   = [64,64,64,64,64,64,64,0,111,20,15,12,112,64,0,0]
		def_labels[16*3] = [1,117,28,31,-1,111,-1,124,-1,-1,-1,-1,-1,-1,-1,-1]
		def_colors[16*3] = [1,4,4,4,0,4,0,0,0,0,0,0,0,0,0,0]
		def_vals[16*3]   = [0,5,37,51,0,127,0,0,0,0,0,0,0,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,124,86,87,88,89,90,91,92,93]
		def_maxs[16*3]   = [48,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	elseif chan_layouts[edit_chan]=18
		LabelKnob 3, {Hillman}
		def_labels[16*0] = [0,23,26,-1,0,23,26,125,0,23,26,-1,0,23,26,124]
		def_colors[16*0] = [3,3,3,0,2,2,2,0,6,6,6,0,1,1,1,0]
		def_vals[16*0]   = [90,64,1,0,89,64,48,15,90,64,65,0,90,64,112,0]
		def_ccs[16*0]    = [30,31,32,33,34,35,36,125,38,39,40,41,42,43,44,124]
		def_labels[16*1] = [28,29,30,31,126,125,124,0,49,53,50,47,-1,-1,-1,-1]
		def_colors[16*1] = [2,3,3,5,0,0,0,4,4,6,6,3,0,0,0,0]
		def_vals[16*1]   = [0,53,110,30,0,15,0,90,64,35,22,16,0,0,0,0]
		def_ccs[16*1]    = [46,47,48,49,127,125,124,53,54,55,56,57,58,59,60,61]
		def_labels[16*2] = [77,78,-1,-1,-1,126,24,79,28,29,76,75,-1,80,12,1]
		def_colors[16*2] = [2,2,0,0,0,0,6,6,3,3,3,3,0,2,3,4]
		def_vals[16*2]   = [3,16,0,0,0,0,127,127,18,19,38,17,0,0,127,90]
		def_ccs[16*2]    = [62,63,64,65,66,126,68,69,70,71,72,73,74,75,76,77]
		def_maxs[16*2]   = [5,32,1,127,127,127,127,127,127,127,127,127,127,1,127,127]
		Call @CreateMixerPage4
	elseif chan_layouts[edit_chan]=19
		LabelKnob 3, {Zeeon}
		def_labels[16*0] = [89,16,17,74,19,76,20,21,  89,16,17,74,-1,-1,18,0]			
		def_colors[16*0] = [6,6,6,6,6,3,5,4,  5,5,5,5,0,0,2,2]			
		def_vals[16*0]   = [64,64,64,64,90,0,90,0,  64,64,64,64,0,0,64,64]
		def_labels[16*1] = [42,24,25,32,28,29,30,31,  28,29,30,31,-1,39,69,96]			
		def_colors[16*1] = [3,3,3,3,3,3,3,3,  4,4,4,4,0,0,0,0]			
		def_vals[16*1]   = [30,64,0,0,0,30,0,20,  0.30,0,20,0,0,20,0]
		def_labels[16*2] = [49,67,68,21,50,67,68,51,  46,34,51,42,47,6,7,52]			
		def_colors[16*2] = [1,1,1,1,2,2,2,2, 2,2,2,2,1,1,1,1]			
		def_vals[16*2]   = [0,0,0,0,0,0,0,0,  0,0,0,64,0,0,0,0]
		def_labels[16*3] = [45,43,45,43,40,40,40,40,  35,125,0,6,7,124,57,58]			
		def_colors[16*3] = [2,2,2,2,3,3,3,3,  4,0,0,0,0,0,0]			
		def_vals[16*3]   = [0,0,0,0,64,64,64,64,  0,0,90,0,127,0,0,0]
		def_ccs[16*3]    = [78,79,80,81,82,83,84,85,1,125,7,12,13,124,92,93]
	elseif chan_layouts[edit_chan]=20
		LabelKnob 3, {User3}
	endif	
	pad_slot = (64*edit_chan)
	CopyArray def_labels, inst_labels[pad_slot], 64 //4pages of 16pads
	CopyArray def_colors, inst_colors[pad_slot], 64
	CopyArray def_ccs, inst_ccs[pad_slot], 64
	CopyArray def_mins, inst_mins[pad_slot], 64
	CopyArray def_maxs, inst_maxs[pad_slot], 64
	CopyArray def_vals, inst_def_vals, 64
	for ch = 0 to 63
		inst_state[pad_slot+ch] = def_vals[ch]
	endfor
@End

@CreateMixerPage4
	//Create a mixer layout on page 4 for all channels as a default. can be overwritten
	def_labels[16*3] = [0,2,1,3,4,5,6,7,85,12,14,10,11,64,65,66]
	def_colors[16*3] = [2,2,2,2,6,6,6,6,4,4,4,3,3,0,0,0]
	def_vals[16*3]   = [90,64,64,64,0,0,0,0, 0,0,0,0, 127,0,0,0]
	def_ccs[16*3]    = [7,8,6,9, 10,11,12,13, 96,117,119,16,  17,121,122,123]
@End

@SetupLayoutChannels
	ShowLayout 2
	for i = 0 to 15
		pad_to_label=i
		LatchPad i, NO 
		if mode=1 or mode=7// Channels setup
			chan_pad=i //settings mode label and pad pos. diff
			Call @LabelChanPad
		elseif mode=6 // MGEN mode 
			if i<=8
				mgen_pad=i //settings mode last mgen pad in pad slot 7
				Call @LabelMGENPad
			elseif i>=9 and i<=11
				LabelPad i, { }	
			elseif i=12
			  LabelPad i, {[GUI]}
			elseif i=13
			  LabelPad i, { }
			elseif i=14
			  LabelPad i, {[STOP]}
			elseif i=15
			  LabelPad i, {PLAY>}
			endif
			ColorPad i, mgen_colors[i]
			SendMIDINoteOn 15, i, mgen_colors[i] //LED FEEDBACK
		else //instrument page layout
			pad_slot = (64*curr_chan) + (16*inst_curr_page[curr_chan]) + i
			Call @LabelInstrPad
		endif
	endfor
@End

@LabelChanPad // CHANNELS LABELLING - Channels for INSTRUMENTS or MGEN devices 
	//Laborious task of labelling pads when you cant store a string
	ColorPad pad_to_label, chan_colors[chan_pad]
	SendMIDINoteOn 15, 0+pad_to_label, chan_colors[chan_pad] //LED FEEDBACK
	label_num = chan_labels[chan_pad]
	midi_ch = chan_midi_chs[chan_pad]
	if (label_num=0)
		LabelPad pad_to_label, { }
	elseif (label_num=1)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {DRUMS }
	elseif (label_num=2)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {PERCS }
	elseif (label_num=3)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {BASS }
	elseif (label_num=4)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {PAD BASS }
	elseif (label_num=5)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {LEAD }
	elseif (label_num=6)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {PADS }
	elseif (label_num=7)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {STABS }
	elseif (label_num=8)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {ARP }
	elseif (label_num=9)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {KEYS }	
	elseif (label_num=10)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {PLUCK }	
	elseif (label_num=11)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {STRINGS }	
	elseif (label_num=12)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {FX }	
	elseif (label_num=13)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {LOOPS }	
	elseif (label_num=14)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {NOISE FX }	
	elseif (label_num=15)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {TEXTURE }	
	elseif (label_num=16)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {KICK }	
	elseif (label_num=17)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {SHAKERS }	
	elseif (label_num=18)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {VOCALS}	
	elseif (label_num=19)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {SYNTH BUS }	
	elseif (label_num=20)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {MIXBUS A-D }	
	elseif (label_num=21)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {RETURNS }
	elseif (label_num=22)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {MASTER }
	elseif (label_num=23)
		LabelPad pad_to_label, { ____}, midi_ch+1, {____ }, {RSVD KNTRL}
	endif
@End

@LabelMGENPad //MGEN Pad labelling
	ColorPad pad_to_label, mgen_colors[mgen_pad]
	SendMIDINoteOn 15, pad_to_label, mgen_colors[mgen_pad] //LED FEEDBACK
 	label_num = mgen_labels[mgen_pad]
	if (label_num=0)
		LabelPad pad_to_label, { }
	elseif (label_num=1)
		LabelPad pad_to_label, {__MGEN__ }, {>KICK }	
	elseif (label_num=2)
		LabelPad pad_to_label, {__MGEN__ }, {>DRUMS }	
	elseif (label_num=3)
		LabelPad pad_to_label, {__MGEN__ }, {>PERCS }	
	elseif (label_num=4)
		LabelPad pad_to_label, {__MGEN__ }, {>BASS }	
	elseif (label_num=5)
		LabelPad pad_to_label, {__MGEN__ }, {>LEAD }	
	elseif (label_num=6)
		LabelPad pad_to_label, {__MGEN__ }, {>ARP }
	elseif (label_num=7)
		LabelPad pad_to_label, {__MGEN__ }, {>PADS }
	elseif (label_num=8)
		LabelPad pad_to_label, {__MGEN__ }, {>STABS }
	elseif (label_num=9)
		LabelPad pad_to_label, {__MGEN__ }, {>KEYS }	
	elseif (label_num=10)
		LabelPad pad_to_label, {__MGEN__ }, {>SCAPES }	
	elseif (label_num=11)
		LabelPad pad_to_label, {__MGEN__ }, {>M-SPY }	
	elseif (label_num=12)
		LabelPad pad_to_label, {__MGEN__ }, {>LOOPS }	
	elseif (label_num=13)
		LabelPad pad_to_label, {__MGEN__ }, {>FILLS }	
	elseif (label_num=14)
		LabelPad pad_to_label, {__MGEN__ }, {   >FX }	
	elseif (label_num=15)
		LabelPad pad_to_label, {__MGEN__ }, {>AUTOM }	
	elseif (label_num=16)
		LabelPad pad_to_label, {__MGEN__ }, {>MELODY }	
	elseif (label_num=17)
		LabelPad pad_to_label, {__MGEN__ }, {>HARMONY }	
	elseif (label_num=18)
		LabelPad pad_to_label, {__MGEN__ }, {>KORDS }	
	elseif (label_num=19)
		LabelPad pad_to_label, {__MGEN__ }, {>LK }	
	elseif (label_num=20)
		LabelPad pad_to_label, {__MGEN__ }, {>KB-1 }	
	endif
@End

@LabelInstrPad // An instrument pad to label 
	ColorPad pad_to_label, inst_colors[pad_slot]
	SendMIDINoteOn 15, pad_to_label, inst_colors[pad_slot] //LED FEEDBACK
	label_num = inst_labels[pad_slot] // any pad any label except cc in protected range
	if (label_num=0) and chan_layouts[edit_chan]=2 //MIX BUS
		note_labels=[9,11,0,2]
		LabelPad pad_to_label, {VOL MIX }, (NoteName(note_labels[inst_curr_page[curr_chan]]))  //MIXER
	elseif (label_num=0) and chan_layouts[edit_chan]=16 //RETURNS 
		note_labels=[9,11,12,14]
		LabelPad pad_to_label, {VOL RTN }, (NoteName(note_labels[inst_curr_page[curr_chan]])) //MIXER
	elseif (label_num=0)
		LabelPad pad_to_label, {VOL} //MIXER 
	elseif (label_num=1)
		LabelPad pad_to_label, {GAIN} //MIXER
	elseif (label_num=2) and chan_layouts[edit_chan]=6
		LabelPad pad_to_label, {PAN [}, (NoteName((Div pad_to_label,4)+(inst_curr_page[curr_chan]*4))), {]} //MIXER
	elseif (label_num=2)
		LabelPad pad_to_label, {PAN} //MIXER
	elseif (label_num=3)
		LabelPad pad_to_label, {MID/SIDE} //MIXER
	elseif (label_num=4)
		LabelPad pad_to_label, {SEND 1} //MIXER
	elseif (label_num=5)
		LabelPad pad_to_label, {SEND 2} //MIXER
	elseif (label_num=6)
		LabelPad pad_to_label, {SEND 3} //MIXER
	elseif (label_num=7)
		LabelPad pad_to_label, {SEND 4} //MIXER
	elseif (label_num=8)
		LabelPad pad_to_label, {EQ LO} //MIXER
	elseif (label_num=9)
		LabelPad pad_to_label, {EQ HI} //MIXER
	elseif (label_num=10)
		LabelPad pad_to_label, {HPF} //MIXER
	elseif (label_num=11)
		LabelPad pad_to_label, {LPF} //MIXER
	elseif (label_num=12)
		LabelPad pad_to_label, {FX1 D/W} //MIXER
	elseif (label_num=13)
		LabelPad pad_to_label, {FX1 AMT} //MIXER
	elseif (label_num=14)
		LabelPad pad_to_label, {FX2 D/W} //MIXER
	elseif (label_num=15)
		LabelPad pad_to_label, {FX2 AMT} //MIXER
	elseif (label_num=16)
		LabelPad pad_to_label, {OSC SHAPE} //OSC
	elseif (label_num=17)
		LabelPad pad_to_label, {DETUNE} //OSC
	elseif (label_num=18)
		LabelPad pad_to_label, {MIX} //OSC
	elseif (label_num=19)
		LabelPad pad_to_label, {OSC1 VOL} //OSC
	elseif (label_num=20)
		LabelPad pad_to_label, {OSC2 VOL} //OSC
	elseif (label_num=21)
		LabelPad pad_to_label, {NOISE} //OSC
	elseif (label_num=22) and chan_layouts[curr_chan]=3
		LabelPad pad_to_label, {TUNE} //OSC
	elseif (label_num=22) and chan_layouts[curr_chan]=7 //skaka
		LabelPad pad_to_label, {PITCH [}, (NoteName((Div pad_to_label,4)+(inst_curr_page[curr_chan]*4))), {]} //OSC
	elseif (label_num=22) and chan_layouts[curr_chan]=5 //Drambo percs
		LabelPad pad_to_label, {#}, (Div pad_to_label,4) + (inst_curr_page[curr_chan]*4) - 7, { PITCH} //OSC
	elseif (label_num=22)
		LabelPad pad_to_label, {PITCH} //OSC
	elseif (label_num=23) and chan_layouts[curr_chan]=5
		LabelPad pad_to_label, {GLBL PITCH} //OSC
	elseif (label_num=23)
		LabelPad pad_to_label, {OCTAVE} //OSC
	elseif (label_num=24)
		LabelPad pad_to_label, {F.CUTOFF} //FILTER
	elseif (label_num=25)
		LabelPad pad_to_label, {F.RES} //FILTER
	elseif (label_num=26) and chan_layouts[curr_chan]=4
		LabelPad pad_to_label, {MODULATOR} //FILTER
	elseif (label_num=26)
		LabelPad pad_to_label, {TYPE} //FILTER
	elseif (label_num=27)
		LabelPad pad_to_label, {DRIVE} //FILTER
	elseif (label_num=28)
		LabelPad pad_to_label, {ATTACK} //ENV
	elseif (label_num=29)
		LabelPad pad_to_label, {DECAY} //ENV
	elseif (label_num=30)
		LabelPad pad_to_label, {SUSTAIN} //ENV
	elseif (label_num=31)
		LabelPad pad_to_label, {RELEASE} //ENV
	elseif (label_num=32)
		LabelPad pad_to_label, {ENV AMT} //ENV
	elseif (label_num=33)
		LabelPad pad_to_label, {START} //ENV
	elseif (label_num=34) and chan_layouts[curr_chan]=7 //skaka
		LabelPad pad_to_label, {DURATION} //ENV
	elseif (label_num=34)
		LabelPad pad_to_label, {LENGTH} //ENV
	elseif (label_num=35)
		LabelPad pad_to_label, {MODWHEEL} //MOD
	elseif (label_num=36)
		LabelPad pad_to_label, {BREATH} //MOD
	elseif (label_num=37)
		LabelPad pad_to_label, {MORPH} //MOD
	elseif (label_num=38)
		LabelPad pad_to_label, {TREMELO} //MOD
	elseif (label_num=39)
		LabelPad pad_to_label, {GLIDE} //MOD
	elseif (label_num=40)
		LabelPad pad_to_label, {MOD AMT} //MOD
	elseif (label_num=41) and chan_layouts[curr_chan]=4
		LabelPad pad_to_label, {SPEED} //MOD
	elseif (label_num=41)
		LabelPad pad_to_label, {MOD RATE} //MOD
	elseif (label_num=42) and chan_layouts[curr_chan]=3
		LabelPad pad_to_label, {PERS'TY} //MOD
	elseif (label_num=42)
		LabelPad pad_to_label, {TONE} //MOD
	elseif (label_num=43)
		LabelPad pad_to_label, {LFO RATE} //MOD
	elseif (label_num=44)
		LabelPad pad_to_label, {LFO AMT} //MOD
	elseif (label_num=45)
		LabelPad pad_to_label, {LFO TYPE} //MOD
	elseif (label_num=46)
		LabelPad pad_to_label, {DELAY} //FX
	elseif (label_num=47)
		LabelPad pad_to_label, {REVERB} //FX
	elseif (label_num=48) and chan_layouts[curr_chan]=4
		LabelPad pad_to_label, {SATURATE} //FX
	elseif (label_num=48)
		LabelPad pad_to_label, {DISTORT.} //FX
	elseif (label_num=49)
		LabelPad pad_to_label, {CHORUS} //FX
	elseif (label_num=50)
		LabelPad pad_to_label, {PHASER} //FX
	elseif (label_num=51)
		LabelPad pad_to_label, {FEEDBACK} //FX
	elseif (label_num=52) and chan_layouts[curr_chan]=7
		LabelPad pad_to_label, {ROOM} //FX
	elseif (label_num=52)
		LabelPad pad_to_label, {SIZE} //FX
	elseif (label_num=53) and chan_layouts[curr_chan]=3
		LabelPad pad_to_label, {DELAY TIME} //FX
	elseif (label_num=53) and chan_layouts[edit_chan]=17
		LabelPad pad_to_label, {THRESHOLD} //FX
	elseif (label_num=53) 
		LabelPad pad_to_label, {RATE} //FX
	elseif (label_num=54)
		LabelPad pad_to_label, {RATIO} //OTHER
	elseif (label_num=55) and chan_layouts[edit_chan]=6
		LabelPad pad_to_label, {COMP} //OTHER
	elseif (label_num=55)
		LabelPad pad_to_label, {MAKEUP} //OTHER
	elseif (label_num=56)
		LabelPad pad_to_label, {CEILING} //OTHER
	elseif (label_num=57)
		LabelPad pad_to_label, {[PGM-]} //OTHER
	elseif (label_num=58)
		LabelPad pad_to_label, {[PGM+]} //OTHER
	elseif (label_num=59)
		LabelPad pad_to_label, {[RESET MXR]} //OTHER
	elseif (label_num=60)
		LabelPad pad_to_label, {[RESET ALL]} //OTHER		
	elseif (label_num=61) and chan_layouts[curr_chan]=4
		LabelPad pad_to_label, {[SOLO]} //OTHER for Drum Computer individual channels
	elseif (label_num=61)
		LabelPad pad_to_label, {[PLUGIN]} //OTHER
	elseif (label_num=62)
		LabelPad pad_to_label, {SEL CH#}, inst_state[pad_slot]+1 //OTHER
	elseif (label_num=63)
		LabelPad pad_to_label, {DRUM#}, inst_state[pad_slot] //OTHER
	elseif (label_num=64)
		LabelPad pad_to_label, {[MUTE]} //OTHER
	elseif (label_num=65)
		LabelPad pad_to_label, {[SOLO]} //OTHER
	elseif (label_num=66)
		LabelPad pad_to_label, {[ARM]} //OTHER
	elseif (label_num=67)
		LabelPad pad_to_label, {SPEED} //CUSTOM
	elseif (label_num=68)
		LabelPad pad_to_label, {DEPTH} //CUSTOM
	elseif (label_num=69)
		LabelPad pad_to_label, {UNISON} //CUSTOM
	elseif (label_num=70)
		LabelPad pad_to_label, {VELOCITY} //CUSTOM
	elseif (label_num=71)
		LabelPad pad_to_label, {LOW} //CUSTOM
	elseif (label_num=72)
		LabelPad pad_to_label, {MID} //CUSTOM
	elseif (label_num=73)
		LabelPad pad_to_label, {HIGH} //CUSTOM
	elseif (label_num=74) and chan_layouts[curr_chan]=7
		LabelPad pad_to_label, {HUMANIZE} //CUSTOM SKAKA
	elseif (label_num=74)
		LabelPad pad_to_label, {PULSE WIDTH} //CUSTOM
	elseif (label_num=75) and (chan_layouts[curr_chan]=7 or chan_layouts[curr_chan]=18)
		LabelPad pad_to_label, {SHUFFLE} //CUSTOM SKAKA
	elseif (label_num=75)
		LabelPad pad_to_label, {BRIGHTNESS} //CUSTOM
	elseif (label_num=76) and chan_layouts[curr_chan]=18
		LabelPad pad_to_label, {SLOPE} //CUSTOM
	elseif (label_num=76)
		LabelPad pad_to_label, {SUB} //CUSTOM
	elseif (label_num=77) and chan_layouts[curr_chan]=18
		LabelPad pad_to_label, {STEPS RES} //CUSTOM
	elseif (label_num=77)
		LabelPad pad_to_label, {WIDTH} //CUSTOM
	elseif (label_num=78) and chan_layouts[curr_chan]=18
		LabelPad pad_to_label, {NUM STEPS} //CUSTOM
	elseif (label_num=78)
		LabelPad pad_to_label, {HARDNESS} //CUSTOM
	elseif (label_num=79) and chan_layouts[curr_chan]=18
		LabelPad pad_to_label, {F/A BAL} //CUSTOM
	elseif (label_num=79)
		LabelPad pad_to_label, {COLOR} //CUSTOM
	elseif (label_num=80) and chan_layouts[curr_chan]=18
		LabelPad pad_to_label, {BYPASS} //CUSTOM
	elseif (label_num=80)
		LabelPad pad_to_label, {GRAIN} //CUSTOM
	elseif (label_num=81)
		LabelPad pad_to_label, {WAVE} //CUSTOM
	elseif (label_num=82)
		LabelPad pad_to_label, {ALGORITHM} //CUSTOM
	elseif (label_num=83)
		LabelPad pad_to_label, {ARP DUR.} //CUSTOM
	elseif (label_num=84)
		LabelPad pad_to_label, {ARP SWING} //CUSTOM
	elseif (label_num=85)
		LabelPad pad_to_label, {MACRO }, (pad_to_label%8)+1 //CUSTOM
	elseif (label_num=86)
		LabelPad pad_to_label, {TIME} //CUSTOM
	elseif (label_num=87)
		LabelPad pad_to_label, {INDEX} //CUSTOM
	elseif (label_num=88)
		LabelPad pad_to_label, {SHAPE} //CUSTOM
	elseif (label_num=89)
		LabelPad pad_to_label, {FINE TUNE} //CUSTOM
	elseif (label_num=90)
		LabelPad pad_to_label, {ROUTING} //CUSTOM
	elseif (label_num=91)
		LabelPad pad_to_label, {MASTER} //CUSTOM
	elseif (label_num=92)
		LabelPad pad_to_label, {GATE} //CUSTOM
	elseif (label_num=93)
		LabelPad pad_to_label, {DIV.} //CUSTOM
	elseif (label_num=94)
		LabelPad pad_to_label, {SC MIX} //CUSTOM
	elseif (label_num=95)
		LabelPad pad_to_label, {DETUNE} //CUSTOM
	elseif (label_num=96)
		LabelPad pad_to_label, {SPREAD} //CUSTOM
	elseif (label_num=97)
		LabelPad pad_to_label, {SYNC} //CUSTOM
	elseif (label_num=98)
		LabelPad pad_to_label, {PITCH ENV} //CUSTOM
	elseif (label_num=99)
		LabelPad pad_to_label, {MODE} //CUSTOM
	elseif (label_num=100)
		LabelPad pad_to_label, {[CMPRSR]} //CUSTOM
	elseif (label_num=101)
		LabelPad pad_to_label, {[ENHANCER]} //CUSTOM
	elseif (label_num=102)
		LabelPad pad_to_label, {ROOM} //CUSTOM
	elseif (label_num=103)
		LabelPad pad_to_label, {HALL} //CUSTOM
	elseif (label_num=104) 
		LabelPad pad_to_label, {MODIFY} //CUSTOM	
	elseif (label_num=105)
		LabelPad pad_to_label, {SOLO CH} //CUSTOM	
	elseif (label_num=106) 
		LabelPad pad_to_label, {LAYR#}, (pad_to_label%8)+1 //CUSTOM	
	elseif (label_num=107)
		LabelPad pad_to_label, {SELECT} //CUSTOM	
	elseif (label_num=108)
		LabelPad pad_to_label, {TXPOSE} //CUSTOM	
	elseif (label_num=109)
		LabelPad pad_to_label, {FM AMT} //CUSTOM	
	elseif (label_num=110)
		LabelPad pad_to_label, {DRIVE} //CUSTOM	
	elseif (label_num=111)
		LabelPad pad_to_label, {LEVEL} //CUSTOM	
	elseif (label_num=112)
		LabelPad pad_to_label, {CURVE} //CUSTOM	
	elseif (label_num=113)
		LabelPad pad_to_label, {S&H RATE} //CUSTOM	
	elseif (label_num=114)
		LabelPad pad_to_label, {RESON.} //CUSTOM	
	elseif (label_num=115)
		LabelPad pad_to_label, {FREQ.} //CUSTOM	
	elseif (label_num=116)
		LabelPad pad_to_label, {BAND }, (pad_to_label%8)+1 //CUSTOM
	elseif (label_num=117)	
		LabelPad pad_to_label, {LOOKAHEAD} //FX
	elseif (label_num=118)	
		LabelPad pad_to_label, {PKF} //CUSTOM
	elseif (label_num=119)	
		LabelPad pad_to_label, {[DRAMBO]} //CUSTOM
	elseif (label_num=120)	
		LabelPad pad_to_label, {[DR. MAIN]} //CUSTOM
	elseif (label_num=123) 
		LabelPad pad_to_label, (NoteName inst_state[pad_slot], TRUE), { (}, inst_state[pad_slot], {)} //Send note
	elseif (label_num=124) and (chan_layouts[curr_chan]=2 or chan_layouts[curr_chan]=16) 
		LabelPad pad_to_label, {[EFFECT]} //OPEN GUI
	elseif (label_num=124) and chan_layouts[curr_chan]=17
		LabelPad pad_to_label, {[LIMITER]} //OPEN GUI
	elseif (label_num=124)
		LabelPad pad_to_label, {[INSTR]} //OPEN GUI
	elseif (label_num=125)
		LabelPad pad_to_label, {[EQ]} //OPEN GUI
	elseif (label_num=126)
		LabelPad pad_to_label, {[FX1]} //OPEN GUI
	elseif (label_num=127)
		LabelPad pad_to_label, {[FX2]} //OPEN GUI
	else
		LabelPad pad_to_label, { }
	endif
	//update init vars with variable numbers if this is changed
@End
