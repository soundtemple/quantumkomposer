//# SPLIT OFF FROM KNTRL ON 26SEP
//# MOZAIC KOMPOSER SUITE
//# AUTOM APP
//# Handles automation, lfo's and macros
@OnLoad
	SetShortName {AUTOM} 
	ShowLayout 2
	LabelPads {[ AUTOM ]}
	if unassigned scene_durs //# duration in first scene
		mode = 0 //# 0Scenes, 1Channels, 2Kontrol, 3Autom., 4LFOS
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:ChordLocked
		edit_mode_active=FALSE
		SetMetroPPQN 4
		ppqn = 4
		knob_set=0
		edit_scene=0
		locked_to_scene=0
		scene_change_requested = -1 //# on pad down has next scene number
		in_mode_select = TRUE //# Toggle for changing modes mode
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		print_preset=TRUE
		Call @InitKnobVariables //# All knob settings on start
		Call @SetupSettingsLayout
	endif
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	current_scene = 0 // #0-7 Pads 0-7
	scene_durs=[4,8,0,0,0,0,0,0]
	scene_names=[0,1,2,3,4,5,6,7]
	scene_presets=[]
	//# Color Scheme
	col_scene = 2
	col_sel_scene = 4
	col_edit_scene = 3
	col_pending = 3
	loop_col = 6
	col_warn = 1
	col_mode_select = 5 //# Mode selection buttons
	col_unused = 0
	col_mode_edit = 6 //# Mode selection buttons in edit mode
	cc_rtn_to_song_mode=9
	cc_swing=10
	
	// Commmunications from KNTRL
	cc_scene_select=100
	cc_scene_duration=101 //+ scene_num0-7 ie 101-108
	cc_rtn_to_song_mode=22
	cc_swing=23
	
	//AUTOMATION SECTION VARS
	auto_ramp_max=127 //range for the ramp to be applied
	auto_ramp_min=0
	auto_lane=0 //0-15 slots available for automation
	auto_scene=0 //# scene being automated
	auto_ramp=0 //# apply a ramp set of automation values to a set of bars
	auto_adv_bar=0 //# scroll through scene to see automation
	scene_durs = [4,8,8,16,8,16,8,4]
	sel_autom_pad=0 //# selected automation pad for editing
	record_autom_on=FALSE //# record automation from the automation edit page
	FillArray auto_data_ch0, -1, 1024
	FillArray auto_data_ch1, -1, 1024
	FillArray auto_data_ch2, -1, 1024
	FillArray auto_data_ch3, -1, 1024
	FillArray auto_data_ch4, -1, 1024
	FillArray auto_data_ch5, -1, 1024
	FillArray auto_data_ch6, -1, 1024
	FillArray auto_data_ch7, -1, 1024
	FillArray auto_data_ch8, -1, 1024
	FillArray auto_data_ch9, -1, 1024
	FillArray auto_data_ch10, -1, 1024
	FillArray auto_data_ch11, -1, 1024
	FillArray auto_data_ch12, -1, 1024
	FillArray auto_data_ch13, -1, 1024
	FillArray auto_data_ch14, -1, 1024
	FillArray auto_data_ch15, -1, 1024
	FillArray automation_ccs, 0, 16 //the cc num automation gets sent on 
	FillArray automation_chs, 0, 16 //the channel automation gets sent on
	FillArray automation_cols, 0, 16 //the pad color for the automation slot
	FillArray automation_labels, 0, 16 //Label for the automation slot
	
	FillArray automation_chs,-1,16 //# knobs used to store and locate the param to automate
	FillArray automation_pads,-1,16 //# knobs used to store and locate the param to automate

	//MACRO SECTION
	sel_macro=0 //# currently selected for editing
	macro_chans=[] //4 macros each with 4 assignable slots from the 16 channels and their 16 params
	macro_params=[]
	m1_vals=[0,0,0,0]
	m2_vals=[0,0,0,0]
	m3_vals=[0,0,0,0]
	m4_vals=[0,0,0,0]
	
	//LFO SECTION VARS
	lfo_num=0
	dest_num=0
	lfo_dests=[-1,0,-1,0,-1,0,  -1,0,-1,0,-1,0,-1,0] //#2LFO's 4 destinations calc'd by CH and PAD. -1 so no labelling
	lfo_types=[3,4] //# Ramp, Sine etc...
	lfo_freqs=[0.5, 0.5]
	lfo_syncs=[TRUE, TRUE]
	lfo_xmods=[0,0]
	autom_scene=[0,0] //current scene selected for editing in each LFO
	autom_bar=[1,1] //current bar selected for editing in each LFO
	//# stored this way so we can preserve changes if scene lengths change in preceding scenes...
	FillArray lfo_autom_amts, -1, 32*8*2 //# amt saved per bar -1 value=notsent. 8scenes, upto 32bars, 2lfos
	SetLFOType 0, {RampUp} //{Sine}, {Cosine}, {Square}, {Triangle}, {RampUp}, {RampDown}, {SH}
	SetLFOType 1, {RampDown}
	SetupLFO 0, 0, 127, YES, 0.5
	SetupLFO 1, 0, 127, YES, 0.5
@End


@OnHostStart
	//# keep track of scene progress
	Log HostBar, { : }, HostBeat, { = }, (HostBeatsPerMeasure * HostBar) + HostBeat
	if (HostBeat = 0) and (HostBar = 0)
		//# starting playback from beginning		
		scene_beat_count = -1
		scene_changed = FALSE
		if (songmode = 0)
			current_scene = 0
		endif
	else
		//# continuing playback
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
	endif
	Log {---- Host Started ----}
@End

@OnHostStop
  scene_beat_count = 0
  Log {---- Host Stopped ---- }, scene_beat_count, { - }
@End 


@OnNewBeat
	//# increment beat counts xonb
	scene_beat_count = scene_beat_count + 1
	//# Handle Scene and Chord changes
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	
	if (scene_change_requested > -1) and (HostBeat = 0)
		//# user requested scene change and its a new bar (& return to song)
		//# Log {Handling scene change request. It a new bar}
		Call @HandleSceneChange
	elseif (scene_beat_count >= current_scene_duration)
		//# its time to increment scene
		Call @HandleSceneChange
	endif
	Call @LogCurrentInfo
@End

@OnNewBar
@End


@OnMidiCC
	//# Messages from KONTROLLER to update scene durs and play status for all instances in the KOMPOSER SUITE
	Log {MIDI RECEIVED: }, MIDIChannel, MIDIByte2, MIDIByte3 
	if (MIDIByte2>=cc_scene_duration) and (MIDIByte2<=(cc_scene_duration+7)) and (MIDIChannel=15)
		//# handle scene duration change
		scene_durs[MIDIByte2-cc_scene_duration] = MIDIByte3
		if mode=0
			Call @SetupLayoutScenes
		endif
	elseif (MIDIByte2=cc_scene_select) and (MIDIChannel=15)
		//# handle scene change requested (ie: PadDown Scene change)
		scene_change_requested = MIDIByte3
		locked_to_scene=MIDIByte3
		if NOT HostRunning //# immediate change else newbeat/bar handles
  		Call @HandleSceneChange 
  	endif
		if mode=0
			Call @SetupLayoutScenes
		endif
	elseif (HostRunning and MIDIByte2=cc_rtn_to_song_mode and MIDIByte3>0)
  	//# handle return to song mode requested
  	return_to_song_mode_requested = TRUE
  	scene_change_requested = current_scene
  	in_mode_select = FALSE
  	songmode = 0
  	mode = 0
  	ColorPad current_scene, 3
    ColorPad 8, 3
	elseif (MIDIByte2=cc_rtn_to_song_mode and MIDIByte3>0 and not HostRunning)
		in_mode_select = FALSE
  	songmode = 0
  	mode = 0
		current_scene=0
  	Call @SetupLayoutScenes
		ColorPad current_scene, 3
    ColorPad current_pattn+8, 3
  elseif (MIDIByte2=cc_swing) //# Global swing
  	swng=MIDIByte3
  	scene_swing=[swng,swng,swng,swng,swng,swng,swng,swng]
  	Call @SetupLayoutScenes
	endif
@End


@OnShiftDown
	Log {MODE: }, mode
	//# xosd
	if in_mode_select //# Exit SHIFT MODE
		in_mode_select = FALSE	
		if mode=0
			Call @SetupLayoutScenes
		elseif mode=2 //AUTOM
			Call @LabelAutomationPads
			Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
		elseif mode=3 //MACROS
			in_mode_select = FALSE
			LabelPads {AUTOM : [ MACROS ] }
			ShowLayout 2
			for i = 0 to 15
				LatchPad i, NO 
				pad_to_label=i 
				pad_slot=(macro_chans[i] * 16) + macro_params[i] 
				Call @LabelAutomPad
			endfor
			LatchPad sel_macro, YES 
			if edit_mode_active
				Call @SetupKnobset11
			else
				Call @SetupKnobset12
			endif
		elseif mode=4 //LFOS
			Call @SetupLayoutLFOS
		endif
		Call @UpdateCurrentKnobset		
	else //not in mode select
		Call @SetupSettingsLayout
		Call @UpdateCurrentKnobset
		LabelPads {AUTOM : [ SETTINGS ]}
	endif
@End

@OnShiftUp
@End

@OnPadUp
  if in_mode_select and (LastPad=6 or LastPad=7)
		LabelPad LastPad, { }
	endif	
@End


@OnPadDown
	pad_is_down = TRUE
	//# Pad Down actions
	if in_mode_select
		if LastPad=0
		  in_mode_select = FALSE
			mode=0 //SCENES
			Call @SetupKnobset0
			Call @SetupLayoutScenes
		elseif LastPad=6
		  LabelPad 6, {MACROS COMING SOON!}
		elseif LastPad=7
		  LabelPad 7, {LFO'S COMING  SOON!}
		elseif LastPad<4 or (LastPad>5 and LastPad<15)
			Exit //# Not in use
		elseif LastPad=4 // TOGGLE EDIT MODE
			edit_mode_active = NOT edit_mode_active
			Call @SetupSettingsLayout
		elseif LastPad=5
			mode=2 //AUTOMATION
			in_mode_select = FALSE
			if edit_mode_active
				sel_autom_pad=0
				Call @LabelAutomationPads
				Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
				LatchPad 0, YES
			else
				sel_autom_pad=0
				Call @LabelAutomationPads
				Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
				LatchPad 0, YES	
			endif
		elseif LastPad=6
			mode=3 //MACROS
			in_mode_select = FALSE
			LabelPads {AUTOM : [ MACROS ]}
			ShowLayout 2
			for i = 0 to 15
				LatchPad i, NO 
				pad_to_label=i 
				pad_slot=(macro_chans[i] * 16) + macro_params[i] 
				Call @LabelAutomPad
			endfor
			LatchPad sel_macro, YES 
			if edit_mode_active
				Call @SetupKnobset11
			else
				Call @SetupKnobset12
			endif
		elseif LastPad=7
			mode=4 // LFO's
			in_mode_select = FALSE
			Call @SetupLayoutLFOS
			Call @SetupKnobset6 //# LFO's
		elseif LastPad=15
			record_autom_on = not record_autom_on 	
			if record_autom_on
				LabelPads {AUTOM : [ Press play. Turn knobs. Automation will record until end of scene ]}
				Log {On beat get midi value send for midi kontrol param and save it to automation. Only while in automation mode}
			else
			  LabelPads {AUTOM : [ AUTOMATION SETUP PARAMTERS ] }
			endif
		endif
	elseif NOT in_mode_select
		if mode=0  //SCENES MODE
			Call @PadDownScenesMode
		elseif mode=2 // AUTOM. mode
			Call @PadDownAutomMode
		elseif mode=3 // MACROS mode
			Call @PadDownMACROSMode
		elseif mode=4 // LFO's mode
			Call @PadDownLFOSMode
		endif
	endif
	LOG {MODE: }, mode
@End

@OnPadUp
  pad_is_down = FALSE
@End


@PadDownScenesMode
	if mode=0 and (LastPad >= 0 and LastPad <= 7) //SCENES MODE
		Log { SCENE CHANGE REQUESTED }
		scene_change_requested = LastPad
		songmode=1 //# Lock to selected scene
		edit_scene=LastPad
		locked_to_scene=LastPad
		if NOT HostRunning //# immediate change else newbeat/bar handles
			Call @HandleSceneChange 
		endif
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	elseif mode=0 and LastPad=8
		songmode=0 //# return to song mode
	elseif mode=0 and LastPad=9
		return_to_song_mode_requested = TRUE
  	scene_change_requested = current_scene
  	songmode = 0
  	ColorPad 0, col_pending
    ColorPad 8, col_pending
		LabelPads {KNTRL: [ LOOPING SONG ] }
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	endif
@End

@PadDownLFOSMode
	Log {Pad down in LFO's mode}
	dest_num=LastPad
	Call @SetupKnobset6
@End

@PadDownMACROSMode
	Log {Pad down in MACROS mode}
	macro_num = (Div LastPad, 4) + 1
	param_num = (LastPad % 4) + 1	
	sel_macro=LastPad 
	LabelPads {AUTOM : [ MACRO }, macro_num, { PARAM }, param_num, { ]}
	for i = 0 to 15
		LatchPad i, no 
	endfor
	LatchPad sel_macro, YES
	if edit_mode_active
		Call @SetupKnobset11
	endif
@End

@PadDownAutomMode
	Log {Pad down in AUTOM mode}
	sel_autom_pad=LastPad
	if edit_mode_active
		Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
		for i = 0 to 15
			LatchPad i, no 
		endfor
		LatchPad sel_autom_pad, YES
	else
		auto_lane=LastPad 
		Call @SetupLayoutAutom
		Call @SetupKnobset5 //# AUTOM. Write to params	
	endif
@End

@HandleSceneChange
	//# Work out which scene is next xhsc
	scene_changed = TRUE
  if scene_change_requested > -1
  	current_scene = scene_change_requested
  	if return_to_song_mode_requested
  		songmode = 0
			ColorPad current_scene, col_pending
		else
	  	songmode = 1 //# lock to scene if user requests
  	endif
  	return_to_song_mode_requested = FALSE
		scene_change_requested = -1
  elseif (songmode > 0)
  	current_scene = current_scene
  elseif (current_scene = 7) //# End of song. Loop back to beginning 
    current_scene = 0 
  elseif scene_durs[current_scene + 1] <= 0
  	//# also song end
  	current_scene = 0 //# no duration in next scene return to beginning
  else
		current_scene = current_scene + 1 //# Going to next
  endif
  scene_beat_count = 0
  Log {----- SCENE CHANGE -----}, {S}, current_scene+1
	if mode=0
		Call @SetupLayoutScenes
	endif
@End

@LogCurrentInfo
	current_scene_duration = scene_durs[current_scene]
	Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1
	LabelPads {AUTOM : [ Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1, { ]}
@End

@SetupSettingsLayout
	// #Label all settings mode pads
	in_mode_select = TRUE
	ShowLayout 2
	LabelPads {AUTOM : [ SETTINGS ]}
	for i = 0 to 15
		ColorPad i, col_mode_select
		LatchPad i, NO
	endfor
	LabelPad 0, {SCENES}
	LabelPad 1, { }
	LabelPad 2, { }
	LabelPad 3, { }
	LabelPad 4, {EDIT}
	LabelPad 5, {AUTOM}
	LabelPad 6, { }
	LabelPad 7, { }
	LabelPad 8, { } 
	LabelPad 9, { } 
	LabelPad 10,{ }
	LabelPad 11,{ }
	LabelPad 12,{ }
	LabelPad 13,{ }	
	LabelPad 14, { }
	LabelPad 15, {RECORD AUTOM}
	if edit_mode_active
		LabelPad 4, {EDIT =>}
			for i = 4 to 7
				ColorPad i, col_mode_edit
		endfor
	endif
@End

@OnKnobChange
	if knob_set = 0 
	  Call @KnobChangeSet0 //# scene settings
	elseif knob_set = 4
  	Call @KnobChangeSet4	//# automation params
  elseif knob_set = 5
  	Call @KnobChangeSet5	//# automation write
  elseif knob_set = 6
  	Call @KnobChangeSet6	//# lfo's
	elseif knob_set = 11
  	Call @KnobChangeSet11	//# Macro setup 
	elseif knob_set = 12
  	Call @KnobChangeSet12	//# Macro usage
	endif
@End

@UpdateCurrentKnobset
	//# On entering select mode the following need knobsets selected
	if in_mode_select	//# disable knobs in_mode_select
		LabelKnobs { }
		LabelKnob 0, { }
		LabelKnob 1, { }
		LabelKnob 2, { }
		LabelKnob 3, { }
		knob_set = 99 //# dummy number to disable
	else
		if knob_set = 0 
		  Call @SetupKnobset0 //# scene settings
		elseif knob_set = 4
	  	Call @SetupKnobset4	//# automation params
	  elseif knob_set = 5
	  	Call @SetupKnobset5	//# automation writes
	  elseif knob_set = 6
	  	Call @SetupKnobset6	//# lfo setup
		elseif knob_set = 11
	  	Call @SetupKnobset11	//# macro setup
		elseif knob_set = 12
	  	Call @SetupKnobset12	//# macro usage
		endif
	endif
@End

@SetupKnobset0
	//# Scene settings
	knob_set = 0
	LabelPads {AUTOM : [ SCENES ]}
	LabelKnobs {SCENE SETUP}
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	LabelKnob 2, { }
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale edit_scene, 0, 7, 0, 127
	SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
@End

@KnobChangeSet0
	//# scene settings xs0
	if LastKnob = 0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_scene
			edit_scene = val
			SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
		endif
	endif
	if LastKnob = 1
		scn_duration = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 32
		scene_durs[edit_scene] = scn_duration
	endif
	scn_to_label = current_scene
	Call @SetupLayoutScenes
	LabelKnob 0, {Scene }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	LabelKnob 2, { }
	LabelKnob 3, { }
@End

@SetupKnobset4
	//# AUTOMATION PARAMS
	knob_set = 4
	if edit_mode_active
		LabelPads {AUTOM : [ AUTOMATION SETUP ]}
		LabelKnobs {AUTOM SETUP P}, auto_lane+1
	else 
		LabelPads {AUTOM : [ AUTOMATION PARAMTERS ]}
		LabelKnobs {AUTOMATION P}, auto_lane+1
	endif
	a_ch = automation_chs[sel_autom_pad]
	a_lbl = automation_labels[sel_autom_pad]
	a_cc = automation_ccs[sel_autom_pad]
	a_col = automation_cols[sel_autom_pad]
	SetKnobValue 0, TranslateScale a_ch, 0, 15, 0, 127
	SetKnobValue 1, TranslateScale a_lbl, 0, 48, 0, 127
	SetKnobValue 2, TranslateScale a_cc, 0, 127, 0, 127
	SetKnobValue 3, TranslateScale a_col, 0, 6, 0, 127
	Call @LabelAutomationPads
@End

@KnobChangeSet4
	//# AUTOMATION PARAMS
	if LastKnob = 0
    automation_chs[sel_autom_pad] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		LabelKnob 0, {ch }, automation_chs[sel_autom_pad]+1
  endif
  if LastKnob = 1
    automation_labels[sel_autom_pad] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 48
		LabelKnob 1, {Label }, automation_labels[sel_autom_pad]
	endif
  if LastKnob = 2
		automation_ccs[sel_autom_pad] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
		LabelKnob 2, {cc# }, automation_ccs[sel_autom_pad]
	endif
  if LastKnob = 3
		automation_cols[sel_autom_pad] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 6
		LabelKnob 3, {Color }, automation_cols[sel_autom_pad]
		LatchPad sel_autom_pad, NO 
	endif
	pad_to_label=sel_autom_pad
	pad_slot=sel_autom_pad
	Call @LabelAutomPad	
@End

@LabelAutomationPads
	for i = 0 to 15
		LabelPad i, { }
		ColorPad i, 0
		pad_to_label=i
		pad_slot=i
		Call @LabelAutomPad
	endfor
	LabelKnob 0, {ch }, automation_chs[sel_autom_pad]+1
	LabelKnob 1, {Label }, automation_labels[sel_autom_pad]
	LabelKnob 2, {cc# }, automation_ccs[sel_autom_pad]
	LabelKnob 3, {Color }, automation_cols[sel_autom_pad]
@End

@SetupKnobset5
	//# AUTOMATION WRITE Mode
	knob_set = 5
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i] //add scene durs up to the automation scene
	endfor
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4 //allows for scrolling through the scene to see automation. view holds 4 bars
		auto_adv_max = 0
	endif
	SetKnobValue 8, auto_ramp_min
	SetKnobValue 19, auto_ramp_max
	SetKnobValue 9, TranslateScale auto_lane, 0, 15, 0, 127
	SetKnobValue 10, TranslateScale auto_scene, 0, 7, 0, 127
	SetKnobValue 20, TranslateScale auto_ramp, 0, 15, 0, 127
	SetKnobValue 21, TranslateScale auto_adv_bar, 0, auto_adv_max, 0, 127
	//# Set KnobValues for automation slots
	for i = 0 to 7
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 11 to 18
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i - 3
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor	
	Call @LabelAutomationKnobs
@End

@KnobChangeSet5
	//# AUTOMATION WRITE mode
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	if LastKnob = 8
	  auto_ramp_min = Round TranslateScale (GetKnobValue 8), 0, 127, 0, 127
	  LabelKnob 8, {Min }, auto_ramp_min 
  endif
	if LastKnob = 19
	  auto_ramp_max = Round TranslateScale (GetKnobValue 19), 0, 127, 0, 127
	  LabelKnob 19, {Max }, auto_ramp_max
	endif
	if LastKnob = 20
	  auto_ramp = Round TranslateScale (GetKnobValue 20), 0, 127, 0, 15
	  LabelKnob 20, {Ramp }, auto_ramp
		Log {Auto adv bar?: }, auto_adv_bar
		Call @ApplyAutoRamp
	endif
	if LastKnob = 9
	  auto_lane =  Round TranslateScale (GetKnobValue 9), 0, 127, 0, 15
		Call @LabelAutomationKnobs
	endif
	if LastKnob = 10
	  auto_scene =  Round TranslateScale (GetKnobValue 10), 0, 127, 0, 7
		Call @LabelAutomationKnobs
	endif
	if LastKnob = 21
	  auto_adv_bar =  Round TranslateScale (GetKnobValue 21), 0, 127, 0, auto_adv_max
		Call @LabelAutomationKnobs
	endif
	if (LastKnob>=0 and LastKnob<=7) or (LastKnob>=11 and LastKnob<=19)
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure)
		knob_slot=LastKnob
		if LastKnob>=11
			knob_slot=LastKnob-3
		endif
		data_slot = data_slot+knob_slot
		break_point = Round TranslateScale (GetKnobValue LastKnob), 0, 127, 0, 127
		Call @UpdateAutomationPoint
	endif
@End

@ApplyAutoRamp
	data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure)
	log {data slot }, data_slot, { other: }, song_bar, { }, scene_durs[auto_scene], { }, auto_adv_bar, { }  
	for r = 1 to 10 //create some dummy ramps
		v=(r*10)
		auto_ramps[r*16] = [v,v,v,v, v,v,v,v, v,v,v,v, v,v,v,v]
	endfor
	for i = 0 to 7
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i
		break_point= auto_ramps[(auto_ramp*16)+i]
		Call @UpdateAutomationPoint
	endfor
	for i = 11 to 18
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i - 3
		break_point= auto_ramps[(auto_ramp*16)+i]
		Call @UpdateAutomationPoint
	endfor
	Call @LabelAutomationKnobs
@End

@SetupKnobset6
	//# LFO's
  knob_set = 6
  ShowLayout 0
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	//the amt to set at scene x bar y
	autom_lfo_amt = autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]]  
	SetKnobValue 0, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2)], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2) + 1], 0, 15, 0, 127
	SetKnobValue 2, TranslateScale autom_scene, 0, 15, 0, 127
	SetKnobValue 3, TranslateScale autom_bar, 0, 15, 0, 127
	SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
	//SetKnobValue 5, TranslateScale lfo_num, 0, 1, 0, 127
	SetKnobValue 6, TranslateScale lfo_types[lfo_num], 0, 5, 0, 127
	SetKnobValue 7, TranslateScale lfo_freqs[lfo_num], 0, 127, 0, 127
	SetKnobValue 8, TranslateScale lfo_syncs[lfo_num], 0, 1, 0, 127
	SetKnobValue 9, TranslateScale lfo_xmods[lfo_num], 0, 10, 0, 127
	Call @LabelLFOKnobs
@End

@KnobChangeSet6
	//# LFO's  mode
	if LastKnob = 0
    d_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2)] = d_ch
		if d_ch>=0 and d_pad>=0
			pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
  endif
  if LastKnob = 1
    d_pad = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2) + 1] = d_pad
		if d_ch>=0 and d_pad>=0
			pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
  endif
  if LastKnob = 2
    autom_scene = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
  if LastKnob = 3
		autom_bar = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 31
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
	if LastKnob = 4
    autom_lfo_amt = Round TranslateScale (GetKnobValue 4), 0, 127, 0, 127
		autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]] = autom_lfo_amt
  endif
  if LastKnob = 5
    lfo_num = Round TranslateScale (GetKnobValue 5), 0, 127, 0, 1
		Call @SetupKnobset6
  endif
  if LastKnob = 6
    lfo_types[lfo_num] = Round TranslateScale (GetKnobValue 6), 0, 127, 0, 5
  endif
  if LastKnob = 7
    lfo_freqs[lfo_num] = Round TranslateScale (GetKnobValue 7), 0, 127, 0, 127
		//# how do we set this for synced? what are options. maybe need array of choices?
	endif
	if LastKnob = 8
    lfo_syncs[lfo_num] = Round TranslateScale (GetKnobValue 8), 0, 127, 0, 1
  endif
  if LastKnob = 9
    lfo_xmods[lfo_num] = Round TranslateScale (GetKnobValue 9), 0, 127, 0, 10
  endif	
	Call @LabelLFOKnobs
@End

@LabelLFOKnobs
	LabelPads {[ LFO },lfo_num+1, { DESTINATIONS ]} 
	LabelKnobs {AUTOM : [ LFO },lfo_num+1, { SETUP ]}   
	LabelXY {[ LFO }, lfo_num+1, { OUTPUT ]}
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	LabelKnob 0, {D-CH }, d_ch+1
	LabelKnob 1, {D-PAD }, d_pad+1
	if autom_scene <=7
		LabelKnob 2, {A-SCENE }, autom_scene[lfo_num]+1 //0-7 + 8 which is autom off free
		LabelKnob 3, {A-BAR }, autom_bar[lfo_num]+1 //set dynamically but 0-31
		LabelKnob 4, {AMT }, autom_lfo_amt
  else
		LabelKnob 2, {Auto. OFF}
		LabelKnob 3, { }
  endif
	LabelKnob 4, {AMT }, autom_lfo_amt
	LabelKnob 5, {LFO# }, lfo_num+1
	lfo_type = lfo_types[lfo_num]
	if lfo_type=0
		LabelKnob 6, {SINE}
	elseif lfo_type=1
		LabelKnob 6, {COSINE}
  elseif lfo_type=2
		LabelKnob 6, {SQUARE}
  elseif lfo_type=3
		LabelKnob 6, {RAMP UP}
  elseif lfo_type=4
		LabelKnob 6, {RAMP DN}
  elseif lfo_type=5
		LabelKnob 6, {S&H}
  endif
  LabelKnob 7, {FREQ }, lfo_freqs[lfo_num]
  if lfo_syncs[lfo_num] = 0
	  LabelKnob 8, {FREE}
	else
		LabelKnob 8, {SYNC}
	endif
	LabelKnob 9, {X-MOD }, lfo_xmods[lfo_num]
	//label destination pads
	for i = 0 to 3
		d_ch = lfo_dests[(lfo_num*8) + (i * 2)] //destination channel
		d_pad = lfo_dests[(lfo_num*8) + (i * 2) + 1] //destination 0-15 setup in kntrl mode
		if d_ch>=0 and d_pad>=0 //# initialised with value -1 so no labelling until assigned
			pad_to_label=i 
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
	endfor
@End

@SetupKnobset11
	//# MACRO SETUP
	knob_set = 11
	LabelKnobs {MACRO SETUP}
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
	LabelKnob 2, { }
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale macro_chans[sel_macro], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale macro_params[sel_macro], 0, 15, 0, 127
	SetKnobValue 2, 0
	SetKnobValue 3, 0
@End

@KnobChangeSet11
	//# MACRO SETUP
	if LastKnob = 0
		macro_chans[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
	endif
	if LastKnob = 1
		macro_params[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15	
	endif
	pad_to_label=sel_macro
	pad_slot=(macro_chans[sel_macro] * 16) + macro_params[sel_macro]
	Call @LabelAutomPad
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
@End

@SetupKnobset12
	//# MACRO USAGE
	knob_set = 12
	LabelKnobs {MACRO KNOBS}
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
	SetKnobValue 0, TranslateScale m1_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale m2_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale m3_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale m4_vals[sel_macro], 0, 127, 0, 127 
@End

@KnobChangeSet12
	//# MACRO USAGE
	if LastKnob = 0
		m1_vals[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if LastKnob = 1
		m2_vals[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if LastKnob = 2
		m3_vals[sel_macro] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if LastKnob = 3
		m4_vals[sel_macro] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
@End

@SetupLayoutScenes
	//#xsl setup layout for Scenes mode
	ShowLayout 2
	if mode=0 or mode=1
		//# Setup scene pads
		for i = 0 to 7
			if scene_durs[i] > 0
				ColorPad i, col_scene
				scn_to_label = i
				Call @LabelScenePad
			else
				ColorPad i, col_unused
				LabelPad i, { }
			endif
			LatchPad i, NO
	  endfor
		ColorPad current_scene, col_sel_scene
		ColorPad edit_scene, col_edit_scene
		if scene_change_requested>-1
			ColorPad scene_change_requested, col_pending
		endif
		for i = 8 to 15
			LatchPad i, NO
	    ColorPad i, col_unused
			LabelPad i, { }
		endfor
	elseif mode=2
		for i = 0 to 15
	  	ColorPad i, 2
			LabelPad i, {mode??}
		endfor
	endif
	if (songmode = 0)
		LabelPad 8, {SONG MODE }
		LabelPad 9, {-}
		LatchPad 8, YES
	elseif (songmode = 1)
		LabelPad 8, {LOCKED TO S}, locked_to_scene+1
		LatchPad 8, NO
		LabelPad 9, {TO SONGMODE}
		LatchPad locked_to_scene, YES
	endif
	LabelPad 10, { }
	ColorPad 13, col_unused
	ColorPad 14, col_unused
	ColorPad 15, col_unused
	LabelPad 13, { }
	LabelPad 14, { }
	LabelPad 15, { }
@End

@LabelScenePad
	//# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, {S}, scn_to_label+1, { [}, sc_dur, { bars]}
@End

@SetupLayoutAutom
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 2
		LabelPad i, {autom }, i
	endfor
@End

@SetupLayoutMacros
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 6
		LabelPad i, {Macros}, i
	endfor
@End
	
@SetupLayoutLFOS
	ShowLayout 0
	for i = 0 to 4
		ColorPad i, 6
		LabelPad i, {D}, i+1
	endfor
@End

@LabelAutomationKnobs
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i]
	endfor
	for i = 0 to 7
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i), HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i
		LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i) % HostBeatsPerMeasure)+1
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 11 to 18
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i-3) , HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
	  LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i-3) % HostBeatsPerMeasure)+1
		data_slot = ((song_bar - scene_durs[auto_scene] + auto_adv_bar)*HostBeatsPerMeasure) + i - 3
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	ch=automation_chs[auto_lane]
	cc=automation_ccs[auto_lane]
	LabelKnob 8, {Min}, auto_ramp_min 
	LabelKnob 19, {Max}, auto_ramp_max 
	LabelKnob 9, {Lane }, auto_lane+1
	LabelKnob 10, {Scene }, auto_scene+1
	LabelKnob 20, {Ramp}, auto_ramp
	LabelKnob 21, {Bar }, song_bar + auto_adv_bar - scene_durs[auto_scene] + 1 
	LabelKnobs {[ch},ch, { cc}, cc, {] AUTOMATION: Lane: }, auto_lane+1, {   Scene }, auto_scene+1, { Bars: }, song_bar-scene_durs[auto_scene]+1, { to }, song_bar
@End

@GetAutoValueAtDataSlot
	// Sets var break_point to the value stored in auto_data array at data_slot
	if auto_lane=0
		break_point = auto_data_ch0[data_slot]
	elseif auto_lane=1
		break_point = auto_data_ch1[data_slot]
	elseif auto_lane=2
		break_point = auto_data_ch2[data_slot]
	elseif auto_lane=3
		break_point = auto_data_ch3[data_slot]
	elseif auto_lane=4
		break_point = auto_data_ch4[data_slot]
	elseif auto_lane=5
		break_point = auto_data_ch5[data_slot]
	elseif auto_lane=6
		break_point = auto_data_ch6[data_slot]
	elseif auto_lane=7
		break_point = auto_data_ch7[data_slot]
	elseif auto_lane=8
		break_point = auto_data_ch8[data_slot]
	elseif auto_lane=9
		break_point = auto_data_ch9[data_slot]
	elseif auto_lane=10
		break_point = auto_data_ch10[data_slot]
	elseif auto_lane=11
		break_point = auto_data_ch11[data_slot]
	elseif auto_lane=12
		break_point = auto_data_ch12[data_slot]
	elseif auto_lane=13
		break_point = auto_data_ch13[data_slot]
	elseif auto_lane=14
		break_point = auto_data_ch14[data_slot]
	elseif auto_lane=15
		break_point = auto_data_ch15[data_slot]
	endif	
@End

@UpdateAutomationPoint
	//# requires the slot to update as data_slot and value as break_point
	if auto_lane=0
		auto_data_ch0[data_slot] = break_point
	elseif auto_lane=1
		auto_data_ch1[data_slot] = break_point
	elseif auto_lane=2
		auto_data_ch2[data_slot] = break_point
	elseif auto_lane=3
		auto_data_ch3[data_slot] = break_point
	elseif auto_lane=4
		auto_data_ch4[data_slot] = break_point
	elseif auto_lane=5
		auto_data_ch5[data_slot] = break_point
	elseif auto_lane=6
		auto_data_ch6[data_slot] = break_point
	elseif auto_lane=7
		auto_data_ch7[data_slot] = break_point
	elseif auto_lane=8
		auto_data_ch8[data_slot] = break_point
	elseif auto_lane=9
		auto_data_ch9[data_slot] = break_point
	elseif auto_lane=10
		auto_data_ch10[data_slot] = break_point
	elseif auto_lane=11
		auto_data_ch11[data_slot] = break_point
	elseif auto_lane=12
		auto_data_ch12[data_slot] = break_point
	elseif auto_lane=13
		auto_data_ch13[data_slot] = break_point
	elseif auto_lane=14
		auto_data_ch14[data_slot] = break_point
	elseif auto_lane=15
		auto_data_ch15[data_slot] = break_point
	endif
@End

@SendAutomationData
	//# Change this to be based on current_scene_beat or something
  auto_data_slot = HostBar*HostBeatsPerMeasure + HostBeat
	if auto_data_ch0[auto_data_slot] >= 0
		SendMIDICC automation_chs[0], automation_ccs[0], auto_data_ch0[auto_data_slot]
	endif
	if auto_data_ch1[auto_data_slot] >= 0
		SendMIDICC automation_chs[1], automation_ccs[1], auto_data_ch1[auto_data_slot]
	endif
	if auto_data_ch2[auto_data_slot] >= 0
		SendMIDICC automation_chs[2], automation_ccs[2], auto_data_ch2[auto_data_slot]
	endif
	if auto_data_ch3[auto_data_slot] >= 0
		SendMIDICC automation_chs[3], automation_ccs[3], auto_data_ch3[auto_data_slot]
	endif
	if auto_data_ch4[auto_data_slot] >= 0
		SendMIDICC automation_chs[4], automation_ccs[4], auto_data_ch4[auto_data_slot]
	endif
	if auto_data_ch5[auto_data_slot] >= 0
		SendMIDICC automation_chs[5], automation_ccs[5], auto_data_ch5[auto_data_slot]
	endif
	if auto_data_ch6[auto_data_slot] >= 0
		SendMIDICC automation_chs[6], automation_ccs[6], auto_data_ch6[auto_data_slot]
	endif
	if auto_data_ch7[auto_data_slot] >= 0
		SendMIDICC automation_chs[7], automation_ccs[7], auto_data_ch7[auto_data_slot]
	endif
	if auto_data_ch8[auto_data_slot] >= 0
		SendMIDICC automation_chs[8], automation_ccs[8], auto_data_ch8[auto_data_slot]
	endif
	if auto_data_ch9[auto_data_slot] >= 0
		SendMIDICC automation_chs[9], automation_ccs[9], auto_data_ch9[auto_data_slot]
	endif
	if auto_data_ch10[auto_data_slot] >= 0
		SendMIDICC automation_chs[10], automation_ccs[10], auto_data_ch10[auto_data_slot]
	endif
	if auto_data_ch11[auto_data_slot] >= 0
		SendMIDICC automation_chs[11], automation_ccs[11], auto_data_ch11[auto_data_slot]
	endif
	if auto_data_ch12[auto_data_slot] >= 0
		SendMIDICC automation_chs[12], automation_ccs[12], auto_data_ch13[auto_data_slot]
	endif
	if auto_data_ch13[auto_data_slot] >= 0
		SendMIDICC automation_chs[13], automation_ccs[13], auto_data_ch13[auto_data_slot]
	endif
	if auto_data_ch14[auto_data_slot] >= 0
		SendMIDICC automation_chs[14], automation_ccs[14], auto_data_ch14[auto_data_slot]
	endif
	if auto_data_ch15[auto_data_slot] >= 0
		SendMIDICC automation_chs[15], automation_ccs[15], auto_data_ch15[auto_data_slot]
	endif
@End
 
@LabelAutomPad
	Log {Label pad}
	ColorPad pad_to_label, automation_cols[pad_slot]
	label_num = automation_labels[pad_slot] // any pad any label except cc in protected range
	ch=automation_chs[pad_slot]+1
	cc=automation_ccs[pad_slot]
	if (label_num=0) 
		LabelPad pad_to_label, {        }, { __________ }, { ch},ch, { cc}, cc //NOT ASSIGNED
	elseif (label_num=1)
		LabelPad pad_to_label, {VOL}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=2)
		LabelPad pad_to_label, {DRY/WET}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=3)
		LabelPad pad_to_label, {SEND A DLY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=4)
		LabelPad pad_to_label, {SEND B RVB}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=5)
		LabelPad pad_to_label, {HPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=6)
		LabelPad pad_to_label, {LPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=7)
		LabelPad pad_to_label, {F.CUTOFF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=8)
		LabelPad pad_to_label, {F.RESON}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=9)
		LabelPad pad_to_label, {FX1 DW}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=10)
		LabelPad pad_to_label, {FX1 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=11)
		LabelPad pad_to_label, {FX2 DW}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=12)
		LabelPad pad_to_label, {FX2 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=13)
		LabelPad pad_to_label, {NOISE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=14)
		LabelPad pad_to_label, {PITCH}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=15)
		LabelPad pad_to_label, {OCTAVE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=16)
		LabelPad pad_to_label, {OSC A VOL}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=17)
		LabelPad pad_to_label, {OSC B VOL}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=18)
		LabelPad pad_to_label, {ATTACK}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=19)
		LabelPad pad_to_label, {DECAY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=20)
		LabelPad pad_to_label, {SUSTAIN}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=21)
		LabelPad pad_to_label, {RELEASE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=22)
		LabelPad pad_to_label, {ENV AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=23)
		LabelPad pad_to_label, {MORPH}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=24)
		LabelPad pad_to_label, {RIBBON}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=25)
		LabelPad pad_to_label, {MOD WHEEL}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=26)
		LabelPad pad_to_label, {MOD AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=27)
		LabelPad pad_to_label, {TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=28)
		LabelPad pad_to_label, {LFO1 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=29)
		LabelPad pad_to_label, {LFO1 RATE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=30)
		LabelPad pad_to_label, {LFO2 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=31)
		LabelPad pad_to_label, {LFO2 RATE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=32)
		LabelPad pad_to_label, {DELAY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=33)
		LabelPad pad_to_label, {REVEB}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=34)
		LabelPad pad_to_label, {CHORUS}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=35)
		LabelPad pad_to_label, {PHASER}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=36)
		LabelPad pad_to_label, {SATURATE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=37)
		LabelPad pad_to_label, {DISTORT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=38)
		LabelPad pad_to_label, {FEEDBACK}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=39)
		LabelPad pad_to_label, {SIZE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=40)
		LabelPad pad_to_label, {TIME}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=41)
		LabelPad pad_to_label, {BRIGHTNESS}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=42)
		LabelPad pad_to_label, {WIDTH}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=43)
		LabelPad pad_to_label, {ARP DUR.}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=44)
		LabelPad pad_to_label, {ARP TIME}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=45)
		LabelPad pad_to_label, {SPEED}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=46)
		LabelPad pad_to_label, {SHAPE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=47)
		LabelPad pad_to_label, {DRIVE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=48)
		LabelPad pad_to_label, {BEAT DIV.}, { __________ }, { ch},ch, { cc}, cc
	else
	  LabelPad pad_to_label, { ??? }, { __________ }, { ch},ch, { cc#}, cc
	endif
	@End