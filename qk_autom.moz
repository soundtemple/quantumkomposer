//# SPLIT OFF FROM KNTRL ON 26SEP
//# MOZAIC KOMPOSER SUITE
//# AUTOM APP
//# Handles automation, lfo's and macros
@OnLoad
	SetShortName {AUTOM} 
	ShowLayout 2
	LabelPads {[ QK:AUTOM ]}
	if unassigned scene_durs //# duration in first scene
		mode = 0 //# 0Scenes, 1Channels, 2Kontrol, 3Autom., 4LFOS
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:ChordLocked
		scene_slave_mode=FALSE //instant scene chg on msg from KNTRL as opposed to onPadDown use internal scn clock
		// ^^^ should be FALSE when used with KNTRL. TRUE when used with SCENEMASTER
		edit_mode_active=FALSE //in edit mode use 20knob layout to step edit each beat
		SetMetroPPQN 4
		ppqn = 4
		knob_set=0
		edit_scene=0
		locked_to_scene=0
		current_scene=0
		scene_change_requested = -1 //# on pad down has next scene number
		in_mode_select = TRUE //# Toggle for changing modes mode
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		print_preset=TRUE
		interpolate_autom=TRUE
		send_automation_data_enabled=TRUE // toggle to disable temporarily
		FillArray interpolation_buffer, -1, 48
		last_pad_again=FALSE
		Call @GetAutoRamps
		Call @InitKnobVariables //# All knob settings on start
		Call @SetupSettingsLayout
		knob_set=1
		Call @SetupKnobset1
	endif
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	current_scene = 0 // #0-7 Pads 0-7
	scene_durs=[0,0,0,0,0,0,0,0]
	scene_names=[0,1,2,3,4,5,6,7]
	scene_presets=[]
	//# Color Scheme
	col_scene = 2
	col_sel_scene = 4
	col_edit_scene = 3
	col_pending = 3
	loop_col = 6
	col_warn = 1
	col_mode_select = 4 //# Mode selection buttons
	col_unused = 0
	col_mode_edit = 6 //# Mode selection buttons in edit mode
	cc_rtn_to_song_mode=9
	cc_swing=10
	
	// Commmunications from KNTRL
	cc_scene_duration=101 //+ scene_num0-7 ie 101-108
	cc_rtn_to_song_mode=22
	cc_swing=23
	
	//AUTOMATION SECTION VARS
	auto_ramp_max=127 //range for the ramp to be applied
	auto_ramp_min=0
	auto_lane=0 //0-15 slots available for automation
	auto_scene=0 //# scene being automated
	auto_ramp=0 //# apply a ramp set of automation values to a set of bars
	auto_adv_bar=0 //# scroll through scene to see automation
	sel_autom_pad=0 //# selected automation pad for editing
	autom_setup_mode=0 //0=setup ; 1=control_autom ; 2=record_autom
	record_autom_on=FALSE //# record automation 
	control_autom_on=FALSE // control the autom parameters 
	FillArray autom_control_vals, 0, 16
	FillArray min_vals_rec_cont, 0, 16
	FillArray max_vals_rec_cont, 127, 16
	FillArray rec_auto_buffer, -1, 16 // rec buffer. vals get added here and update points on beat if>=0
	FillArray auto_data_ch0, -1, 1024
	FillArray auto_data_ch1, -1, 1024
	FillArray auto_data_ch2, -1, 1024
	FillArray auto_data_ch3, -1, 1024
	FillArray auto_data_ch4, -1, 1024
	FillArray auto_data_ch5, -1, 1024
	FillArray auto_data_ch6, -1, 1024
	FillArray auto_data_ch7, -1, 1024
	FillArray auto_data_ch8, -1, 1024
	FillArray auto_data_ch9, -1, 1024
	FillArray auto_data_ch10, -1, 1024
	FillArray auto_data_ch11, -1, 1024
	FillArray auto_data_ch12, -1, 1024
	FillArray auto_data_ch13, -1, 1024
	FillArray auto_data_ch14, -1, 1024
	FillArray auto_data_ch15, -1, 1024
	FillArray automation_ccs, 0, 16 //the cc num automation gets sent on 
	FillArray automation_chs, 0, 16 //the channel automation gets sent on
	FillArray automation_cols, 0, 16 //the pad color for the automation slot
	FillArray automation_labels, 0, 16 //Label for the automation slot
	
	FillArray automation_chs,-1,16 //# knobs used to store and locate the param to automate
	FillArray automation_pads,-1,16 //# knobs used to store and locate the param to automate
	
	automation_labels = [42,43,44,45,  42,43,44,45,  42,43,44,45,  42,43,44,45]
	automation_chs    = [12,12,12,12,  12,12,12,12,  12,12,12,12,  12,12,12,12]
	automation_ccs    = [40,41,117,39, 56,57,118,55, 72,73,119,71, 88,89,120,87]
	automation_cols   = [2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5]
	
	//MACRO SECTION
	sel_macro=0 //# currently selected for editing
	macro_chans=[] //4 macros each with 4 assignable slots from the 16 channels and their 16 params
	macro_params=[]
	m1_vals=[0,0,0,0]
	m2_vals=[0,0,0,0]
	m3_vals=[0,0,0,0]
	m4_vals=[0,0,0,0]
	
	//LFO SECTION VARS
	lfo_num=0
	dest_num=0
	lfo_dests=[-1,0,-1,0,-1,0,  -1,0,-1,0,-1,0,-1,0] //#2LFO's 4 destinations calc'd by CH and PAD. -1 so no labelling
	lfo_types=[3,4] //# Ramp, Sine etc...
	lfo_freqs=[0.5, 0.5]
	lfo_syncs=[TRUE, TRUE]
	lfo_xmods=[0,0]
	autom_scene=[0,0] //current scene selected for editing in each LFO
	autom_bar=[1,1] //current bar selected for editing in each LFO
	//# stored this way so we can preserve changes if scene lengths change in preceding scenes...
	FillArray lfo_autom_amts, -1, 32*8*2 //# amt saved per bar -1 value=notsent. 8scenes, upto 32bars, 2lfos
	SetLFOType 0, {RampUp} //{Sine}, {Cosine}, {Square}, {Triangle}, {RampUp}, {RampDown}, {SH}
	SetLFOType 1, {RampDown}
	SetupLFO 0, 0, 127, YES, 0.5
	SetupLFO 1, 0, 127, YES, 0.5
@End

@ResetAutomToPosition
	//Return autom to reset_position eg: edit_scene * 128 would be beginning of edit_scene
	//Log {edit scene: }, edit_scene, { reset pos: }, reset_position, { cc: }, automation_ccs[0], { Clip: }, (Clip auto_data_ch0[reset_position], 0, 127)
	if automation_labels[0] > 0
		SendMIDICC automation_chs[0], automation_ccs[0], (Clip auto_data_ch0[reset_position], 0, 127)
	endif
	if automation_labels[1] > 0
		SendMIDICC automation_chs[1], automation_ccs[1], (Clip auto_data_ch1[reset_position], 0, 127)
	endif
	if automation_labels[2] > 0
		SendMIDICC automation_chs[2], automation_ccs[2], (Clip auto_data_ch2[reset_position], 0, 127)
	endif
	if automation_labels[3] > 0
		SendMIDICC automation_chs[3], automation_ccs[3], (Clip auto_data_ch3[reset_position], 0, 127)
	endif
	if automation_labels[4] > 0
		SendMIDICC automation_chs[4], automation_ccs[4], (Clip auto_data_ch4[reset_position], 0, 127)
	endif
	if automation_labels[5] > 0
		SendMIDICC automation_chs[5], automation_ccs[5], (Clip auto_data_ch5[reset_position], 0, 127)
	endif
	if automation_labels[6] > 0
		SendMIDICC automation_chs[6], automation_ccs[6], (Clip auto_data_ch6[reset_position], 0, 127)
	endif
	if automation_labels[7] > 0
		SendMIDICC automation_chs[7], automation_ccs[7], (Clip auto_data_ch7[reset_position], 0, 127)
	endif
	if automation_labels[8] > 0
		SendMIDICC automation_chs[8], automation_ccs[8], (Clip auto_data_ch8[reset_position], 0, 127)
	endif
	if automation_labels[9] > 0
		SendMIDICC automation_chs[9], automation_ccs[9], (Clip auto_data_ch9[reset_position], 0, 127)
	endif
	if automation_labels[10] > 0
		SendMIDICC automation_chs[10], automation_ccs[10], (Clip auto_data_ch10[reset_position], 0, 127)
	endif
	if automation_labels[11] > 0
		SendMIDICC automation_chs[11], automation_ccs[11], (Clip auto_data_ch11[reset_position], 0, 127)
	endif
	if automation_labels[12] > 0
		SendMIDICC automation_chs[12], automation_ccs[12], (Clip auto_data_ch12[reset_position], 0, 127)
	endif
	if automation_labels[13] > 0
		SendMIDICC automation_chs[13], automation_ccs[13], (Clip auto_data_ch13[reset_position], 0, 127)
	endif
	if automation_labels[14] > 0
		SendMIDICC automation_chs[14], automation_ccs[14], (Clip auto_data_ch14[reset_position], 0, 127)
	endif
	if automation_labels[15] > 0
		SendMIDICC automation_chs[15], automation_ccs[15], (Clip auto_data_ch15[reset_position], 0, 127)
	endif
	FillArray interpolation_buffer, -1, 48
@End

@OnHostStart
	//# keep track of scene progress
	Log HostBar, { : }, HostBeat, { = }, (HostBeatsPerMeasure * HostBar) + HostBeat
	if (HostBeat = 0) and (HostBar = 0)
		//# starting playback from beginning		
		scene_beat_count = -1
		scene_changed = FALSE
		if (songmode = 0)
			current_scene = 0
		endif
	else
		//# continuing playback
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
	endif
	//Log {---- Host Started ----}
@End

@OnHostStop
  scene_beat_count = 0
	record_autom_on=FALSE
	FillArray rec_auto_buffer, -1, 16 //empty record auto buffer
  //Log {---- Host Stopped ---- }, scene_beat_count, { - }
@End 

@OnNewBeat
	//# increment beat counts xonb
	scene_beat_count = scene_beat_count + 1
	//# Handle Scene and Chord changes
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	
	if (scene_change_requested > -1) and (HostBeat = 0)
		//# user requested scene change and its a new bar (& return to song)
		//# Log {Handling scene change request. It a new bar}
		Call @HandleSceneChange
	elseif (scene_beat_count >= current_scene_duration)
		//# its time to increment scene
		Call @HandleSceneChange
	endif
	Call @LogCurrentInfo
	Call @StoreRecordAutoData
@End

@OnMetroPulse
	//send interpolated autom data inbetween OnNewBeat (HostBeat=0) automation data
  cmp_mod=CurrentMetroPulse%4
	if send_automation_data_enabled
		if cmp_mod = 0 //on the beat
			Call @SendAutomationData
		elseif interpolate_autom and (cmp_mod>=1 and cmp_mod<=3) and (cmp_mod+1 <= HostBeatsPerMeasure)
			for i = 0 to 15
				if interpolation_buffer[(i*3) + (cmp_mod-1)] >= 0
					SendMidiCC automation_chs[i], automation_ccs[i], interpolation_buffer[(i*3) + (cmp_mod-1)]
					// Log {Buffer pulse val: }, interpolation_buffer[(i*3) + (cmp_mod-1)], { CMP:}, cmp_mod, { CH:}, i
				endif
			endfor
		endif
	endif
@End

@OnNewBar
@End

@OnMidiCC
	//# Messages from KONTROLLER to update scene durs and play status for all instances in the KOMPOSER SUITE
	//Log {MIDI RECEIVED: }, MIDIChannel, MIDIByte2, MIDIByte3 
	if (MIDIByte2>=cc_scene_duration) and (MIDIByte2<=(cc_scene_duration+7)) and (MIDIChannel=15)
		//# handle scene duration change
		scene_durs[MIDIByte2-cc_scene_duration] = MIDIByte3
		if mode=0
			Call @SetupLayoutScenes
		endif
	elseif (MIDIByte2=100) and (MIDIChannel=15) and (MIDIByte3<=7) and not scene_slave_mode
		//# handle scene change requested (ie: PadDown Scene change)
		scene_change_requested = MIDIByte3
		if NOT HostRunning //# immediate change else newbeat/bar handles
  		Call @HandleSceneChange
			edit_scene=scene_change_requested	
  	endif
		in_mode_select = FALSE
		mode=0
		Call @SetupLayoutScenes
	elseif (MIDIByte2>=109) and (MIDIByte2<=116) and (MIDIByte3=127) and scene_slave_mode
		//Instant scene change
		scene_change_requested = MIDIByte2-109
		Call @HandleSceneChange
		edit_scene=scene_change_requested	
		in_mode_select = FALSE
		mode=0
		Call @SetupLayoutScenes
	elseif (HostRunning and MIDIByte2=cc_rtn_to_song_mode and MIDIByte3>0)
  	//# handle return to song mode requested
  	return_to_song_mode_requested = TRUE
  	// scene_change_requested = current_scene no scn chg just continue
  	in_mode_select = FALSE
  	songmode = 0
  	mode = 0
  	ColorPad current_scene, 3
    ColorPad 8, 3
	elseif (MIDIByte2=cc_rtn_to_song_mode and MIDIByte3>0 and not HostRunning)
		return_to_song_mode_requested = TRUE
		in_mode_select = FALSE
  	songmode = 0
  	mode = 0
		current_scene=0
  	Call @SetupLayoutScenes
		ColorPad current_scene, 3
    ColorPad current_pattn+8, 3
  elseif (MIDIByte2=cc_swing) //# Global swing
  	swng=MIDIByte3
  	scene_swing=[swng,swng,swng,swng,swng,swng,swng,swng]
  	Call @SetupLayoutScenes
	elseif (MIDIByte2=89 and MIDIChannel=15) //copy paste scene
		if MIDIByte3<=7 //handle copy scene
			copied_scene = MIDIByte3
			LabelPads {Scene }, MIDIByte3+1, { copied. Ready to paste}
		elseif MIDIByte3>=8 and MIDIByte3<=15 //handle scene paste
			paste_to_scene = MIDIByte3-8
			LabelPads {Copied scene }, copied_scene+1, { to scene }, paste_to_scene+1
			CopyArray auto_data_ch0[copied_scene*128], auto_data_ch0[paste_to_scene*128], 128 
			CopyArray auto_data_ch1[copied_scene*128], auto_data_ch1[paste_to_scene*128], 128
			CopyArray auto_data_ch2[copied_scene*128], auto_data_ch2[paste_to_scene*128], 128
			CopyArray auto_data_ch3[copied_scene*128], auto_data_ch3[paste_to_scene*128], 128
			CopyArray auto_data_ch4[copied_scene*128], auto_data_ch4[paste_to_scene*128], 128
			CopyArray auto_data_ch5[copied_scene*128], auto_data_ch5[paste_to_scene*128], 128
			CopyArray auto_data_ch6[copied_scene*128], auto_data_ch6[paste_to_scene*128], 128
			CopyArray auto_data_ch7[copied_scene*128], auto_data_ch7[paste_to_scene*128], 128
			CopyArray auto_data_ch8[copied_scene*128], auto_data_ch8[paste_to_scene*128], 128
			CopyArray auto_data_ch9[copied_scene*128], auto_data_ch9[paste_to_scene*128], 128
			CopyArray auto_data_ch10[copied_scene*128], auto_data_ch10[paste_to_scene*128], 128
			CopyArray auto_data_ch11[copied_scene*128], auto_data_ch11[paste_to_scene*128], 128
			CopyArray auto_data_ch12[copied_scene*128], auto_data_ch12[paste_to_scene*128], 128
			CopyArray auto_data_ch13[copied_scene*128], auto_data_ch13[paste_to_scene*128], 128
			CopyArray auto_data_ch14[copied_scene*128], auto_data_ch14[paste_to_scene*128], 128
			CopyArray auto_data_ch15[copied_scene*128], auto_data_ch15[paste_to_scene*128], 128
			scene_durs[paste_to_scene] = scene_durs[copied_scene]
		endif
	endif
@End


@OnShiftDown
	//Log {MODE: }, mode
	if in_mode_select //# Exit SHIFT MODE
		in_mode_select = FALSE	
		if mode=0
			Call @SetupLayoutScenes
		elseif mode=2 //AUTOM
			Call @LabelAutomationPads
			Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
		elseif mode=3 //MACROS
			in_mode_select = FALSE
			LabelPads {AUTOM : [ MACROS ] }
			ShowLayout 2
			for i = 0 to 15
				LatchPad i, NO 
				pad_to_label=i 
				pad_slot=(macro_chans[i] * 16) + macro_params[i] 
				Call @LabelAutomPad
			endfor
			LatchPad sel_macro, YES 
			if edit_mode_active
				Call @SetupKnobset11
			else
				Call @SetupKnobset12
			endif
		elseif mode=4 //LFOS
			Call @SetupLayoutLFOS
		endif
		Call @UpdateCurrentKnobset		
	else //not in mode select
		Call @SetupSettingsLayout
		knob_set=1
		Call @SetupKnobset1
		Call @UpdateCurrentKnobset
		LabelPads {AUTOM : [ SETTINGS ]}
	endif
@End

@OnShiftUp
@End

@OnPadDown
	pad_is_down = TRUE
	//# Pad Down actions
	if in_mode_select
		if LastPad=0
		  in_mode_select = FALSE
			mode=0 //SCENES
			Call @SetupKnobset0
			Call @SetupLayoutScenes
		elseif LastPad=1
			reset_position = edit_scene*128
			Call @ResetAutomToPosition
			LabelPad 1, {AUTOM RESET TO START S}, edit_scene+1
		elseif LastPad=2
			last_beat_in_scene = (scene_durs[edit_scene] * 4) - 1
			reset_position = (edit_scene*128) + last_beat_in_scene
			Call @ResetAutomToPosition
			LabelPad 2, {AUTOM RESET TO END S}, edit_scene+1
		elseif LastPad=3
			autom_setup_mode = autom_setup_mode+1
			if autom_setup_mode>2
				autom_setup_mode=0
			endif
			if autom_setup_mode=0
				record_autom_on=FALSE
				control_autom_on=FALSE
			elseif autom_setup_mode=1
				record_autom_on=FALSE
				control_autom_on=TRUE
			else
				record_autom_on=TRUE
				control_autom_on=FALSE
			endif
			FillArray rec_auto_buffer, -1, 16 //empty record auto buffer
			Call @SetupSettingsLayout
		elseif LastPad=4 // SETUP AUTOM LANES
			edit_mode_active = FALSE
			mode=2 //AUTOMATION
			in_mode_select = FALSE
			Call @LabelAutomationPads
			Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
			LatchPad sel_autom_pad, YES	
		elseif LastPad=5
			edit_mode_active = TRUE
			mode=2 //AUTOMATION
			in_mode_select = FALSE
			Call @LabelAutomationPads
			Call @SetupKnobset4 //# AUTOM and thru to editing
			LatchPad sel_autom_pad, YES
		elseif LastPad=6
			interpolate_autom = not interpolate_autom
			Call @SetupSettingsLayout	
		elseif LastPad=7
			send_automation_data_enabled = not send_automation_data_enabled
		  Call @SetupSettingsLayout
		elseif LastPad>=8
		  // AUTOM SCENE SET TASKS
			scene_task=LastPad 
			Call @AutomSceneTasks
		endif
	elseif NOT in_mode_select
		if mode=0  //SCENES MODE
			Call @PadDownScenesMode
		elseif mode=2 // AUTOM. mode
			Call @PadDownAutomMode
		elseif mode=3 // MACROS mode
			Call @PadDownMACROSMode
		elseif mode=4 // LFO's mode
			Call @PadDownLFOSMode
		endif
	endif
	//LOG {MODE: }, mode
@End

@OnPadUp
  pad_is_down = FALSE
@End

@AutomSceneTasks
	// requires scene_task variable 8-15
	auto_lane = sel_autom_pad
	min=auto_ramp_min
	max=auto_ramp_max
	mid=Div (auto_ramp_min+auto_ramp_max), 2
	//get the value to set autom to
	if scene_task=8 //min
		val=min
	elseif scene_task=9 //mid
		val=mid	
	elseif scene_task=10 //max
	  val=max
	elseif scene_task>=13 // reset tasks
	  val=-1
	endif
	
	//get num cells and location and then call copy paste
	auto_data_to_paste = []
	if scene_task=8 or scene_task=9 or scene_task=10 or scene_task=13
		auto_data_slot = (edit_scene*128)
		num_cells_to_copy=128
		FillArray auto_data_to_paste, val, num_cells_to_copy
		Call @AutomTaskCopyPaste
	elseif scene_task=11 // ramp up
		ramp_length = (scene_durs[edit_scene] * HostBeatsPerMeasure) - 1 //less 1 starting from 0
		for i = 0 to ramp_length 
			data_slot = (edit_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + i
			ramp_val = (i/ramp_length * 127)
			break_point = Clip (Round ((ramp_val / 127 * (auto_ramp_max-auto_ramp_min)) + auto_ramp_min)), 0, 127
			data_slot = (edit_scene*128)+i 
			// log {Breakpoint }, break_point, { at slot }, data_slot
			Call @UpdateAutomationPoint
		endfor
	elseif scene_task=12 // ramp down
		ramp_length = (scene_durs[edit_scene] * HostBeatsPerMeasure) - 1 //less 1 starting from 0
		for i = 0 to ramp_length 
			data_slot = (edit_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + i
			ramp_val = 127 - (i/ramp_length * 127)
			break_point = Clip (Round ((ramp_val / 127 * (auto_ramp_max-auto_ramp_min)) + auto_ramp_min)), 0, 127
			data_slot = (edit_scene*128)+i 
			// log {Breakpoint }, break_point, { at slot }, data_slot
			Call @UpdateAutomationPoint
		endfor
	elseif scene_task=14 //reset all autom pads this scene
	  auto_data_slot = (edit_scene*128)
		num_cells_to_copy = 128
		FillArray auto_data_to_paste, val, num_cells_to_copy
		previous_auto_lane = auto_lane
		for i = 0 to 15
			auto_lane=i
			Call @AutomTaskCopyPaste
		endfor
		auto_lane = previous_auto_lane
	elseif scene_task=15 //reset all scenes all autom pads
		auto_data_slot = 0
		num_cells_to_copy = 1024
		FillArray auto_data_to_paste, val, num_cells_to_copy
		previous_auto_lane = auto_lane
		for i = 0 to 15
			auto_lane=i
			Call @AutomTaskCopyPaste
		endfor
		auto_lane = previous_auto_lane
	endif
	ColorPad scene_task, 3
	LabelPad scene_task, {Done!}
	SetTimerInterval 1000
	StartTimer
@End

@OnTimer
  Call @SetupSettingsLayout
	StopTimer
@End


@AutomTaskCopyPaste
	// requires source data as auto_data_to_paste and num_cells_to_copy and auto_data_slot
	if auto_lane = 0
		CopyArray auto_data_to_paste, auto_data_ch0[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 1
		CopyArray auto_data_to_paste, auto_data_ch1[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 2
		CopyArray auto_data_to_paste, auto_data_ch2[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 3
		CopyArray auto_data_to_paste, auto_data_ch3[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 4
		CopyArray auto_data_to_paste, auto_data_ch4[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 5
		CopyArray auto_data_to_paste, auto_data_ch5[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 6
		CopyArray auto_data_to_paste, auto_data_ch6[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 7
		CopyArray auto_data_to_paste, auto_data_ch7[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 8
		CopyArray auto_data_to_paste, auto_data_ch8[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 9
		CopyArray auto_data_to_paste, auto_data_ch9[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 10
		CopyArray auto_data_to_paste, auto_data_ch10[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 11
		CopyArray auto_data_to_paste, auto_data_ch11[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 12
		CopyArray auto_data_to_paste, auto_data_ch12[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 13
		CopyArray auto_data_to_paste, auto_data_ch13[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 14
		CopyArray auto_data_to_paste, auto_data_ch14[auto_data_slot], num_cells_to_copy
	elseif auto_lane = 15
		CopyArray auto_data_to_paste, auto_data_ch15[auto_data_slot], num_cells_to_copy
	endif
@End


@PadDownScenesMode
	if mode=0 and (LastPad >= 0 and LastPad <= 7) //SCENES MODE
		//Log { SCENE CHANGE REQUESTED }
		scene_change_requested = LastPad
		songmode=1 //# Lock to selected scene
		edit_scene=LastPad
		locked_to_scene=LastPad
		if NOT HostRunning //# immediate change else newbeat/bar handles
			Call @HandleSceneChange 
		endif
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	elseif mode=0 and LastPad=8
		songmode=0 //# return to song mode
	elseif mode=0 and LastPad=9
		return_to_song_mode_requested = TRUE
  	scene_change_requested = current_scene
  	songmode = 0
  	ColorPad 0, col_pending
    ColorPad 8, col_pending
		LabelPads {KNTRL: [ LOOPING SONG ] }
		Call @SetupKnobset0
		Call @SetupLayoutScenes
	endif
@End

@PadDownLFOSMode
	dest_num=LastPad
	Call @SetupKnobset6
@End

@PadDownMACROSMode
	macro_num = (Div LastPad, 4) + 1
	param_num = (LastPad % 4) + 1	
	sel_macro=LastPad 
	LabelPads {AUTOM : [ MACRO }, macro_num, { PARAM }, param_num, { ]}
	for i = 0 to 15
		LatchPad i, no 
	endfor
	LatchPad sel_macro, YES
	if edit_mode_active
		Call @SetupKnobset11
	endif
@End

@PadDownAutomMode
	if LastPad = sel_autom_pad
		last_pad_again=TRUE
	endif
	sel_autom_pad=LastPad
	if edit_mode_active
		auto_lane=LastPad 
		auto_scene=edit_scene
		Call @SetupLayoutAutom
		Call @SetupKnobset5 //# AUTOM. Edit indiv steps with 20knobs layout	
	else
		if last_pad_again
			rec_auto_buffer[sel_autom_pad] = -1 // reset record for pad if double tapped
		endif
		Call @SetupKnobset4 //# AUTOM. Set up 16 parameters
		for i = 0 to 15
			LatchPad i, no 
		endfor
		LatchPad sel_autom_pad, YES
	endif
	last_pad_again=FALSE
@End

@HandleSceneChange
	//# Work out which scene is next xhsc
	scene_changed = TRUE
  if scene_change_requested > -1
  	current_scene = scene_change_requested
  	if return_to_song_mode_requested
  		songmode = 0
			ColorPad current_scene, col_pending
		else
	  	songmode = 1 //# lock to scene if user requests
  	endif
  	return_to_song_mode_requested = FALSE
		scene_change_requested = -1
  elseif (songmode > 0)
  	current_scene = current_scene
  elseif (current_scene = 7) //# End of song. Loop back to beginning 
    current_scene = 0 
  elseif scene_durs[current_scene + 1] <= 0
  	//# also song end
  	current_scene = 0 //# no duration in next scene return to beginning
  else
		current_scene = current_scene + 1 //# Going to next
  endif
  scene_beat_count = 0
  if mode=0
		Call @SetupLayoutScenes
	endif
	//Log {----- SCENE CHANGE -----}, {S}, current_scene+1, { -- PLAYBACK BAR: --}
@End

@LogCurrentInfo
	current_scene_duration = scene_durs[current_scene]
	// Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { HostBeat: }, HostBeat+1
	LabelPads {[ AUTOM ]    Scene}, current_scene+1, {   Bar}, (Div scene_beat_count, HostBeatsPerMeasure)+1, {   Beat }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure) 
@End

@SetupSettingsLayout
	// #Label all settings mode pads
	in_mode_select = TRUE
	ShowLayout 2
	LabelPads {AUTOM : [ SETTINGS ]}
	autom_settings_pad_cols = [4,4,4,0,4,4,0,0,  2,2,2,2,2,1,1,1]
	for i = 0 to 15
		ColorPad i, autom_settings_pad_cols[i]
		LatchPad i, NO
	endfor
	ch=automation_chs[sel_autom_pad]+1
	cc=automation_ccs[sel_autom_pad]
	scn=edit_scene+1
	sap=sel_autom_pad+1
	min=auto_ramp_min
	max=auto_ramp_max
	mid=Div (auto_ramp_min+auto_ramp_max), 2
	LabelPad 0, {SCENES}
	LabelPad 1, {SET AUTOM TO START S}, edit_scene+1
	LabelPad 2, {SET AUTOM TO END S}, edit_scene+1
	if record_autom_on
		LabelPads {AUTOM : [ Record autom parameters during playback. Use rec knob in setup ]}
		ColorPad 3, 1
		LabelPad 3, {MODE=> RECORD}
		LabelPad 4, {AUTOM RECORD}
		ColorPad 4, 1
	elseif control_autom_on
	  LabelPads {AUTOM : [ Control autom parameters ]}
		ColorPad 3, 3
		LabelPad 3, {MODE=> CONTROL}
		LabelPad 4, {AUTOM CONTROL}
		ColorPad 4, 3
	else
	  LabelPads {AUTOM : [ AUTOMATION SETUP PARAMTERS. Use con knob in setup ] }
		ColorPad 3, 6
		LabelPad 3, {MODE=> SETUP}
		LabelPad 4, {AUTOM SETUP}
		ColorPad 4, 6
	endif 
	LabelPad 5, {AUTOM EDITOR}
	if interpolate_autom
		LabelPad 6, {SMOOTH AUTOM ON}
		ColorPad 6, 3
	else
	  LabelPad 6, {SMOOTH AUTOM OFF}
		ColorPad 6, 0
	endif
	if send_automation_data_enabled
		LabelPad 7, {AUTOM ENABLED}
		ColorPad 7, 3
	else
	  LabelPad 7, {AUTOM DISABLED}
		ColorPad 7, 0
	endif
	LabelPad 8, {SCN}, scn, {  A}, sap, {       CH}, ch, { CC}, cc, {  =>MIN }, min
	LabelPad 9, {SCN}, scn, {  A}, sap, {       CH}, ch, { CC}, cc, {  =>MID }, mid
	LabelPad 10,{SCN}, scn, {  A}, sap, {       CH}, ch, { CC}, cc, {  =>MAX }, max
	LabelPad 11,{SCN}, scn, {  A}, sap, {       CH}, ch, { CC}, cc, { RAMP }, min, {-}, max
	LabelPad 12,{SCN}, scn, {  A}, sap, {       CH}, ch, { CC}, cc, { RAMP }, max, {-}, min
	LabelPad 13,{DELETE S}, scn, {          AUTOM}, sap
	LabelPad 14,{DELETE S}, scn, {          ALL AUTOMS}
	LabelPad 15, {DELETE ALL SCENES}
	ColorPad 13, 1
	ColorPad 14, 1
	ColorPad 15, 1
	knob_set = 1 //settings knobs
@End

@OnKnobChange
	if knob_set = 0 
	  Call @KnobChangeSet0 //# scene settings
	elseif knob_set = 1
  	Call @KnobChangeSet1	//# settings knobs
	elseif knob_set = 4
  	Call @KnobChangeSet4	//# automation params
  elseif knob_set = 5
  	Call @KnobChangeSet5	//# automation write
  elseif knob_set = 6
  	Call @KnobChangeSet6	//# lfo's
	elseif knob_set = 11
  	Call @KnobChangeSet11	//# Macro setup 
	elseif knob_set = 12
  	Call @KnobChangeSet12	//# Macro usage
	endif
@End

@UpdateCurrentKnobset
	//# On entering select mode the following need knobsets selected
	if in_mode_select	//# disable knobs in_mode_select
		Call @SetupKnobset1
		knob_set = 1 //settings knobs
	else
		if knob_set = 0 
		  Call @SetupKnobset0 //# scene settings
		elseif knob_set = 4
	  	Call @SetupKnobset4	//# automation params
	  elseif knob_set = 5
	  	Call @SetupKnobset5	//# automation writes
	  elseif knob_set = 6
	  	Call @SetupKnobset6	//# lfo setup
		elseif knob_set = 11
	  	Call @SetupKnobset11	//# macro setup
		elseif knob_set = 12
	  	Call @SetupKnobset12	//# macro usage
		endif
	endif
@End

@SetupKnobset0
	//# Scene settings
	knob_set = 0
	LabelPads {AUTOM : [ SCENES ]}
	LabelKnobs {SCENE SETUP}
	LabelKnob 0, {Edit scn }, edit_scene+1
	LabelKnob 1, {Bars }, scene_durs[edit_scene]
	LabelKnob 2, { }
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale edit_scene, 0, 7, 0, 127
	SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
@End

@KnobChangeSet0
	//# scene settings xs0
	if LastKnob = 0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_scene
			edit_scene = val
			SetKnobValue 1, TranslateScale scene_durs[edit_scene], 0, 32, 0, 127
			LabelKnob 0, {Edit scn }, edit_scene+1
			LabelKnob 1, {Bars }, scene_durs[edit_scene]
		endif
	endif
	if LastKnob = 1
		scn_duration = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 32
		scene_durs[edit_scene] = scn_duration
	endif
	scn_to_label = current_scene
	Call @SetupLayoutScenes
	LabelKnob 2, { }
	LabelKnob 3, { }
@End

@SetupKnobset1
	//# Settings knobs
	knob_set = 1
	LabelKnob 0, {Edit scn }, edit_scene+1
	LabelKnob 1, { }
	LabelKnob 2, {MIN }, auto_ramp_min 
	LabelKnob 3, {MAX }, auto_ramp_max
	SetKnobValue 0, TranslateScale edit_scene, 0, 7, 0, 127
	SetKnobValue 2, auto_ramp_min
	SetKnobValue 3, auto_ramp_max
	LabelKnobs { }
@End

@KnobChangeSet1
	//# settings knobs
	if LastKnob = 0
		val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_scene
			edit_scene = val
			LabelKnob 0, {Edit scn }, edit_scene+1
			LabelKnob 1, {Bars }, scene_durs[edit_scene]
		endif
	endif
	if LastKnob = 2
	  auto_ramp_min = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	  LabelKnob 2, {MIN }, auto_ramp_min 
  endif
	if LastKnob = 3
	  auto_ramp_max = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	  LabelKnob 3, {MAX }, auto_ramp_max
	endif
	Call @SetupSettingsLayout
@End

@SetupKnobset4
	//# AUTOMATION PARAMS
	knob_set = 4
	a_ch = automation_chs[sel_autom_pad]
	a_lbl = automation_labels[sel_autom_pad]
	a_cc = automation_ccs[sel_autom_pad]
	a_col = automation_cols[sel_autom_pad]
	rec_val = rec_auto_buffer[sel_autom_pad]
	con_val = autom_control_vals[sel_autom_pad]
	if edit_mode_active and not record_autom_on
		LabelPads {AUTOM : [ AUTOMATION SETUP ]}
		LabelKnobs {AUTOM SETUP P}, auto_lane+1
	elseif record_autom_on
	  LabelPads {AUTOM : [ AUTOMATION RECORD CH:},a_ch+1, { CC#}, a_cc, { ]}
		LabelKnobs {AUTOM RECORD P}, auto_lane+1
	elseif control_autom_on
	  LabelPads {AUTOM : [ AUTOMATION CONTROL CH:},a_ch+1, { CC#}, a_cc, { ]}
		LabelKnobs {AUTOM CONTROL P}, auto_lane+1
	else 
		LabelPads {AUTOM : [ AUTOMATION PARAMTERS ]}
		LabelKnobs {AUTOMATION P}, auto_lane+1
	endif
	if record_autom_on or control_autom_on
		SetKnobValue 0, TranslateScale min_vals_rec_cont[sel_autom_pad], 0, 127, 0, 127
		SetKnobValue 1, TranslateScale max_vals_rec_cont[sel_autom_pad], 0, 127, 0, 127
	else
	  SetKnobValue 0, TranslateScale a_ch, 0, 15, 0, 127
		SetKnobValue 1, TranslateScale a_lbl, 0, 48, 0, 127
	endif
	if record_autom_on
		SetKnobValue 2, TranslateScale rec_val, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad], 0, 127
	elseif control_autom_on
		SetKnobValue 2, TranslateScale con_val, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad], 0, 127
	else
	  SetKnobValue 2, TranslateScale a_cc, 0, 127, 0, 127
	endif
	SetKnobValue 3, TranslateScale a_col, 0, 6, 0, 127
	Call @LabelAutomationPads
@End

@KnobChangeSet4
	//# AUTOMATION PARAMS
	if record_autom_on
		val_to_set = rec_auto_buffer[sel_autom_pad]
	elseif control_autom_on
	  val_to_set = autom_control_vals[sel_autom_pad]
	endif 
	if record_autom_on or control_autom_on
		if LastKnob = 0
	    min_vals_rec_cont[sel_autom_pad] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
			LabelKnob 0, {MIN }, min_vals_rec_cont[sel_autom_pad]
			SetKnobValue 2, TranslateScale val_to_set, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad], 0, 127
			Call @LabelAutomationPads
	  endif
	  if LastKnob = 1
	    max_vals_rec_cont[sel_autom_pad] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
			LabelKnob 1, {MAX }, max_vals_rec_cont[sel_autom_pad]
			SetKnobValue 2, TranslateScale val_to_set, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad], 0, 127
			Call @LabelAutomationPads
		endif
	else
		if LastKnob = 0
	    automation_chs[sel_autom_pad] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
			LabelKnob 0, {ch }, automation_chs[sel_autom_pad]+1
	  endif
	  if LastKnob = 1
	    automation_labels[sel_autom_pad] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 48
			LabelKnob 1, {Label }, automation_labels[sel_autom_pad]
		endif
	endif
  if LastKnob = 2
		if record_autom_on
			break_point = Round TranslateScale (GetKnobValue 2), 0, 127, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad]
			LabelKnob 2, {REC#}, break_point
			//here we send the cc and add bp to a buffer which during rec is add to each beat once there is a value
			rec_auto_buffer[sel_autom_pad] = break_point //stored even when host stopped so can record value on host start
			SendMIDICC automation_chs[sel_autom_pad], automation_ccs[sel_autom_pad], break_point
			//Log {Recording CH:}, automation_chs[sel_autom_pad]+1, { CC:}, automation_ccs[sel_autom_pad], { VAL:}, break_point
		elseif control_autom_on
		  val = Round TranslateScale (GetKnobValue 2), 0, 127, min_vals_rec_cont[sel_autom_pad], max_vals_rec_cont[sel_autom_pad]
			LabelKnob 2, {CON#}, val
			SendMIDICC automation_chs[sel_autom_pad], automation_ccs[sel_autom_pad], val
			//Log {Sending CH:}, automation_chs[sel_autom_pad]+1, { CC:}, automation_ccs[sel_autom_pad], { VAL:}, val
			autom_control_vals[sel_autom_pad] = val //store it for when user returns to controlling this param
		else
		  automation_ccs[sel_autom_pad] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
			LabelKnob 2, {cc# }, automation_ccs[sel_autom_pad]
		endif
	endif
  if LastKnob = 3
		automation_cols[sel_autom_pad] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 6
		LabelKnob 3, {Color }, automation_cols[sel_autom_pad]
		LatchPad sel_autom_pad, NO 
	endif
	pad_to_label=sel_autom_pad
	pad_slot=sel_autom_pad
	Call @LabelAutomPad	
@End

@LabelAutomationPads
	for i = 0 to 15
		LabelPad i, { }
		ColorPad i, 0
		pad_to_label=i
		pad_slot=i
		Call @LabelAutomPad
	endfor
	if record_autom_on or control_autom_on
		LabelKnob 0, {MIN }, min_vals_rec_cont[sel_autom_pad]
		LabelKnob 1, {MAX }, max_vals_rec_cont[sel_autom_pad]
	else
		LabelKnob 0, {Ch }, automation_chs[sel_autom_pad]+1
		LabelKnob 1, {Label }, automation_labels[sel_autom_pad]
	endif
	if record_autom_on
		LabelKnob 2, {REC# }, rec_auto_buffer[sel_autom_pad]
	elseif control_autom_on
	  LabelKnob 2, {CON# }, autom_control_vals[sel_autom_pad]
	else
	  LabelKnob 2, {cc# }, automation_ccs[sel_autom_pad]
	endif
	LabelKnob 3, {Color }, automation_cols[sel_autom_pad]
@End

@SetupKnobset5
	//# AUTOMATION WRITE Mode
	knob_set = 5
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i] //add scene durs up to the automation scene
	endfor
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4 //allows for scrolling through the scene to see automation. view holds 4 bars
		auto_adv_max = 0
	endif
	SetKnobValue 0, TranslateScale auto_scene, 0, 7, 0, 127 //scene to automate
	SetKnobValue 1, TranslateScale auto_ramp, 0, 23, 0, 127 //apply a ramp 
	SetKnobValue 2, TranslateScale auto_adv_bar, 0, auto_adv_max, 0, 127 //mv fwd back in current scene
	SetKnobValue 11, TranslateScale auto_lane, 0, 15, 0, 127 //param /16 to be automated
	SetKnobValue 12, auto_ramp_min
	SetKnobValue 13, auto_ramp_max
	//# Set KnobValues for automation slots
	for i = 3 to 10
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + (i-3)
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 14 to 21
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + (i-6)
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor	
	Call @LabelAutomationKnobs
@End

@KnobChangeSet5
	//# AUTOMATION WRITE mode
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	if LastKnob = 12
	  auto_ramp_min = Round TranslateScale (GetKnobValue 12), 0, 127, 0, 127
	  LabelKnob 12, {RMin }, auto_ramp_min 
  endif
	if LastKnob = 13
	  auto_ramp_max = Round TranslateScale (GetKnobValue 13), 0, 127, 0, 127
	  LabelKnob 13, {RMax }, auto_ramp_max
	endif
	if LastKnob = 1
	  auto_ramp = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 23
		if auto_ramp=23
			for i = 0 to 15
		    auto_ramps[(23*16)+i] = Random 0,127//RND
			endfor
		endif
		Call @ApplyAutoRamp
	endif
	if LastKnob = 11
	  auto_lane =  Round TranslateScale (GetKnobValue 11), 0, 127, 0, 15
		Call @LabelAutomationKnobs
	endif
	if LastKnob = 0
	  auto_scene =  Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		edit_scene = auto_scene
		auto_adv_bar = 0
		Call @LabelAutomationKnobs
		SetKnobValue 2, TranslateScale auto_adv_bar, 0, auto_adv_max, 0, 127 //mv fwd back in current scene
	endif
	if LastKnob = 2
	  auto_adv_bar =  Round TranslateScale (GetKnobValue 2), 0, 127, 0, auto_adv_max
		Call @LabelAutomationKnobs
	endif
	if (LastKnob>=3 and LastKnob<=10) or (LastKnob>=14)
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure)
		knob_slot=LastKnob-3
		if LastKnob>=14
			knob_slot=LastKnob-6
		endif
		data_slot = data_slot+knob_slot
		break_point = Round TranslateScale (GetKnobValue LastKnob), 0, 127, 0, 127
		Call @UpdateAutomationPoint
	endif
@End

@ApplyAutoRamp
	for i = 0 to 15
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + i
		ramp_val = auto_ramps[(auto_ramp*16)+i]
		break_point = Clip (Round ((ramp_val / 127 * (auto_ramp_max-auto_ramp_min)) + auto_ramp_min)), 0, 127
		Call @UpdateAutomationPoint
	endfor
	Call @LabelAutomationKnobs
@End

@SetupKnobset6
	//# LFO's
  knob_set = 6
  ShowLayout 0
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	//the amt to set at scene x bar y
	autom_lfo_amt = autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]]  
	SetKnobValue 0, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2)], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale lfo_dests[(lfo_num*8) + (dest_num*2) + 1], 0, 15, 0, 127
	SetKnobValue 2, TranslateScale autom_scene, 0, 15, 0, 127
	SetKnobValue 3, TranslateScale autom_bar, 0, 15, 0, 127
	SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
	//SetKnobValue 5, TranslateScale lfo_num, 0, 1, 0, 127
	SetKnobValue 6, TranslateScale lfo_types[lfo_num], 0, 5, 0, 127
	SetKnobValue 7, TranslateScale lfo_freqs[lfo_num], 0, 127, 0, 127
	SetKnobValue 8, TranslateScale lfo_syncs[lfo_num], 0, 1, 0, 127
	SetKnobValue 9, TranslateScale lfo_xmods[lfo_num], 0, 10, 0, 127
	Call @LabelLFOKnobs
@End

@KnobChangeSet6
	//# LFO's  mode
	if LastKnob = 0
    d_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2)] = d_ch
		if d_ch>=0 and d_pad>=0
			pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
  endif
  if LastKnob = 1
    d_pad = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		lfo_dests[(lfo_num*8) + (dest_num*2) + 1] = d_pad
		if d_ch>=0 and d_pad>=0
			pad_to_label=dest_num
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
  endif
  if LastKnob = 2
    autom_scene = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 15
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
  if LastKnob = 3
		autom_bar = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 31
		SetKnobValue 4, TranslateScale autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]], 0, 127, 0, 127
  endif
	if LastKnob = 4
    autom_lfo_amt = Round TranslateScale (GetKnobValue 4), 0, 127, 0, 127
		autom_lfo_amts[(autom_scene[lfo_num]*32) + autom_bar[lfo_num]] = autom_lfo_amt
  endif
  if LastKnob = 5
    lfo_num = Round TranslateScale (GetKnobValue 5), 0, 127, 0, 1
		Call @SetupKnobset6
  endif
  if LastKnob = 6
    lfo_types[lfo_num] = Round TranslateScale (GetKnobValue 6), 0, 127, 0, 5
  endif
  if LastKnob = 7
    lfo_freqs[lfo_num] = Round TranslateScale (GetKnobValue 7), 0, 127, 0, 127
		//# how do we set this for synced? what are options. maybe need array of choices?
	endif
	if LastKnob = 8
    lfo_syncs[lfo_num] = Round TranslateScale (GetKnobValue 8), 0, 127, 0, 1
  endif
  if LastKnob = 9
    lfo_xmods[lfo_num] = Round TranslateScale (GetKnobValue 9), 0, 127, 0, 10
  endif	
	Call @LabelLFOKnobs
@End

@LabelLFOKnobs
	LabelPads {[ LFO },lfo_num+1, { DESTINATIONS ]} 
	LabelKnobs {AUTOM : [ LFO },lfo_num+1, { SETUP ]}   
	LabelXY {[ LFO }, lfo_num+1, { OUTPUT ]}
	d_ch =  lfo_dests[(lfo_num*8) + (dest_num*2)] //destination channel
	d_pad = lfo_dests[(lfo_num*8) + (dest_num*2) + 1] //destination 0-15 setup in kntrl mode
	LabelKnob 0, {D-CH }, d_ch+1
	LabelKnob 1, {D-PAD }, d_pad+1
	if autom_scene <=7
		LabelKnob 2, {A-SCENE }, autom_scene[lfo_num]+1 //0-7 + 8 which is autom off free
		LabelKnob 3, {A-BAR }, autom_bar[lfo_num]+1 //set dynamically but 0-31
		LabelKnob 4, {AMT }, autom_lfo_amt
  else
		LabelKnob 2, {Auto. OFF}
		LabelKnob 3, { }
  endif
	LabelKnob 4, {AMT }, autom_lfo_amt
	LabelKnob 5, {LFO# }, lfo_num+1
	lfo_type = lfo_types[lfo_num]
	if lfo_type=0
		LabelKnob 6, {SINE}
	elseif lfo_type=1
		LabelKnob 6, {COSINE}
  elseif lfo_type=2
		LabelKnob 6, {SQUARE}
  elseif lfo_type=3
		LabelKnob 6, {RAMP UP}
  elseif lfo_type=4
		LabelKnob 6, {RAMP DN}
  elseif lfo_type=5
		LabelKnob 6, {S&H}
  endif
  LabelKnob 7, {FREQ }, lfo_freqs[lfo_num]
  if lfo_syncs[lfo_num] = 0
	  LabelKnob 8, {FREE}
	else
		LabelKnob 8, {SYNC}
	endif
	LabelKnob 9, {X-MOD }, lfo_xmods[lfo_num]
	//label destination pads
	for i = 0 to 3
		d_ch = lfo_dests[(lfo_num*8) + (i * 2)] //destination channel
		d_pad = lfo_dests[(lfo_num*8) + (i * 2) + 1] //destination 0-15 setup in kntrl mode
		if d_ch>=0 and d_pad>=0 //# initialised with value -1 so no labelling until assigned
			pad_to_label=i 
			pad_slot=(d_ch * 16) + d_pad
			Call @LabelAutomPad
		endif
	endfor
@End

@SetupKnobset11
	//# MACRO SETUP
	knob_set = 11
	LabelKnobs {MACRO SETUP}
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
	LabelKnob 2, { }
	LabelKnob 3, { }
	SetKnobValue 0, TranslateScale macro_chans[sel_macro], 0, 15, 0, 127
	SetKnobValue 1, TranslateScale macro_params[sel_macro], 0, 15, 0, 127
	SetKnobValue 2, 0
	SetKnobValue 3, 0
@End

@KnobChangeSet11
	//# MACRO SETUP
	if LastKnob = 0
		macro_chans[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
	endif
	if LastKnob = 1
		macro_params[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15	
	endif
	pad_to_label=sel_macro
	pad_slot=(macro_chans[sel_macro] * 16) + macro_params[sel_macro]
	Call @LabelAutomPad
	LabelKnob 0, {Channel }, macro_chans[sel_macro]+1
	LabelKnob 1, {Param }, macro_params[sel_macro]+1
@End

@SetupKnobset12
	//# MACRO USAGE
	knob_set = 12
	LabelKnobs {MACRO KNOBS}
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
	SetKnobValue 0, TranslateScale m1_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 1, TranslateScale m2_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 2, TranslateScale m3_vals[sel_macro], 0, 127, 0, 127
	SetKnobValue 3, TranslateScale m4_vals[sel_macro], 0, 127, 0, 127 
@End

@KnobChangeSet12
	//# MACRO USAGE
	if LastKnob = 0
		m1_vals[sel_macro] = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 127
	endif
	if LastKnob = 1
		m2_vals[sel_macro] = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 127
	endif
	if LastKnob = 2
		m3_vals[sel_macro] = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127
	endif
	if LastKnob = 3
		m4_vals[sel_macro] = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 127
	endif
	LabelKnob 0, {M1 }, m1_vals[sel_macro]
	LabelKnob 1, {M2 }, m2_vals[sel_macro]
	LabelKnob 2, {M3 }, m3_vals[sel_macro]
	LabelKnob 3, {M4 }, m4_vals[sel_macro]
@End

@SetupLayoutScenes
	//#xsl setup layout for Scenes mode
	LabelKnobs {Setup Scenes}
	if mode=0 or mode=1
		//# Setup scene pads
		for i = 0 to 7
			if scene_durs[i] > 0
				ColorPad i, col_scene
				scn_to_label = i
				Call @LabelScenePad
			else
				ColorPad i, col_unused
				LabelPad i, { }
			endif
			LatchPad i, NO
	  endfor
		ColorPad current_scene, col_sel_scene
		ColorPad edit_scene, col_edit_scene
		if scene_change_requested>-1
			ColorPad scene_change_requested, col_pending
		endif
		for i = 8 to 15
			LatchPad i, NO
	    ColorPad i, col_unused
			LabelPad i, { }
		endfor
	endif
	if (songmode = 0)
		LabelPad 8, {SONG MODE }
		LabelPad 9, {-}
		LatchPad 8, YES
	elseif (songmode = 1)
		LabelPad 8, {LOCKED TO S}, locked_to_scene+1
		LatchPad 8, NO
		LabelPad 9, {TO SONGMODE}
		LatchPad locked_to_scene, YES
	endif
	LabelPad 10, { }
	ColorPad 13, col_unused
	ColorPad 14, col_unused
	ColorPad 15, col_unused
	LabelPad 13, { }
	LabelPad 14, { }
	LabelPad 15, { }
@End

@LabelScenePad
	//# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, {S}, scn_to_label+1, { [}, sc_dur, { bars]}
@End

@SetupLayoutAutom
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 2
		LabelPad i, {autom }, i
	endfor
@End

@SetupLayoutMacros
	ShowLayout 1
	for i = 0 to 15
		ColorPad i, 6
		LabelPad i, {Macros}, i
	endfor
@End
	
@SetupLayoutLFOS
	ShowLayout 0
	for i = 0 to 4
		ColorPad i, 6
		LabelPad i, {D}, i+1
	endfor
@End

@LabelAutomationKnobs
	auto_adv_max = scene_durs[auto_scene] - 4
	if scene_durs[auto_scene] <=4
		auto_adv_max = 0
	endif
	song_bar=0
	for i = 0 to auto_scene
	  song_bar=song_bar+scene_durs[i]
	endfor
	for i = 3 to 10
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i-3), HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + i-3
		LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i-3) % HostBeatsPerMeasure)+1
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	for i = 14 to 21
	  curr_bar = (Div ((song_bar* HostBeatsPerMeasure) + i-6) , HostBeatsPerMeasure) - scene_durs[auto_scene] + auto_adv_bar
	  LabelKnob i, curr_bar+1, {:}, (((song_bar* HostBeatsPerMeasure) + i-6) % HostBeatsPerMeasure)+1
		data_slot = (auto_scene*128) + (auto_adv_bar * HostBeatsPerMeasure) + i-6
		Call @GetAutoValueAtDataSlot
		SetKnobValue i, TranslateScale break_point, -1, 127, 0, 127
	endfor
	ch=automation_chs[auto_lane]
	cc=automation_ccs[auto_lane]
	LabelKnob 11, {Lane }, auto_lane+1
	LabelKnob 12, {RMin}, auto_ramp_min 
	LabelKnob 13, {RMax}, auto_ramp_max 
	LabelKnob 0, {Scene }, auto_scene+1
	begin_bar = song_bar + auto_adv_bar - scene_durs[auto_scene] + 1
	LabelKnob 2, {Begin B}, begin_bar
	LabelKnobs {[ch},ch+1, { cc}, cc, {] AUTOM}, auto_lane+1, {   SCN}, auto_scene+1, { Bars: }, auto_adv_bar+1, {-}, auto_adv_bar+4, { of }, scene_durs[auto_scene]
	if auto_ramp=0
		LabelKnob 1, {LOW}
	elseif (auto_ramp=1)
		LabelKnob 1, {MID} //
	elseif (auto_ramp=2)
		LabelKnob 1, {HIGH} //
	elseif (auto_ramp=3)
		LabelKnob 1, {OFF-ON} //
	elseif (auto_ramp=4)
		LabelKnob 1, {ON-OFF} //
	elseif (auto_ramp=5)
		LabelKnob 1, {UP-DN} //
	elseif (auto_ramp=6)
		LabelKnob 1, {DN-UP} //
	elseif (auto_ramp=7)
		LabelKnob 1, {UUUU} //
	elseif (auto_ramp=8)
		LabelKnob 1, {DDDD} //
	elseif (auto_ramp=9)
		LabelKnob 1, {UP in 1} //
	elseif (auto_ramp=10)
		LabelKnob 1, {DN in 1} //
	elseif (auto_ramp=11)
		LabelKnob 1, {Up in 2a} //
	elseif (auto_ramp=12)
		LabelKnob 1, {Up in 2b} //
	elseif (auto_ramp=13)
		LabelKnob 1, {DN in 2a} //
	elseif (auto_ramp=14)
		LabelKnob 1, {DN in 2b} //
	elseif (auto_ramp=15)
		LabelKnob 1, {UP in 4a} //
	elseif (auto_ramp=16)
		LabelKnob 1, {UP in 4b} //
	elseif (auto_ramp=17)
		LabelKnob 1, {UP in 4c} //
	elseif (auto_ramp=18)
		LabelKnob 1, {UP in 4d} //
	elseif (auto_ramp=19)
		LabelKnob 1, {DN in 4a} //
	elseif (auto_ramp=20)
		LabelKnob 1, {DN in 4b} //
	elseif (auto_ramp=21)
		LabelKnob 1, {DN in 4c} //
	elseif (auto_ramp=22)
		LabelKnob 1, {DN in 4d} //
	elseif (auto_ramp=23)
		LabelKnob 1, {RND} //	
	endif
@End

@GetAutoValueAtDataSlot
	// Sets var break_point to the value stored in auto_data array at data_slot
	if auto_lane=0
		break_point = auto_data_ch0[data_slot]
	elseif auto_lane=1
		break_point = auto_data_ch1[data_slot]
	elseif auto_lane=2
		break_point = auto_data_ch2[data_slot]
	elseif auto_lane=3
		break_point = auto_data_ch3[data_slot]
	elseif auto_lane=4
		break_point = auto_data_ch4[data_slot]
	elseif auto_lane=5
		break_point = auto_data_ch5[data_slot]
	elseif auto_lane=6
		break_point = auto_data_ch6[data_slot]
	elseif auto_lane=7
		break_point = auto_data_ch7[data_slot]
	elseif auto_lane=8
		break_point = auto_data_ch8[data_slot]
	elseif auto_lane=9
		break_point = auto_data_ch9[data_slot]
	elseif auto_lane=10
		break_point = auto_data_ch10[data_slot]
	elseif auto_lane=11
		break_point = auto_data_ch11[data_slot]
	elseif auto_lane=12
		break_point = auto_data_ch12[data_slot]
	elseif auto_lane=13
		break_point = auto_data_ch13[data_slot]
	elseif auto_lane=14
		break_point = auto_data_ch14[data_slot]
	elseif auto_lane=15
		break_point = auto_data_ch15[data_slot]
	endif	
@End

@UpdateAutomationPoint
	//# requires the slot to update as data_slot and value as break_point
	if auto_lane=0
		auto_data_ch0[data_slot] = break_point
	elseif auto_lane=1
		auto_data_ch1[data_slot] = break_point
	elseif auto_lane=2
		auto_data_ch2[data_slot] = break_point
	elseif auto_lane=3
		auto_data_ch3[data_slot] = break_point
	elseif auto_lane=4
		auto_data_ch4[data_slot] = break_point
	elseif auto_lane=5
		auto_data_ch5[data_slot] = break_point
	elseif auto_lane=6
		auto_data_ch6[data_slot] = break_point
	elseif auto_lane=7
		auto_data_ch7[data_slot] = break_point
	elseif auto_lane=8
		auto_data_ch8[data_slot] = break_point
	elseif auto_lane=9
		auto_data_ch9[data_slot] = break_point
	elseif auto_lane=10
		auto_data_ch10[data_slot] = break_point
	elseif auto_lane=11
		auto_data_ch11[data_slot] = break_point
	elseif auto_lane=12
		auto_data_ch12[data_slot] = break_point
	elseif auto_lane=13
		auto_data_ch13[data_slot] = break_point
	elseif auto_lane=14
		auto_data_ch14[data_slot] = break_point
	elseif auto_lane=15
		auto_data_ch15[data_slot] = break_point
	endif
@End

@StoreRecordAutoData
	// for each channel if record mode on and in playback and when buffer val>=0 update automation point
	data_slot = (current_scene*128) + scene_beat_count
	for i = 0 to 15
		break_point = rec_auto_buffer[i]
		auto_lane = i 
		if break_point >= 0 //ensures only values changed during record get update 
			Call @UpdateAutomationPoint
		endif
	endfor
@End

@SendAutomationData
	//# Send automation data and set buffer val for HostBeat2
	rec_or_control_mode = record_autom_on or control_autom_on
	if send_automation_data_enabled
		FillArray interpolation_buffer, -1, 48
		auto_data_slot = (current_scene*128) + scene_beat_count
	  next_data_slot = Clip (auto_data_slot+1), 0, 1024
		if auto_data_ch0[auto_data_slot] >= 0 and automation_labels[0]>0 and not (rec_or_control_mode and sel_autom_pad=0)
			bp1 = auto_data_ch0[auto_data_slot]
			bp2 = auto_data_ch0[next_data_slot]
			ch = automation_chs[0]
			cc = automation_ccs[0]
			b_ch=0
			Call @SetInterpolationBuffer
			SendMIDICC ch, cc, bp1
		endif
		if auto_data_ch1[auto_data_slot] >= 0 and automation_labels[1]>0 and not (rec_or_control_mode and sel_autom_pad=1)
			bp1 = auto_data_ch1[auto_data_slot]
			bp2 = auto_data_ch1[next_data_slot]
			ch = automation_chs[1]
			cc = automation_ccs[1]
			b_ch=1
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch2[auto_data_slot] >= 0 and automation_labels[2]>0 and not (rec_or_control_mode and sel_autom_pad=2)
			bp1 = auto_data_ch2[auto_data_slot]
			bp2 = auto_data_ch2[next_data_slot]
			ch = automation_chs[2]
			cc = automation_ccs[2]
			b_ch=2
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch3[auto_data_slot] >= 0 and automation_labels[3]>0 and not (rec_or_control_mode and sel_autom_pad=3)
			bp1 = auto_data_ch3[auto_data_slot]
			bp2 = auto_data_ch3[next_data_slot]
			ch = automation_chs[3]
			cc = automation_ccs[3]
			b_ch=3
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch4[auto_data_slot] >= 0 and automation_labels[4]>0 and not (rec_or_control_mode and sel_autom_pad=4)
			bp1 = auto_data_ch4[auto_data_slot]
			bp2 = auto_data_ch4[next_data_slot]
			ch = automation_chs[4]
			cc = automation_ccs[4]
			b_ch=4
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch5[auto_data_slot] >= 0 and automation_labels[5]>0 and not (rec_or_control_mode and sel_autom_pad=5)
			bp1 = auto_data_ch5[auto_data_slot]
			bp2 = auto_data_ch5[next_data_slot]
			ch = automation_chs[5]
			cc = automation_ccs[5]
			b_ch=5
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch6[auto_data_slot] >= 0 and automation_labels[6]>0 and not (rec_or_control_mode and sel_autom_pad=6)
			bp1 = auto_data_ch6[auto_data_slot]
			bp2 = auto_data_ch6[next_data_slot]
			ch = automation_chs[6]
			cc = automation_ccs[6]
			b_ch=6
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch7[auto_data_slot] >= 0 and automation_labels[7]>0 and not (rec_or_control_mode and sel_autom_pad=7)
			bp1 = auto_data_ch7[auto_data_slot]
			bp2 = auto_data_ch7[next_data_slot]
			ch = automation_chs[7]
			cc = automation_ccs[7]
			b_ch=7
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch8[auto_data_slot] >= 0 and automation_labels[8]>0 and not (rec_or_control_mode and sel_autom_pad=8)
			bp1 = auto_data_ch8[auto_data_slot]
			bp2 = auto_data_ch8[next_data_slot]
			ch = automation_chs[8]
			cc = automation_ccs[8]
			b_ch=8
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch9[auto_data_slot] >= 0 and automation_labels[9]>0 and not (rec_or_control_mode and sel_autom_pad=9)
			bp1 = auto_data_ch9[auto_data_slot]
			bp2 = auto_data_ch9[next_data_slot]
			ch = automation_chs[9]
			cc = automation_ccs[9]
			b_ch=9
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch10[auto_data_slot] >= 0 and automation_labels[10]>0 and not (rec_or_control_mode and sel_autom_pad=10)
			bp1 = auto_data_ch10[auto_data_slot]
			bp2 = auto_data_ch10[next_data_slot]
			ch = automation_chs[10]
			cc = automation_ccs[10]
			b_ch=10
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch11[auto_data_slot] >= 0 and automation_labels[11]>0 and not (rec_or_control_mode and sel_autom_pad=11)
			bp1 = auto_data_ch11[auto_data_slot]
			bp2 = auto_data_ch11[next_data_slot]
			ch = automation_chs[11]
			cc = automation_ccs[11]
			b_ch=11
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch12[auto_data_slot] >= 0 and automation_labels[12]>0 and not (rec_or_control_mode and sel_autom_pad=12)
			bp1 = auto_data_ch12[auto_data_slot]
			bp2 = auto_data_ch12[next_data_slot]
			ch = automation_chs[12]
			cc = automation_ccs[12]
			b_ch=12
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch13[auto_data_slot] >= 0 and automation_labels[13]>0 and not (rec_or_control_mode and sel_autom_pad=13)
			bp1 = auto_data_ch13[auto_data_slot]
			bp2 = auto_data_ch13[next_data_slot]
			ch = automation_chs[13]
			cc = automation_ccs[13]
			b_ch=13
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch14[auto_data_slot] >= 0 and automation_labels[14]>0 and not (rec_or_control_mode and sel_autom_pad=14)
			bp1 = auto_data_ch14[auto_data_slot]
			bp2 = auto_data_ch14[next_data_slot]
			ch = automation_chs[14]
			cc = automation_ccs[14]
			b_ch=14
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
		if auto_data_ch15[auto_data_slot] >= 0 and automation_labels[15]>0 and not (rec_or_control_mode and sel_autom_pad=15)
			bp1 = auto_data_ch15[auto_data_slot]
			bp2 = auto_data_ch15[next_data_slot]
			ch = automation_chs[15]
			cc = automation_ccs[15]
			b_ch=15
			SendMIDICC ch, cc, bp1
			Call @SetInterpolationBuffer
		endif
	endif
@End

@SetInterpolationBuffer
	//store a val to be sent betweeen this beat and the next ie HostBeat2
	if interpolate_autom
		if bp1=-1 or bp2=-1
			buffer = [-1, -1, -1]
		else
			bf1 = Clip (Round (bp1 + ((bp2-bp1) * 0.25))), 0, 127
			bf2 = Clip (Round (bp1 + ((bp2-bp1) * 0.50))), 0, 127
			bf3 = Clip (Round (bp1 + ((bp2-bp1) * 0.75))), 0, 127
			buffer = [bf1, bf2, bf3]
		endif 
		CopyArray buffer, interpolation_buffer[(b_ch * 3)], 3
		//Log {b-ch:}, b_ch, { vals: }, interpolation_buffer[(b_ch * 3)], {-}, interpolation_buffer[(b_ch * 3)+1], {-}, interpolation_buffer[(b_ch * 3)+2]
	endif
@End
 
@LabelAutomPad
	ColorPad pad_to_label, automation_cols[pad_slot]
	if record_autom_on and rec_auto_buffer[pad_slot] >= 0
		ColorPad pad_to_label, 1 //red its recording or armed to record bc buffer has a val
	endif
	label_num = automation_labels[pad_slot] // any pad any label except cc in protected range
	ch=automation_chs[pad_slot]+1
	cc=automation_ccs[pad_slot]
	if (label_num=0) 
		LabelPad pad_to_label, {        }, { __________ }, { ch},ch, { cc}, cc //NOT ASSIGNED
	elseif (label_num=1)
		LabelPad pad_to_label, {VOLUME}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=2)
		LabelPad pad_to_label, {DRY/WET}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=3)
		LabelPad pad_to_label, {SEND DLY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=4)
		LabelPad pad_to_label, {SEND RVB}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=5)
		LabelPad pad_to_label, {HPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=6)
		LabelPad pad_to_label, {LPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=7)
		LabelPad pad_to_label, {F.CUTOFF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=8)
		LabelPad pad_to_label, {F.RESON}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=9)
		LabelPad pad_to_label, {FX1 DW}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=10)
		LabelPad pad_to_label, {FX1 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=11)
		LabelPad pad_to_label, {FX2 DW}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=12)
		LabelPad pad_to_label, {FX2 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=13)
		LabelPad pad_to_label, {NOISE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=14)
		LabelPad pad_to_label, {SHIMMER}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=15)
		LabelPad pad_to_label, {LPFX}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=16)
		LabelPad pad_to_label, {HPFX}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=17)
		LabelPad pad_to_label, {RESNTOR}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=18)
		LabelPad pad_to_label, {ATTACK}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=19)
		LabelPad pad_to_label, {DECAY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=20)
		LabelPad pad_to_label, {SUSTAIN}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=21)
		LabelPad pad_to_label, {RELEASE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=22)
		LabelPad pad_to_label, {ENV AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=23)
		LabelPad pad_to_label, {MORPH}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=24)
		LabelPad pad_to_label, {RIBBON}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=25)
		LabelPad pad_to_label, {MOD WHEEL}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=26)
		LabelPad pad_to_label, {MOD AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=27)
		LabelPad pad_to_label, {TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=28)
		LabelPad pad_to_label, {LFO1 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=29)
		LabelPad pad_to_label, {LFO1 RATE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=30)
		LabelPad pad_to_label, {LFO2 AMT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=31)
		LabelPad pad_to_label, {LFO2 RATE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=32)
		LabelPad pad_to_label, {DELAY}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=33)
		LabelPad pad_to_label, {REVERB}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=34)
		LabelPad pad_to_label, {CHORUS}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=35)
		LabelPad pad_to_label, {PHASER}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=36)
		LabelPad pad_to_label, {BASS TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=37)
		LabelPad pad_to_label, {ARP TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=38)
		LabelPad pad_to_label, {LEAD TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=39)
		LabelPad pad_to_label, {PADS TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=40)
		LabelPad pad_to_label, {PLUCK TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=41)
		LabelPad pad_to_label, {BASS2 TONE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=42)
		LabelPad pad_to_label, {BUS},(Div pad_slot,4)+1, {-HPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=43)
		LabelPad pad_to_label, {BUS},(Div pad_slot,4)+1, {-LPF}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=44)
		LabelPad pad_to_label, {BUS},(Div pad_slot,4)+1, {-FX1}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=45)
	LabelPad pad_to_label, {BUS},(Div pad_slot,4)+1, {-FX2}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=46)
		LabelPad pad_to_label, {DISTORT}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=47)
		LabelPad pad_to_label, {DRIVE}, { __________ }, { ch},ch, { cc}, cc
	elseif (label_num=48)
		LabelPad pad_to_label, {GRAIN}, { __________ }, { ch},ch, { cc}, cc
	else
	  LabelPad pad_to_label, { ??? }, { __________ }, { ch},ch, { cc#}, cc
	endif
@End

@GetAutoRamps
	auto_ramps[0*16] =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] //LOW
	auto_ramps[1*16] =  [64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64] //MID
	auto_ramps[2*16] =  [127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127] //HIGH
	auto_ramps[3*16] =  [0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127] //OFF-ON
	auto_ramps[4*16] =  [127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0] //ON-OFF
	auto_ramps[5*16] =  [0, 16, 32, 48, 64, 80, 96, 112, 127, 109, 91, 73, 55, 37, 19, 1] //UP-DN
	auto_ramps[6*16] =  [127, 111, 95, 79, 63, 47, 31, 15, 0, 18, 36, 54, 72, 90, 108, 126] //DN-UP
	auto_ramps[7*16] =  [0, 42, 84, 127, 0, 42, 84, 127, 0, 42, 84, 127, 0, 42, 84, 127] //UUUU
	auto_ramps[8*16] =  [127, 84, 42, 0, 127, 84, 42, 0, 127, 84, 42, 0, 127, 84, 42, 0] //DDDD
	auto_ramps[9*16] =  [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120] //UPin1
	auto_ramps[10*16] = [127, 119, 111, 103, 95, 87, 79, 71, 63, 55, 47, 39, 31, 23, 15, 7] //DNin1
	auto_ramps[11*16] = [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60] //UPin2a
	auto_ramps[12*16] = [64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124] //UPin2b
	auto_ramps[13*16] = [127, 123, 119, 115, 111, 107, 103, 99, 95, 91, 87, 83, 79, 75, 71, 67] //DNin2a
	auto_ramps[14*16] = [63, 59, 55, 51, 47, 43, 39, 35, 31, 27, 23, 19, 15, 11, 7, 3] //DNin2b
	auto_ramps[15*16] = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30] // UPin4a
	auto_ramps[16*16] = [32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62] //UPin4b
	auto_ramps[17*16] = [64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94] // UPin4c
	auto_ramps[18*16] = [96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126] //UPin4d
	auto_ramps[19*16] = [127, 125, 123, 121, 119, 117, 115, 113, 111, 109, 107, 105, 103, 101, 99, 97] //DNin4a
	auto_ramps[20*16] = [95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65] //DNin4b
	auto_ramps[21*16] = [63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 39, 37, 35, 33] //DNin4c
	auto_ramps[22*16] = [31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1] //DNin4d
	for i = 0 to 15
    auto_ramps[(23*16)+i] = Random 0,127//RND
	endfor
@End
