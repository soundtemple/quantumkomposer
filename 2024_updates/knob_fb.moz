@OnLoad
	SetShortName {KNOBFB} 
	LabelPads {FEEDBACK TO MKNTRL & GOC KNOBS}
	ShowLayout 2
    logInfo=FALSE
    mk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40]
    len_header=6
    sx_knob_setup=1 //# knobs midi channel, followed by CC vals
    sx_knob_change=2 //# knobs value change message
    custom_knobs=[-1, 0,0,0,0]
    knob_current_vals=[0,0,0,0]
    print_logging_on = FALSE
    Call @SetupLayout
@End

@OnKnobChange
    if LastKnob = 1 // KNOB TYPE
		val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 1 // knob type
		kntrl_knob_type = val
        if kntrl_knob_type=1
            kntrl_output_relenc=FALSE
        endif
    elseif LastKnob = 2 // test encoder 
        val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 127 // test knob type
        enc_test_val = val
    elseif LastKnob = 3 // knob_scale_turn
        val = Round TranslateScale (GetKnobValue 3), 0, 127, 2, 18 // knob_scale_turn
        knob_scale_turn = val
	endif
	Call @SetupLayout
@End

@OnPadDown
    if LastPad=15
        print_logging_on = not print_logging_on
        Call @SetupLayout
    endif
@End

@SetupLayout
    k4=0
    p16=0
    if custom_knobs[0] > -1
        k4=3
    endif
    midi_learn_pad_cols=[k4,k4,k4,k4, 0,0,0,0, p16,p16,p16,p16, 0,0,0,0]
	for i = 0 to 15
		LabelPad i, { }
		ColorPad i, midi_learn_pad_cols[i]
	endfor
	if custom_knobs[0] = -1 //custom knobs not in use
		LabelPad 0, { KNOB    }, {    TOP L    }, {  -----  }
		LabelPad 1, { KNOB    }, {    TOP R    }, {  -----  }
		LabelPad 2, { KNOB    }, {    LOW L    }, {  -----  }
		LabelPad 3, { KNOB    }, {    LOW R    }, {  -----  }
        LabelPad 4, { }
	else
		LabelPad 0, { KNOB    }, {    TOP L    }, { cc#}, custom_knobs[1]
		LabelPad 1, { KNOB    }, {    TOP R    }, { cc#}, custom_knobs[2]
		LabelPad 2, { KNOB    }, {    LOW L    }, { cc#}, custom_knobs[3]
		LabelPad 3, { KNOB    }, {    LOW R    }, { cc#}, custom_knobs[4]
        labelPad 4, { CHAN    }, custom_knobs[0]+1
	endif  
    for i = 8 to 11
        LabelPad i, {Val: }, knob_current_vals[i-8]
    endfor

    LabelPad 6, {Knob type: pot}
    LabelPad 7, {Output: CONT. ABS.}
    ColorPad 7, 4
    if print_logging_on
        LabelPad 15, {LOG DATA: ON}
        ColorPad 15, 3
    else
        LabelPad 15, {LOG DATA: OFF}
        ColorPad 15, 1
    endif
    Call @SetupKnobset
@End

@SetupKnobset
	// Setup setup custom knobs to control app
	knob_set = 3
	LabelKnobs {KNOB VALUES}
    LabelKnob 0, {1: }, knob_current_vals[0]
    LabelKnob 1, {2: }, knob_current_vals[1]
    LabelKnob 2, {3: }, knob_current_vals[2]
    LabelKnob 3, {4: }, knob_current_vals[3]
    SetKnobValue 0, TranslateScale knob_current_vals[0], 0, 127, 0, 127
    SetKnobValue 1, TranslateScale knob_current_vals[1], 0, 127, 0, 127
    SetKnobValue 2, TranslateScale knob_current_vals[2], 0, 127, 0, 127
    SetKnobValue 3, TranslateScale knob_current_vals[3], 0, 127, 0, 127
@End

	
@OnSysex
    ReceiveSysex sysex_msg
    //# Check the header
    mk_msg=YES
    for i = 0 to len_header-1
        if sysex_msg[i] <> mk_sysex_header[i]
            mk_msg=NO
        endif
    endfor

    //# Check the msg type
    msg_type=sysex_msg[len_header]

	
    if mk_msg // sysex message generated by MKNTRL
        if print_logging_on
            Log {MK MSG---START---}
            Log {Message_type: }, sysex_msg[len_header]
        endif
        for i = (len_header+1) to (SysexSize-1)
            kb=i-len_header
            if msg_type = sx_knob_setup
                if print_logging_on
                    Log {byte}, kb, {:}, sysex_msg[i]
                endif
                custom_knobs[kb-1] = sysex_msg[i]
            elseif msg_type = sx_knob_change and i>0
                SendMidiCC custom_knobs[0], custom_knobs[kb], sysex_msg[i]
                knob_current_vals[kb-1]=sysex_msg[i]
                if print_logging_on
                    log {KNOB}, kb, {: Sending CH }, custom_knobs[0], {-}, custom_knobs[kb], {-}, sysex_msg[i]
                endif
            endif
        endfor
        if print_logging_on
            Log {MK MSG---END-----}
        endif
    else
        if print_logging_on
            Log {MSG header not recognised}
        endif
    endif
    if print_logging_on
        Call @SetupLayout
    endif
@End