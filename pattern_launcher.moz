//# QUANTUM KONTROLLER SUITE
//# ATOM PATTERN LAUNCHER
@OnLoad
	ShowLayout 2
	LabelPads {[ QK:ATOM PATTERN LAUNCHER ]}
	SetShortName {APL}
	if unassigned scene_durs
		//in the code a pattern refers to what is called a Sequence in the GUI
		//in the code a sequence step contains an Atom pattern to trigger
		//legacy naming from porting the QK:BEATS app
		ResetNoteStates FALSE // #reset the locker with the value FALSE!
		mode = 0 //# modes of operation
		songmode = 0 //# 0:Playsong 1:SceneLocked 2:PatternLocked
		SetMetroPPQN 4	
		ppqn = 4
		scene_change_requested = -1 //# on pad down has next scene number
		pattn_change_requested = -1 //# on pad down has next pattn number
		scene_change_pattn_reset = TRUE //# Goto pattn 0 when user changes scene
		scene_changed = FALSE
		in_mode_select = FALSE //# Toggle for changing modes mode
		number_of_modes = 16 //# Change in operational mode 
		in_seq_mode = FALSE //# editing pattern steps mode+
		allow_mode_chg_playbk = TRUE //# Mode change during playback
		return_to_song_mode_requested = FALSE //# used for switching on new bar 
		use_turn_around = FALSE //# last pattn as turn around on last bar of scene
		mgen_device_id=0 //used for midi control of pads. each mgen instance is assigned a number
		mgen_sel_dev=0 //used for midi control of pads
		led_index=20 // notes 20-46 used for updating LED feedback on 16pads 
		send_cc_back_to_knobs = TRUE
		knobs_controller=[15,40,41,42,43] //midi controller ch & 4 base ccs. cc's=cc's+(4xmgen_device_id)
		pattn_beat_count = 0
		scene_beat_count = 0
		Call @InitKnobVariables //# All knob settings on load
		Call @SysexMessageSetup
		Call @SetupSequences
		Call @SetupNoteset
		Call @SetupKnobset0
		Call @SetupLayout
	endif 
@End

@SysexMessageSetup //QK Sysex messages. from KNTRL to BEATS and from BEATS to midi controllers
	qk_sysex_header=[0x3F,0x40,0x3F,0x40,0x3F,0x40] //QK messages
	len_header=6 
	//QK message types 
	sx_scene_change=100 //scene change
	sx_scene_durations=101 //scene durations
	sx_rtn_to_song=22 //return to song 
	sx_glbl_swing=23 //global swing
	sx_copy_scene=89 //Copy paste contents of whole scene
	sx_mgen_knobs=40 //MGEN 4 knobs --to knobs controller
@End

@InitKnobVariables
	//# Any knobset knob should have a setting here
	scn_duration = 0 
	pattn_duration = 0
	seq_ch=0 //# the sequence lane 0-3 
	seq_type=3 //# sequence lane to edit. Step, Note, Velo, CC
	label_style=4 //#0-3 seq_types, 4 all_seq_type_sel_ch, 5_all_ch's_al_seq's
	label_view_mode=4 //# A toggle for the settings pad. 4 or 5. Updates label_style also
  //ATOM specific variable names
	edit_atom=0 //1/8 Atoms for editing
	atom_names=[0,1,2,3, 6,7,8,9, 10,11,12,13, 14,15,16,17] //Channel name for each of the ATOMS to be sequenced	
	num_atom_names=22 //the number of labels we have for nameing an Atom instances
	step_val=0
  copy_paste_status=0 //# Copy paste 0=off; 1=Copied; 2=Paste
  return_to_mode=0 //# Copy paste on completion
	rnd_scn_chance=0 //% chance scene change will be to a random one
	rnd_ptn_chance=0 //% chance pattern change will be to a random one
	num_scns_with_dur=0 //RND only selects scenes with duration
	num_ptns_with_dur=[0,0,0,0, 0,0,0,0] //RND only selects patterns with duration per scene
	rot_dir=1
	move_all=0 //boolean to move all or move 1 in step edit
	move_all_dir=0 //direction for all to move in step edit mode
	last_pad=0
@End

@SetupSequences
  midi_out_chs=[0,1,2,3,4,5,6,7]
  cc_vals=[1,2,3,4]
  scene_durs = [8,0,0,0,0,0,0,0]
  in_seq_mode = FALSE
	current_scene = 0 // #0-7 Pads 0-7
  current_pattn = 0 // #0-7 Pads 8-15
	//# selected step for editing on the current playing scene/pattn
	sel_step = 0 
  //# All sequences 8scenes x 8patterns x 16 steps. Each 1024 cells
	//# slot = (sel_scene*128) + (sel_pattn*16) + sel_step 
	FillArray seq0_steps, 0, 1024 //# STEPS
	FillArray seq1_steps, 0, 1024
	FillArray seq2_steps, 0, 1024
	FillArray seq3_steps, 0, 1024
	FillArray seq0_notes, 0, 1024 //# NOTES as index to curr_scale
	FillArray seq1_notes, 0, 1024
	FillArray seq2_notes, 0, 1024
	FillArray seq3_notes, 0, 1024
	FillArray seq0_octs, 3, 1024 //# OCTS
	FillArray seq1_octs, 3, 1024
	FillArray seq2_octs, 3, 1024
	FillArray seq3_octs, 3, 1024
	FillArray seq0_velos, -1, 1024 //# VELO
	FillArray seq1_velos, -1, 1024
	FillArray seq2_velos, -1, 1024
	FillArray seq3_velos, -1, 1024
	FillArray seq0_ccs, -1, 1024 //# CC
	FillArray seq1_ccs, -1, 1024
	FillArray seq2_ccs, -1, 1024
	FillArray seq3_ccs, -1, 1024
	//# sequence_num=(current_scene*128)+(current_pattn*16)+(seq_ch)
	FillArray sequence_lengths, 16, 1024 //A number between 1 and 16
 	FillArray sequence_rates, 1, 1024 //The length of each step
	def_sequence_length=16 //16 steps
	def_sequence_rate=4 //index to pulses_per_note ie 1 bar per step 
	//initial values
	pattn_durs[0]=4 //# Pattern durations in beats
  FillArray sequence_lengths, 4, 16 //sequence lengths for all channels (using4 cater for16) must match pattern
	FillArray atom_max_patterns, 16, 16
	FillArray pattern_trigger_modes, 3, 16 //default to trigger using cc
	trigger_by_velo_notes = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] //A single note is used for each channel
	//# MetroPulse settings
	curr_steps=[0,0,0,0] //# current note 
	in_mid_step=[0,0,0,0] //# for slow rates metroPulse can be between steps
	pulses_per_note = [4,16] //# a divisor to give metroPulses per note beat or bar
	//# curr_rate = pulses_per_note[sequence_rates[sequence_num]
	curr_pattn_pulses=[0,0,0,0] //# one for each seq_ch. relative to MetroPulse
	//# stored midi note num for current playing note. for sending OFF notes
	//# stored at time midi note on is sent. see @OnMetroPulse
	pattn_length=16
@End

@SetupNoteset
	note_set_type=1
	notes_in_set=32
	ch_start_notes=[0,0,0,0]
	mgen_device_id=5
	FillArray seq0_notes, 0, 1024
	FillArray seq1_notes, 0, 1024
	FillArray seq2_notes, 0, 1024
	FillArray seq3_notes, 0, 1024
	for i = 0 to 32
		curr_scale[i]=i-1 
	endfor
	noteset_len=33 
@End
		
@OnHostStart 
	if (HostBeat = 0) and (HostBar = 0)
		//# SEQUENCE MODE RESETS...
		curr_pattn_pulses=[0,0,0,0] //# reset metroPulse count for each seq.
		curr_steps=[0,0,0,0]
		in_mid_step=[0,0,0,0]
		pattn_beat_count = -1
		scene_beat_count = -1
		scene_changed = FALSE
		if (songmode = 0)
			current_scene = 0
			current_pattn = 0
		elseif (songmode = 1)
			current_pattn = 0
		endif
	else
		scene_completed_bars = scene_beat_count % HostBeatsPerMeasure
		pattn_completed_bars = pattn_beat_count % HostBeatsPerMeasure
		scene_beat_count = scene_completed_bars + HostBeat
		pattn_beat_count = pattn_completed_bars + HostBeat
		curr_pattn_pulses=[0,0,0,0] //# reset metroPulse count for each seq.
		curr_steps=[0,0,0,0]
		in_mid_step=[0,0,0,0]
	endif
	Call @SetupLayout
@End

@OnHostStop
  scene_beat_count = 0
	pattn_beat_count = 0
  Call @SetupLayout
@End 

@OnMetroPulse
	//# Play notes/Update counts - pulses and step positions all seq_chs xomp
	for ch = 0 to 3
		sequence_num=(current_scene*128) + (current_pattn*16) + ch
		curr_rate = pulses_per_note[sequence_rates[sequence_num]] //Beat or bar
		curr_seq_len = sequence_lengths[sequence_num]
		in_mid_step[ch] = (curr_pattn_pulses[ch]) % curr_rate
		if not in_mid_step[ch]
			Call @PlayCurrentNotes
			if in_seq_mode and (ch=seq_ch)
				FlashPad curr_steps[seq_ch]
			endif	
		endif	
		curr_pattn_pulses[ch] = curr_pattn_pulses[ch] + 1 //increment the pattern pulse
		if in_mid_step[ch] = curr_rate-1 //# last pulse b4 increment pattern or reset
			if curr_steps[ch] >= curr_seq_len-1
				curr_pattn_pulses[ch]=0
				curr_steps[ch]=0
			else
				curr_steps[ch] = curr_steps[ch] + 1
			endif
		endif
	endfor
@End

@PlayCurrentNotes //# Play current notes & send CC data. All seq_ch's
	//# handle turn off old and sending new note
	step_slot=(current_scene*128)+(current_pattn*16)+curr_steps[ch]
	sus_prev_note = FALSE //# check sus_prev on new step per ch 
	if ch=0
		step_type = seq0_steps[step_slot]
	elseif ch=1
		step_type = seq1_steps[step_slot]
	elseif ch=2
		step_type = seq2_steps[step_slot]
	elseif ch=3
		step_type = seq3_steps[step_slot]
	endif
	
	if ch=0 
		velo_val = seq0_velos[step_slot]
		cc_val = seq0_ccs[step_slot]
	elseif ch=1
		velo_val = seq1_velos[step_slot]
		cc_val = seq1_ccs[step_slot]
	elseif ch=2
		velo_val = seq2_velos[step_slot]
		cc_val = seq2_ccs[step_slot]
	elseif ch=3
		velo_val = seq3_velos[step_slot]
		cc_val = seq3_ccs[step_slot]
	endif
	if cc_val >= 0 //# send cc message FIRST, so note plays at cc val setting
		SendMIDICC midi_out_chs[ch], cc_vals[ch], cc_val
	endif
	if step_type=1 //# turn on new note
		SendMIDINoteOn midi_out_chs[ch], note_val, velo_val
		SendMIDINoteOff midi_out_chs[ch], note_val, 64, 100
	endif
@End

@OnNewBeat //# Handle Scene and Pattern changes
	scene_beat_count = scene_beat_count + 1
	pattn_beat_count = pattn_beat_count + 1
	current_scene_duration = scene_durs[current_scene]  * HostBeatsPerMeasure //# IN BEATS!
	pattn_slot = (current_scene * 8) + (current_pattn)
	current_pattn_duration = pattn_durs[pattn_slot] * HostBeatsPerMeasure
	current_host_beat = (HostBar * HostBeatsPerMeasure) + HostBeat
	time_for_turnaround = FALSE
  if use_turn_around
  	Call @TimeForTurnaround
  endif
	//# Pattern progression -- Order of operations
	if (scene_change_requested > -1) and (HostBeat=0)
		//# user requested scene change and its a new bar (& return to song)
		Call @HandleSceneChange
	elseif (scene_beat_count >= current_scene_duration)
		Call @HandleSceneChange //# its time to increment scene
	elseif (pattn_change_requested > -1) and (HostBeat=0)
 		Call @HandlePatternChange //# User requested pattn change & its a new beat
 	elseif time_for_turnaround
 		Call @HandlePatternChange
	elseif (pattn_beat_count >= current_pattn_duration)
		Call @HandlePatternChange
	endif
@End

@TimeForTurnaround
	//# Under these conditions jump to last pattn for 1 bar before scene change
	//# 2nd last pattn in scene has no duration. Last pattn has 4 beat duration
	//# Mode must be in song or scene lock and must be 1 bar before scene ends
	pattn6 = pattn_durs[(current_scene * 8) + 6]
	pattn7 = pattn_durs[(current_scene * 8) + 7]
	if (songmode <= 1) and (pattn6 = 0) and (pattn7 > 0) and (current_pattn <= 5) and (scene_beat_count = current_scene_duration - HostBeatsPerMeasure)
		time_for_turnaround = TRUE
	endif
@End

@HandleSceneChange //# Work out which scene is next
	scene_changed = TRUE
	if return_to_song_mode_requested
		return_to_song_mode_requested = FALSE
	endif
  if scene_change_requested > -1
  	current_scene = scene_change_requested
		scene_change_requested = -1
	elseif (songmode > 0)
  	current_scene = current_scene
	elseif (current_scene = 7) //# End of song 
    current_scene = 0 //# TODO: Handle end of song
  elseif (scene_durs[current_scene+1] <= 0) //# also song end
  	current_scene = 0 //# no duration in next scene return to beginning
  else
		current_scene = current_scene + 1 //# Going to next
  endif
	if ((Random 1,99) < rnd_scn_chance) and songmode=0 //%chance of random scene change if not scene locked
    rnd_scn = (Random 0, num_scns_with_dur) //get random scene with duration
		if scene_durs[rnd_scn]>0 and pattn_durs[rnd_scn * 8]>0
			current_scene=rnd_scn //if rnd_scn and first pattn have duration
		endif
	endif
  scene_beat_count = 0
	pattn_beat_count = 0
  Call @HandlePatternChange //# Scene change effect pattn change
@End

@HandlePatternChange //# Work out what the next pattn is
	pattn_slot = (current_scene * 8) + (current_pattn)
	if (pattn_change_requested > -1)
		current_pattn = pattn_change_requested
		pattn_change_requested = -1 //# reset request flag
		if songmode <= 2
			songmode = 2 //# Lock to pattn if user requests pattn change
 		endif
 	elseif (scene_change_requested > -1) //# also handle pattn change
		current_pattn = 0
  	scene_change_requested = -1
  	scene_changed = FALSE
  elseif scene_changed
		//# reset pattn to 0 on scene change if songmode < 2
		if (songmode <= 1)
			current_pattn = 0
		endif
		scene_changed = FALSE
	elseif (songmode = 2) //# Loop current pattn & Scene
    current_pattn = current_pattn
  elseif (current_pattn = 7) //# Wrap playback
    current_pattn = 0
  elseif (time_for_turnaround)
		current_pattn = 7 //# play last pattn for one bar as a turn around before scene change
  elseif (pattn_durs[pattn_slot+1] <= 0)
  	current_pattn = 0 //# no duration no next pattn (pattn_slot + 10)
  else
    current_pattn = current_pattn + 1
  endif
	if ((Random 1,99) < rnd_ptn_chance) and songmode<2 //%chance of pattn change if not pattn locked
    rnd_ptn = (Random 0, num_ptns_with_dur) //get random pattn with duration
		if pattn_durs[(current_scene * 8) + rnd_ptn]>0
			current_pattn=rnd_ptn //if rnd_ptn has duration
		endif
	endif
  pattn_beat_count = 0 //# reset pattn beat count on new pattn
  //# SEQUENCE MODE RESETS.	..
  curr_pattn_pulses=[0,0,0,0] //# reset metroPulse count for each seq.
  curr_steps=[0,0,0,0] //# reset steps for each seq.
	in_mid_step=[0,0,0,0]
  Call @SetupLayout
@End

@LogCurrentInfo
	pattn_slot = (current_scene * 8) + (current_pattn)
	current_pattn_duration = pattn_durs[pattn_slot]
	current_scene_duration = scene_durs[current_scene]
	Log {Playing: Scene: }, current_scene+1, { }, scene_beat_count+1, {/}, (current_scene_duration * HostBeatsPerMeasure), { beats}, { Pattern:}, current_pattn+1, { }, pattn_beat_count+1, {/}, current_pattn_duration, { bars}, { Mode: }, mode, { HostBeat: }, HostBeat+1, { PS:}, pattn_slot
@End

@OnPadDown
  last_pad = LastPad // so midi in can simulate LastPad also see OnMidiIn
	Call @OnPadDown2 //midi input cant trigger @OnPadDown, It calls @OnPadDown2
@End

@OnPadDown2 //# Splitting this event into separate handlers
	if in_mode_select and (last_pad <= (number_of_modes - 1))
		if (HostRunning and (last_pad > 0) and NOT allow_mode_chg_playbk)
			Exit //# Only return to song allowed in playback
		elseif last_pad=2
			Log {NOT IN USE ATM!}
			Exit //# Not in use
		elseif (last_pad=6) and not (mode=9 or mode=11 or mode<=1)
			Exit //# COPY PASTE not allowed
		elseif (last_pad=7) and not (mode<=1 or mode>=8)
			Exit //# DELETE not allowed
		elseif last_pad=1
			mode = last_pad //scenes mode
			in_mode_select=FALSE
			Call @SetupLayout
			Call @SetupKnobset0
		elseif last_pad=8 or last_pad=9 or last_pad=10
			Call @HandleAtomGuiRequest // Show/Hide GUI, Mute, Launch
		elseif (last_pad=11 or last_pad=12 or last_pad=13)
			if last_pad = 11
				mode=9 
	      Call @SetupKnobset5 //# SEQUENCE STEPS EDIT
			elseif last_pad = 12
	    	mode=10  //PERFORM TRIGGER PATTERNS IN SEQUENCE MODE 
				LabelPads {IMPLEMENT ME} 
			elseif last_pad = 13
				mode=12
	      Call @SetupKnobset9 //# ROTATION
	    endif
	    in_mode_select = FALSE
    	in_seq_mode = TRUE
		elseif (last_pad>=3 and last_pad<=5) or (last_pad=14 or last_pad=15)
    	//# Settings modes. Dont exit. Scale, MidiOut, CCVals,
    	LabelPad 6, { } //# CopyPaste not allowed
    	LabelPad 7, { } //# Delete not allowed here
    	for i = 0 to 15
    		LatchPad mode, NO
    	endfor
			if last_pad=15 //# toggle label view mode
				if label_view_mode=5
					label_view_mode=4
				else
					label_view_mode=5
				endif
				label_style=label_view_mode
				Call @SetupSettingsLayout
				FlashPad 15
			elseif last_pad=14
				Call @ReverseSequence
				in_mode_select=FALSE
				in_seq_mode=TRUE
				Call @SetupLayout
				mode=9
				Call @OnPadDown_KnobSetSelect
			else
				mode = last_pad
	    	Call @OnPadDown_KnobSetSelect
			endif
			for i = 0 to (number_of_modes - 1)
				ColorPad i, settings_pad_cols[i]
				if mgen_device_id=mgen_sel_dev
					if i=mode
						SendMIDINoteOn 15, i+led_index, 8
					else
						SendMIDINoteOn 15, i+led_index, settings_pad_cols[i]
					endif
				endif
				LatchPad i, NO 
			endfor
			LatchPad mode, YES
		elseif (HostRunning and last_pad=0)
			Call @HandleReturnToSongMode
	  elseif last_pad=6 and ((mode=9) or (mode=11) or (mode<=1))//# COPY PASTE
			Call @HandleCopyPasteActions
		elseif (last_pad=7) //# reset mode
			Call @HandleResetActions
		else
			mode = last_pad
			in_mode_select = FALSE
		endif
		//# Handle mode change
		if mode = 0
			songmode = 0
			in_seq_mode = FALSE
		elseif mode=1
			in_seq_mode = FALSE
		endif
		Call @SendMidiCCBackToKnobs
		Call @SetupLayout
		Call @HandleCopyPasteStateLabelling
	//# NOT IN MODE SELECT......
	elseif (NOT in_mode_select and mode=1) //Scenes mode
		Call @SetupKnobset0
	elseif (NOT in_mode_select and NOT in_seq_mode)
		Call @HandleModeActions //process that happen in settings mode
  elseif (NOT in_mode_select and in_seq_mode)
		Call @HandleSeqModeActions
  endif
@End

@HandleReturnToSongMode
	return_to_song_mode_requested = TRUE
	scene_change_requested = current_scene
	in_mode_select = FALSE
	songmode = 0
	mode = 0
	ColorPad 0, 3
  ColorPad 8, 3
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, 0+led_index, 3
		SendMIDINoteOn 15, 8+led_index, 3
	endif
@End

@HandleCopyPasteStateLabelling
	if (copy_paste_status=1) and return_to_mode<=7 
		//# CP activated for scenePatt mode
		LabelPads {Copied Scene}, current_scene+1, { and Pattern}, current_pattn+1, {. Select a SCENE or PATTERN slot to paste to}
	elseif (copy_paste_status=1) and return_to_mode=9 
		//# CP activated for seq mode
		LabelPads {STEP COPY: Copied Scene}, current_scene+1, { Pattern}, current_pattn+1, { STEP}, sel_step+1, {. Select STEP slot [... and ch] to paste to}
		ColorPad sel_step, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, sel_step+led_index, 3 //LED FEEDBACK
		endif
	elseif (copy_paste_status=1) and return_to_mode=11
		//# CP activated for seq mode
		LabelPads {SEQ COPY: Copied Scene}, current_scene+1, { Pattern}, current_pattn+1, { CH}, seq_ch+1, {. Select a Channel then tap any pad to paste (16steps)}
		ColorPad sel_step, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, sel_step+led_index, 3
		endif
	endif
@End

@HandleResetActions
	return_to_mode=mode
	mode=7
	if return_to_mode>=8
		in_seq_mode=TRUE
		Call @OnPadDown_KnobSetSelect
		LabelPads {DELETE: Select a step to reset [SHIFT to exit]}
	else
		LabelPads {DELETE: Select a scene or pattn slot to reset [SHIFT to exit]}
	endif
	in_mode_select = FALSE
@End

@HandleCopyPasteActions
	//splitting onPadDown
	//# Copy/Paste pad hit so 'copy' current scene/pattn/seq xcp
	return_to_mode=mode
	mode=6
	copied_scene = current_scene
	copied_pattn = current_pattn
	copied_seq_pad = sel_step
	copied_ch = seq_ch //# for copying to another channel store here
	copy_paste_status=1 //# COPY
	in_mode_select = FALSE
	if return_to_mode=9 or return_to_mode=11
		in_seq_mode=TRUE
		Call @OnPadDown_KnobSetSelect
	endif
@End

@HandleModeActions
	//Splitting onPadDown2
	//# handle mode actions if record or reset else do knob scene change
	if not (copy_paste_status=2 or mode=7)
		Call @OnPadDown_ScenePatternChange
 	endif
	Call @OnPadDown_KnobSetSelect
	if (mode = 6) //# COPY/PASTE
		if copy_mode=0 and last_pad<=7 //# only call CP if pad and copy mode correspond
    	copy_paste_status=2 //# PASTE
  		return_to_mode=0
  		Call @CopyPaste //# copy paste scene
    elseif copy_mode=1 and last_pad>=8 
    	copy_paste_status=2 //# PASTE
  		return_to_mode=0
  		Call @CopyPaste //# copy paste pattn
    endif
	elseif (mode = 7) and (last_pad <= 7) //# reset mode
  	reset_type=0
  	Call @ResetScenePatternSequence   
 	elseif (mode = 7) and (last_pad >= 7)
  	reset_type=1
  	Call @ResetScenePatternSequence
	endif
@End

@HandleSeqModeActions
	//splitting up onPadDown
	if sel_step=last_pad
		double_tap=TRUE
	else
  	double_tap=FALSE
	endif
	sel_pad=last_pad
	if mode=8//# Step sequence mode
		Call @UpdateSelStepType //# 0=off; 1=on;
	elseif (mode=9 and move_all)
		if last_pad=14
			move_all_dir=-1
			Call @MoveAllSteps
		elseif last_pad=15
			move_all_dir=1
			Call @MoveAllSteps
		else 
			move_all_dir=0
		endif
	elseif (mode>=10 and mode<=13)
		if mode=12 //rotate sequence
			if last_pad=14
				rot_dir=-1
			elseif last_pad=15
				rot_dir=1
			else 
				rot_dir=0
			endif
			Call @RotateSequence
		else
			Call @UpdateSelStepType //# 0=off; 1=on;
		endif 
	elseif mode=8
		step_slot=(current_scene*128)+(current_pattn*16)
		if seq_ch=0
			seq0_steps[step_slot + curr_steps[seq_ch]] = 1 
		elseif seq_ch=1
			seq1_steps[step_slot + curr_steps[seq_ch]] = 1
		elseif seq_ch=2
			seq2_steps[step_slot + curr_steps[seq_ch]] = 1
		elseif seq_ch=3
			seq3_steps[step_slot + curr_steps[seq_ch]] = 1
		endif
	elseif (mode = 6) //# COPY/PASTE
  	copy_paste_status=2 //# PASTE
  	Call @CopyPaste
  	copy_paste_status=0 //# CP OFF
	elseif (mode = 7)
		reset_type=2 //# reset a sequence pad
  	Call @ResetScenePatternSequence
	endif
	sel_step=last_pad
	Call @SetupLayout
@End


@OnPadUp
	last_pad=LastPad
  Call @OnPadUp2
@End

@OnPadUp2
  //pass
@End

@OnPadDown_ScenePatternChange //# handle scene/pattn change
  if (last_pad >= 0 and last_pad <= 7)
		scene_change_requested = last_pad
		songmode=1 //locked to scene. User pressed scene pad
  	if NOT HostRunning //# immediate change else newbeat/bar handles
  		Call @HandleSceneChange 
  	endif
	elseif (last_pad >= 8 and last_pad <= 15) 	
		pattn_change_requested = last_pad - 8 //# chrd 0-7
		songmode=2 //lockt to pattn. User pressed pattn pad
		if NOT HostRunning //# immediate change else newbeat/bar handles
  		Call @HandlePatternChange 
  	endif
  endif
	Call @SetupLayout	
@End

@OnPadDown_KnobSetSelect //# choose a knob set based on pad type 
  if (NOT in_mode_select) and (NOT in_seq_mode)
  	Call @SetupKnobset0 //scenes mode duration setup  
  elseif (NOT in_mode_select) and in_seq_mode
		if mode=9
  		Call @SetupKnobset5
		elseif mode=12
  		Call @SetupKnobset9 //# ROTATION
  	elseif mode=6 and return_to_mode=9
  		Call @SetupKnobset5 //# EDIT
		else
  		mode=9
  		Call @SetupKnobset5 //# EDIT
  	endif
  elseif in_mode_select
		if last_pad = 4
      Call @SetupKnobset2 //# SELECT ATOMS TO SEQUENCE
    elseif last_pad = 5
    	Call @SetupKnobset4 //# SETUP 16 ATOM Instances
		else
		  Call @SetupKnobset99 //settings knobset
    endif
  endif
  Call @SendMidiCCBackToKnobs
@End

@SendMidiCCBackToKnobs //# Update controller knob vals with midi cc
	//send LED feedback when mgen device is active device to mgen knobs
	if send_cc_back_to_knobs and mgen_device_id=mgen_sel_dev
		SendMidiCC knobs_controller[0], knobs_controller[1], (Round GetKnobValue 0)
		SendMidiCC knobs_controller[0], knobs_controller[2], (Round GetKnobValue 1), 25
		SendMidiCC knobs_controller[0], knobs_controller[3], (Round GetKnobValue 2), 50
		SendMidiCC knobs_controller[0], knobs_controller[4], (Round GetKnobValue 3), 75
	endif
@End

@HandleAtomGuiRequest
	FlashPad last_pad
	LabelPad last_pad, {FIX ME}
@End

@OnMidiNote
	//Log {midi note }, MIDIChannel, {-}, MIDIByte2, {-}, MIDIByte3
  if MIDIChannel=15 and MidiNote>=20 and MIDINote<=36 and mgen_sel_dev=mgen_device_id and mgen_device_id>=0 
		// notes 20-36 on channel 16  used to trigger MGEN pads 0-15
		if MIDINote=36 //SHIFT
			if MIDICommand=0x90 //noteOn	
				Call @OnShiftDown2
			endif
		else
			last_pad = MIDINote-20
			if MIDICommand=0x90 and MIDIByte3>0 //noteOn
				Call @OnPadDown2 //instead of OnPadDown which is only triggered by touch of GUI pads in Mosaic
			elseif MIDICommand=0x90 and MIDIByte3=0
				Call @OnPadUp2
			elseif MIDICommand=0x80 //Note off
			  Call @OnPadUp2
			endif
		endif
	endif		
@End

@OnMidiCC
	// Log {MIDI RECEIVED: }, MIDIChannel, MIDIByte2, MIDIByte3 
	if (MIDIByte2>=101) and (MIDIByte2<=(101+7)) and (MIDIChannel=15) and MIDIByte3<=32
		//# handle scene duration change
		scene_durs[MIDIByte2-101] = MIDIByte3
		Call @SetupLayout
	elseif (HostRunning and MIDIByte2=22 and MIDIByte3>0 and MIDIChannel=15)
		return_to_song_mode_requested = TRUE //# handle return to song mode requested
  	in_mode_select = FALSE
		songmode = 0
  	mode = 0
		ColorPad current_scene, 6
    ColorPad 8, 3
  	if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, current_scene+led_index, 3
			SendMIDINoteOn 15, 8+led_index, 3
		endif
	elseif (MIDIByte2=22 and MIDIByte3>0 and MIDIChannel=15 and not HostRunning)
		return_to_song_mode_requested = TRUE
		in_mode_select = FALSE
  	songmode = 0
  	mode = 0
		current_scene=0
		current_pattn=0
  	Call @SetupLayout
		ColorPad current_scene, 3
    ColorPad current_pattn+8, 3
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, current_scene+led_index, 3
			SendMIDINoteOn 15, 8+led_index, 3
		endif
	elseif MIDIByte2>=40 and MIDIByte2<=43 //KNTRL Knobs on CH16
		if mgen_sel_dev=mgen_device_id
			last_knob = MIDIByte2-40 //simulate  LastPad action
			SetKnobValue last_knob, MIDIByte3 // change knob position
			Call @OnKnobChange2 //handle that change
		endif
  elseif (MIDIByte2=89 and MIDIChannel=15) //copy paste scene
		in_mode_select = FALSE // return to scenes mode first
  	mode = 0
		if MIDIByte3<=7 //handle copy scene
			copied_scene = MIDIByte3
			LabelPads {Scene }, MIDIByte3+1, { copied. Ready to paste}
		elseif MIDIByte3>=8 and MIDIByte3<=15 //handle scene paste
			LabelPads {Copied scene }, copied_scene+1, { to scene }, (MIDIByte3-8)+1
			scene_durs[MIDIByte3-8] = scene_durs[copied_scene] 
			//# CopyArray source, dest, cells 
			CopyArray pattn_durs[copied_scene * 8], pattn_durs[(MIDIByte3-8) * 8], 8
			copy_slot=(copied_scene*128)
			paste_slot=((MIDIByte3-8)*128)
			steps_to_copy=(16*8)
			for i = 0 to 3
				copy_seq_ch=i
				Call @CopySequencePad
				paste_seq_ch=i
				Call @PasteSequencePad
			endfor
			CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 128
			CopyArray sequence_rates[copy_slot], sequence_rates[paste_slot], 128
			copied_scene = -1 //# reset
			Call @SetupLayout
		endif
	elseif MIDIByte2>=91 and MIDIByte2<=98 and MIDIByte3>0
		mgen_sel_dev=MIDIByte2-91+1 // range 1-9 to match display
		if mgen_sel_dev=mgen_device_id
			Call @OnShiftDown2 //will trigger layout setup for settings and other modes
		endif
	endif
@End

@OnSysex
  ReceiveSysex sysex_msg
  qk_msg=YES
  for i = 0 to len_header-1 //check header make sure its a QK sysex message
    if sysex_msg[i] <> qk_sysex_header[i]
      qk_msg=NO
    endif 
  endfor
  if qk_msg 
		msg_start=len_header+1 //where msg_data starts
		msg_end=SysexSize-1 //where msg_data ends
		qk_msg_type=sysex_msg[len_header] //the message type received
		if qk_msg_type = sx_scene_change //handle msg types...
			//# handle scene change requested (ie: PadDown Scene change)
			if songmode=0 and HostRunning and sysex_msg[msg_start]=current_scene //in song mode. just lock to scene
				songmode=1 // lock to scene
			elseif songmode=0 and HostRunning
			  scene_change_requested = sysex_msg[msg_start]
				songmode=1
			elseif songmode=1 and HostRunning //locked to scene. re-trigger
				scene_change_requested = sysex_msg[msg_start]
				edit_scene=last_pad
			elseif NOT HostRunning //# immediate change else newbeat/bar handles
				scene_change_requested = sysex_msg[msg_start]
				songmode=1 // lock to scene
				Call @HandleSceneChange 
			endif
			Call @SetupLayout	
		endif
	endif
@End

@ReverseSequence //# reverse a sequence
	start_ch=0
	end_ch=3
	if label_style=4 //# only reverse current channel
		start_ch=seq_ch
		end_ch=seq_ch
	endif
	for ch = start_ch to end_ch
		copy_seq_ch=ch
		paste_seq_ch=ch
		steps_to_copy=16 //# Copy all 16 steps to temp arrays
		copy_slot=(current_scene*128)+(current_pattn*16)
		Call @CopySequencePad
		temp_ccs=[]		
		CopyArray copied_seq_ccs, temp_ccs, 16
		steps_to_copy=1
		for i = 0 to 15 //# Paste steps in reverse one by one
			paste_slot=(current_scene*128)+(current_pattn*16) + (15-i)	
			copied_seq_ccs = [temp_ccs[i]]
			Call @PasteSequencePad
		endfor
	endfor
@End

@ResetScenePatternSequence //# handle reset of a scene, pattern or sequence step
	//# reset sequence single channel use ALL knob in edit mode. notes to reset to per seq_ch		
	if note_set_type=0 //# scale mode
		reset_note_vals=[0,3,6,10]
	elseif note_set_type=1 //# fixed note set
		reset_note_vals=[0,1,5,2]
	elseif note_set_type=1 //# kit 4 notes only
		reset_note_vals=[0,1,2,3]
	endif
	reset_all_channels=TRUE
 	if reset_type=0 //# Reset scene
	  //# Reset scene: Duration, Txpose, Preset, modes for ch's 1-4, out ch's ON1-4, pgm_chg_msg
	  scene_durs[last_pad] = 0
	  pattn_slot = (last_pad * 8)
		pattn_durs[current_scene*8] = [0,0,0,0,0,0,0,0]
		paste_slot=(last_pad*128)
		steps_to_copy=(16*8)
		reset_slot=(current_scene*128)			
		FillArray sequence_lengths[reset_slot], def_sequence_length, 128
		FillArray sequence_rates[reset_slot], def_sequence_rate, 128
		num_scns_with_dur=last_pad-1 //RND only selects scenes before deleted scn
		num_ptns_with_dur[current_scene]=0 //del scene also dels pattns
	elseif reset_type=1 //# reset pattern
		pattn_slot = (current_scene * 8) + (last_pad - 8) 
  	pattn_durs[pattn_slot] = 0
  	paste_slot=(current_scene*128)+((last_pad-8)*16)
		steps_to_copy=16
		reset_slot=(current_scene*128)+((last_pad-8)*16)
		FillArray sequence_lengths[reset_slot], def_sequence_length, 16
		FillArray sequence_rates[reset_slot], def_sequence_rate, 16
		num_ptns_with_dur[current_scene]=last_pad-8-1 //RND only selects pattns before deleted pattn
 	elseif reset_type=2 //# reset seq step
 		paste_slot=(current_scene*128)+(current_pattn*16)+last_pad
		steps_to_copy=1
		if label_view_mode=4 //#copypaste seq_ch only
			reset_all_channels=FALSE
		endif
 	endif 	
	Call @SetupLayout
@End

@CopyPaste //# copy paste scenes. patterns. sequences
	if last_pad <=7 and not in_seq_mode
		LabelPads {Copied scene }, copied_scene+1, { to scene }, last_pad+1
		scene_durs[last_pad] = scene_durs[copied_scene] 
		//# CopyArray source, dest, cells 
		CopyArray pattn_durs[copied_scene * 8], pattn_durs[last_pad * 8], 8
		//# Also copy sequence information
		copy_slot=(copied_scene*128)
		paste_slot=(last_pad*128)
		steps_to_copy=(16*8)
		for i = 0 to 3
			copy_seq_ch=i
			Call @CopySequencePad
			paste_seq_ch=i
			Call @PasteSequencePad
		endfor
		CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 128
		CopyArray sequence_rates[copy_slot], sequence_rates[paste_slot], 128
		Call @UpdateScenesWithDuration
		Call @UpdatePattnsWithDuration
	elseif last_pad >= 8 and not in_seq_mode //# handle copy pasting a pattern
		LabelPads	{Copied S}, copied_scene+1, { Pattern }, copied_pattn+1, { to }, { S}, current_scene+1, { Pattern }, last_pad-7
		pattn_slot_from = (copied_scene*8) + copied_pattn
		pattn_slot_to = (current_scene*8) + (last_pad-8)
		pattn_durs[pattn_slot_to] = pattn_durs[pattn_slot_from]
		//# Also copy sequence information
		copy_slot=(copied_scene*128)+(copied_pattn*16)
		paste_slot=(current_scene*128)+((last_pad-8)*16)
		steps_to_copy=16
		for i = 0 to 3
			copy_seq_ch=i
			Call @CopySequencePad
			paste_seq_ch=i
			Call @PasteSequencePad
		endfor
		CopyArray sequence_lengths[copy_slot], sequence_lengths[paste_slot], 16
		CopyArray sequence_rates[copy_slot], sequence_rates[paste_slot], 16
		Call @UpdatePattnsWithDuration
	elseif in_seq_mode and return_to_mode=9 //# edit mode copy single pads
		//# handle copypaste a single seq_pad
		copy_slot=(current_scene*128)+(current_pattn*16)+copied_seq_pad
		paste_slot=(current_scene*128)+(current_pattn*16)+last_pad
		steps_to_copy=1
		if label_view_mode=4 //#copypaste seq_ch only
			copy_seq_ch=copied_ch
			Call @CopySequencePad
			paste_seq_ch=seq_ch
			Call @PasteSequencePad
		elseif label_view_mode=5 //# copypaste all seq_chs
			for i = 0 to 3
				copy_seq_ch=i
				Call @CopySequencePad
				paste_seq_ch=i
				Call @PasteSequencePad
			endfor
		endif
	elseif in_seq_mode and return_to_mode=11 //# Seq mode copy all 16 steps
		copy_slot=(current_scene*128)+(current_pattn*16)
		paste_slot=(current_scene*128)+(current_pattn*16)
		steps_to_copy=16
		copy_seq_ch=copied_ch
		Call @CopySequencePad
		paste_seq_ch=seq_ch
		Call @PasteSequencePad
		copy_slot=(current_scene*128) + (current_pattn*16) + copy_seq_ch
		paste_slot=(current_scene*128) + (current_pattn*16) + paste_seq_ch
		sequence_lengths[paste_slot] = sequence_lengths[copy_slot]
		sequence_rates[paste_slot] = sequence_rates[copy_slot]
	endif
	copied_scene = -1 //# reset
	copied_pattn = -1
	copied_seq_pad = -1
	copy_paste_status=0 //# off
	mode=return_to_mode
	Call @SetupLayout
@End

@CopySequencePad //# Copy part of COPY/PASTE sequence pad
	//# Separate so user can switch ch between copy and paste
	copied_seq_ccs=[]
	if copy_seq_ch=0 //# copy...
		CopyArray seq0_ccs[copy_slot], copied_seq_ccs, steps_to_copy
	elseif copy_seq_ch=1 //# copy...
		CopyArray seq1_ccs[copy_slot], copied_seq_ccs, steps_to_copy
	elseif copy_seq_ch=2 //# copy...
		CopyArray seq2_ccs[copy_slot], copied_seq_ccs, steps_to_copy
	elseif copy_seq_ch=3 //# copy...
		CopyArray seq3_ccs[copy_slot], copied_seq_ccs, steps_to_copy
	endif
@End

@PasteSequencePad //# PASTE portion of copy/paste sequence pad
	sequence_num=(current_scene*128)+(current_pattn*16)+(paste_seq_ch)
	if paste_seq_ch=0
		CopyArray copied_seq_ccs, seq0_ccs[paste_slot], steps_to_copy
	elseif paste_seq_ch=1
		CopyArray copied_seq_ccs, seq1_ccs[paste_slot], steps_to_copy
	elseif paste_seq_ch=2
		CopyArray copied_seq_ccs, seq2_ccs[paste_slot], steps_to_copy
	elseif paste_seq_ch=3
		CopyArray copied_seq_ccs, seq3_ccs[paste_slot], steps_to_copy
	endif
@End

@SetupKnobset99
	SetKnobValue 0, TranslateScale mgen_device_id, 0, 9, 0, 127
	SetKnobValue 0, 0
	SetKnobValue 2, TranslateScale rnd_scn_chance, 0, 100, 0, 127
	SetKnobValue 3, TranslateScale rnd_ptn_chance, 0, 100, 0, 127
	Call @LabelSettingsKnobs
@End
@KnobChangeSet99 //settings knobs
	if last_knob = 0
	  val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 9
		if val <> mgen_device_id
			mgen_device_id=val
			if mgen_device_id
				LabelKnob 0, {mgen# }, mgen_device_id
			else
				LabelKnob 0, {mgen# -}
			endif
		endif
	elseif last_knob = 2
	  val = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 100
	  if val <> rnd_scn_chance 	
		  rnd_scn_chance = val
			Call @LabelSettingsKnobs
	  endif
  elseif last_knob = 3
	  val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 100
	  if val <> rnd_ptn_chance 	
		  rnd_ptn_chance = val
			Call @LabelSettingsKnobs
	  endif
	endif
@End
@LabelSettingsKnobs
	if mgen_device_id
		LabelKnob 0, {mgen# }, mgen_device_id
	else
		LabelKnob 0, {mgen# -}
		endif
	LabelKnob 1, { }
	LabelKnob 2, {RndScn}, rnd_scn_chance
	LabelKnob 3, {RndPtn}, rnd_ptn_chance
	LabelKnobs { }
@End

@SetupKnobset0 //# Scene settings
	knob_set = 0
	pattn_slot = (current_scene * 8) + current_pattn
  patt_dur = pattn_durs[pattn_slot]
	SetKnobValue 0, TranslateScale scene_durs[current_scene], 0, 32, 0, 127
	SetKnobValue 1, 0
	SetKnobValue 2, TranslateScale patt_dur, 0, 16, 0, 127
	SetKnobValue 3, 0
	Call @LabelKnobset0
@End
@KnobChangeSet0 
	// scene / sequence durations
	if last_knob = 0
	  scn_duration = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 32
	  if scn_duration <> scene_durs[current_scene] 	
		  scene_durs[current_scene] = scn_duration
	  	Call @LabelKnobset0
			Call @UpdateScenesWithDuration
	  endif
		scn_to_label = current_scene
		Call @LabelScenePad
  endif
	if last_knob = 2
	  pattn_duration = Round TranslateScale (GetKnobValue 2), 0, 127, 0, 16
		if pattn_duration <> pattn_durs[pattn_slot] 
		  pattn_durs[pattn_slot] = pattn_duration
			Call @SetSequenceLength //based on sequence_rate and pattn_dur
			Call @LabelKnobset0
			scene_to_check=current_scene
			Call @UpdatePattnsWithDuration
  	endif
		pattn_to_label = current_pattn+8
		Call @LabelPatternPad
  endif
@End
@LabelKnobset0
	LabelKnobs {DURATIONS }
	LabelKnob 0, {SCN}, current_scene+1, { }, scene_durs[current_scene], {b}
	LabelKnob 1, { }
	LabelKnob 2, {SEQ}, current_pattn+1, { },  pattn_durs[pattn_slot], {b}
	LabelKnob 3, { }
@End

@SetSequenceLength
	//number of steps in a sequence
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
	seq_rate = pulses_per_note[sequence_rates[sequence_num]] // 4 or 16
	pattn_slot = (current_scene * 8) + (current_pattn)
	if seq_rate = 16
		sequence_lengths[sequence_num] = Clip pattn_durs[pattn_slot], 0, 16
	elseif seq_rate = 4
	 	sequence_lengths[sequence_num] = Clip (pattn_durs[pattn_slot] * 4), 0, 16
	endif
@End

@UpdateScenesWithDuration
	for s = 0 to 7 //Update number of scenes with duration for random selection
		if scene_durs[s] > 0
			num_scns_with_dur=s
		else
		  Exit
		endif	
	endfor
@End
@UpdatePattnsWithDuration
	for p = 0 to 7 //Update number of patterns in scene with duration for random selection
		if pattn_durs[(current_scene * 8) + p] > 0
			num_ptns_with_dur[current_scene]=p
		else
		  Exit
		endif	
	endfor
@End

@SetupKnobset2 
	// 8 ATOMS TO SEQUENCE aka MIDI OUT CHANNELS because each of the 16 ATOMS has its own midi channel
  knob_set = 2
	Call @LabelKnobSet2
  SetKnobValue 0, TranslateScale edit_atom, 0, 7, 0, 127
  SetKnobValue 1, TranslateScale midi_out_chs[edit_atom], 0, 15, 0, 127
  SetKnobValue 2, 0
  SetKnobValue 3, 0
@End
@KnobChangeSet2
	// 8 ATOMS TO SEQUENCE aka MIDI OUT CHANNELS because each of the 16 ATOMS has its own midi channel
	if last_knob = 0 
    val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 7
		if val <> edit_atom
			edit_atom = val
			Call @LabelKnobSet2
			label_atom=midi_out_chs[edit_atom]
			Call @LabelAtom
		endif
	elseif last_knob = 1 
    val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 15
		if val <> midi_out_chs[edit_atom]
			midi_out_chs[edit_atom] = val
			Call @LabelKnobSet2
			label_atom=midi_out_chs[edit_atom]
			Call @LabelAtom
		endif
	endif	
@End
@LabelKnobSet2
	LabelKnobs {SELECT ATOMS} 
  LabelKnob 0, {ATOM: }, edit_atom+1
  LabelKnob 1, {CH: }, midi_out_chs[edit_atom]+1
  LabelKnob 2, { }
  LabelKnob 3, { }
  CopyArray  midi_out_chs, moc, 8
	LabelPads {Select 8 Atom instances to be sequenced from the bank of 16}
	LabelPad 4, {__SELECT__ }, { [}, moc[0]+1,{-}, moc[1]+1,{-}, moc[2]+1,{-}, moc[3]+1,{] }, { [}, moc[4]+1,{-}, moc[5]+1,{-}, moc[6]+1,{-}, moc[7]+1,{] }  
@End

@SetupKnobset4 
	//Setup the 16 ATOM instances in the ATOM bank
  knob_set = 4
  LabelKnobs {ATOM SETUP}  
	Call @LabelKnobSet4
  SetKnobValue 0, TranslateScale edit_atom, 0, 15, 0, 127
  SetKnobValue 1, TranslateScale atom_names[edit_atom], 0, num_atom_names, 0, 127
  SetKnobValue 2, 0
  SetKnobValue 3, 0
@End
@KnobChangeSet4
	//Setup the 16 ATOM instances in the ATOM bank
	if last_knob = 0 
    val = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 15
		if val <> edit_atom
			edit_atom = val
			Call @LabelKnobSet4
			SetKnobValue 1, TranslateScale atom_names[edit_atom], 0, num_atom_names, 0, 127
		endif
	elseif last_knob = 1 
    val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, num_atom_names
		if val <> atom_names[edit_atom]
			atom_names[edit_atom] = val
			Call @LabelKnobSet4
		endif
	endif		
@End
@LabelKnobSet4
	LabelKnob 0, {ATOM: }, edit_atom+1
  LabelKnob 1, {NAME: }, atom_names[edit_atom]+1
  LabelKnob 2, { }
  LabelKnob 3, { }
	label_atom=edit_atom
	Call @LabelAtom
@End

@GetStepVal 
	//# The pattern number associated with this step
	sel_pad_type=1 //# set so visible when editing. not saved
	seq_type_min=-1
	seq_type_max=atom_max_patterns[seq_ch]-1
	if seq_ch=0
  	step_val=seq0_ccs[step_slot]
  elseif seq_ch=1
  	step_val=seq1_ccs[step_slot]
  elseif seq_ch=2
  	step_val=seq2_ccs[step_slot]
  elseif seq_ch=3
  	step_val=seq3_ccs[step_slot]
	endif
@End

@SetStepVal 
	//# The pattern number associated with this step	
  sel_pad_type=1 //# set so visible when editing.
  if seq_ch=0
  	seq0_ccs[step_slot]=step_val
  elseif seq_ch=1
  	seq1_ccs[step_slot]=step_val
  elseif seq_ch=2
  	seq2_ccs[step_slot]=step_val
  elseif seq_ch=3
  	seq3_ccs[step_slot]=step_val
	endif
@End

@SetupKnobset5 
	//# PATTERN EDIT MODE
  knob_set = 5
  step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
	Call @GetStepVal //# the pattern number associated with this step
	if Round TranslateScale (GetKnobValue 0), 0, 127, 0, 3 <> seq_ch
	  SetKnobValue 0, TranslateScale seq_ch, 0, 3, 0, 127
  endif	
	SetKnobValue 1, TranslateScale sequence_rates[sequence_num], 0, 1, 0, 127
  SetKnobValue 2, TranslateScale step_val, seq_type_min, seq_type_max, 0, 127
  SetKnobValue 3, TranslateScale move_all, 0, 1, 0, 127
  Call @LabelSet5Knobs
@End
@KnobChangeSet5 //# PATTERN EDIT currently selected step/pad (out of 16) in a pattern
	step_slot=(current_scene*128)+(current_pattn*16)+sel_step
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
  if last_knob = 0 //# SEQ_CH
    seq_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 3
		Call @GetStepVal
    SetKnobValue 2, TranslateScale step_val, seq_type_min, seq_type_max, 0, 127
		Call @SetupLayout
  endif
	if (last_knob=1) //# PATTERN STEP RATE - Bar or Beat
    val = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 1
  	if sequence_rates[sequence_num] <> val
  		sequence_rates[sequence_num]=val
			Call @SetSequenceLength
			Call @LabelAllSequencePads
		endif	
	endif
  if (last_knob=2) //# STEP VAL FOR SEQ
    step_val = Round TranslateScale (GetKnobValue 2), 0, 127, seq_type_min, seq_type_max
    if move_all
			rtn_to_step_slot=step_slot
			for i = 0 to 15
				step_slot=(current_scene*128)+(current_pattn*16)+i
				Call @SetStepVal
			endfor
			step_slot=rtn_to_step_slot
			Call @LabelAllSequencePads
		else 
			Call @SetStepVal
		endif
  endif
  if (last_knob=3) //# ALL STEPS
    val = Round TranslateScale (GetKnobValue 3), 0, 127, 0, 1
  	if move_all <> val
  		move_all=val
		endif	
  endif
  Call @LabelSet5Knobs
  sel_pad = sel_step
  step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
  Call @LabelSequencePad
@End
@LabelSet5Knobs
	if move_all=1
		FlashPad 14
		FlashPad 15
	endif
	LabelKnobs {SEL STEP}, sel_step+1
	LabelKnob 0, {CH: }, seq_ch+1
	if sequence_rates[sequence_num]
		LabelKnob 1, {Rate: Bar}
	else // beat_pulse
	  LabelKnob 1, {Rate: Beat}
	endif
	if (step_val=-1)
	  LabelKnob 2, {Off}
	else
		LabelKnob 2, {P},step_val+1 //pattern number display
	endif
	if move_all=1	
	  LabelKnob 3, {<< ALL >>}
	else
		LabelKnob 3, {< Move1 >}
	endif 
@End

@MoveAllSteps 
	//# Move all steps in step edit mode
	for i = 0 to 15
		slot=(current_scene*128)+(current_pattn*16)+i
		if seq_ch=0
			seq0_ccs[slot] = Clip (seq0_ccs[slot]+ move_all_dir), -1, 127
		elseif seq_ch=1
			seq1_ccs[slot] = Clip (seq1_ccs[slot]+ move_all_dir), -1, 127
		elseif seq_ch=2
			seq2_ccs[slot] = Clip (seq2_ccs[slot]+ move_all_dir), -1, 127
		elseif seq_ch=3
			seq3_ccs[slot] = Clip (seq3_ccs[slot]+ move_all_dir), -1, 127
		endif
	endfor
	label_style=seq_type
	Call @LabelAllSequencePads
@End

@RotateSequence //# rotate a selected sequence. requires args rotation(-1 or +1), old_seq
	step_slot=(current_scene*128)+(current_pattn*16)
	FillArray old_ccs, 0, 16
	FillArray new_ccs, 0, 16
	if seq_ch=0
		CopyArray seq0_ccs[step_slot], old_ccs, 16
	elseif seq_ch=1
		CopyArray seq1_ccs[step_slot], old_ccs, 16
	elseif seq_ch=2
		CopyArray seq2_ccs[step_slot], old_ccs, 16
	elseif seq_ch=3
		CopyArray seq3_ccs[step_slot], old_ccs, 16
	endif
	for i = 0 to 15
		if rot_dir=-1
			old_index=(i+1)%16
		elseif rot_dir=1
			old_index=i-1
			if old_index<0
				old_index=15
			endif
		endif
		new_ccs[i]   = old_ccs[old_index]
	endfor
	if seq_ch=0
		CopyArray new_ccs, seq0_ccs[step_slot], 16
	elseif seq_ch=1
		CopyArray new_ccs, seq1_ccs[step_slot], 16
	elseif seq_ch=2
		CopyArray new_ccs, seq2_ccs[step_slot], 16
	elseif seq_ch=3
		CopyArray new_ccs, seq3_ccs[step_slot], 16
	endif
	CopyArray new_steps, n, 16
	// Log n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]
	Call @LabelAllSequencePads
@end

@SetupKnobset9 //# ROTATION
  knob_set = 9
  SetKnobValue 0, TranslateScale seq_ch, 0, 3, 0, 127
  SetKnobValue 1, 0
  SetKnobValue 2, TranslateScale rot_dir, -1, 1, 0, 127
  SetKnobValue 3, 0
  FlashPad 14 //attention use these to rotate
	FlashPad 15 
	Call @LabelKnobset9
@End
@KnobChangeSet9
  //# ROTATION xs9
  if last_knob = 0
    new_seq_ch = Round TranslateScale (GetKnobValue 0), 0, 127, 0, 3
		if new_seq_ch <> seq_ch
			seq_ch=new_seq_ch
			Call @LabelAllSequencePads
			Call @LabelKnobset9
		endif
	endif
  if last_knob = 1
    rot_type = Round TranslateScale (GetKnobValue 1), 0, 127, 0, 5
		if val <> rot_type
			rot_type=val
			Call @LabelKnobset9
		endif
	endif
@End
@LabelKnobset9
	LabelKnobs {TAP P15 & P16 TO ROTATE}
 	LabelKnob 0, {CH: }, seq_ch+1
	if rot_dir=0
		LabelKnob 2, {<ROT>}
  elseif rot_dir=-1
  	LabelKnob 2, {<<< ROT}
  else
  	LabelKnob 2, {ROT >>>}
	endif
	LabelKnob 3, { } //# not in use
@End

@OnKnobChange
  last_knob=LastKnob
	Call @OnKnobChange2
@End
	
@OnKnobChange2
	//# Knob change router
  if knob_set = 0 
    Call @KnobChangeSet0 //# scene settings
	elseif knob_set = 2
    Call @KnobChangeSet2 //# select 8 atoms for sequencing
	elseif knob_set = 4
    Call @KnobChangeSet4 //# setup all atom instances (16)
  elseif knob_set = 5
    Call @KnobChangeSet5 //# SEQUENCE STEPS EDIT
	elseif knob_set = 9
    Call @KnobChangeSet9 //# ROTATION
	elseif knob_set = 99 //settings layout
		Call @KnobCHangeSet99
	endif
@End  

@OnShiftDown
  Call @OnShiftDown2 //simply to allow midi note in simulation of SHIFT Note16 any channel
@End

@OnShiftDown2
	if in_mode_select
		in_mode_select = FALSE
		if mode>=8
			in_seq_mode=TRUE
		endif
		Call @OnPadDown_KnobSetSelect				
		Call @SetupLayout
	else
		// #Mode selection for Knobs n Pads
		in_mode_select = TRUE
		in_seq_mode=FALSE
		if mode=6 or mode=7 //# in cp or del shift will exit
			mode=return_to_mode //# cancel cp/del
		endif
		Call @SetupSettingsLayout
	endif
@End

@SetupSettingsLayout
	copy_paste_status=0 //# In case COPYPASTE aborted
	knob_set=99
	if (songmode = 0)
		LabelPad 0, {PLAYSONG: Active }
	elseif (songmode = 1)
		LabelPad 0, {PLAYSONG: Scene locked}
	elseif (songmode = 2)
		LabelPad 0, {PLAYSONG: Pattern locked}
	else
		LabelPad 0, {PLAYSONG: Disabled}
	endif
	LabelPad 1, {SCENES}
	LabelPad 2, { }
	LabelPad 3, {QUICK CONFIG}
	Call @LabelKnobSet2
	LabelPad 5, {SETUP ATOMS}
	LabelPad 6, { }
	if mode<=1
		if last_pad<=7 //# copy scene or chord
			LabelPad 6, {COPY/PASTE }, {SCENE }, current_scene+1
			copy_mode=0 //# copy scene
		else
			LabelPad 6, {COPY/PASTE }, {SEQUENCE }, current_pattn+1
			copy_mode=1  //# copy pattn. allows switch scene b4 paste
		endif
	elseif mode=9
		LabelPad 6, {COPY/PASTE }, {STEP }, sel_step+1
	elseif mode=11
		LabelPad 6, {COPY/PASTE }, {SEQ CH}, seq_ch+1
	endif
	if (mode>=8 or mode<=1)
		LabelPad 7, {DELETE  }
	endif
	LabelPad 8, {  >GUI }
	LabelPad 9, {  >LAUNCH }
	LabelPad 10, {  >MUTE }
	LabelPad 11, {EDIT}
	LabelPad 12, {PERFORM}
	LabelPad 13, {ROTATE PATTERNS}
	if label_view_mode=4
		LabelPad 14, {REVERSE     }, {S},current_scene+1, { P},current_pattn+1, { CH}, seq_ch+1
	elseif label_view_mode=5
		LabelPad 14, {REVERSE     }, {S},current_scene+1, { P},current_pattn+1, { CHS1-4}
	endif
	LabelPad 15, { }
	if label_view_mode=5
		LabelPad 15, {PROCESS     }, {  ALL CH's}
	elseif label_view_mode=4
		LabelPad 15, {PROCESS     }, {  CH#}, seq_ch+1
	endif
	settings_pad_cols=[7,4,0,5,5,5,4,1, 0,3,0,4,4,2,1,2]	
	for i = 0 to (number_of_modes - 1)
		ColorPad i, settings_pad_cols[i]
		if mgen_device_id=mgen_sel_dev
			SendMIDINoteOn 15, i+led_index, settings_pad_cols[i]
		endif
		LatchPad i, NO 
	endfor
	Call @SetupKnobset99 //settings knobs
	atom_to_label=seq_ch
	Call @LabelAtom
	LatchPad mode, YES
@End

@LabelScenePad //# Set scn_to_label var before calling
	sc_dur = scene_durs[scn_to_label]
	LabelPad scn_to_label, { Scene }, scn_to_label+1, {    }, { [}, sc_dur, { bars]}
	ColorPad scn_to_label, 2
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, scn_to_label+led_index, 2
	endif
@End

@LabelPatternPad //# Set pattn_to_label var before calling 
	pattn_slot = (current_scene * 8) + (pattn_to_label-8)
	LabelPad pattn_to_label, { Sequence }, pattn_to_label-8+1, {    }, {[}, pattn_durs[pattn_slot], { bars]}
	ColorPad pattn_to_label, 2
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, pattn_to_label+led_index, 2
	endif
@End

@SetupLayout //#setup layout pads
  if in_mode_select
  	Exit
  elseif in_seq_mode
  	Call @SetupSeqLayout
  else
	 //# Setup scene pads
	 FillArray scn_pad_cols, 0, 16
   for i = 0 to 7  
	    if scene_durs[i] > 0
				scn_to_label = i
				Call @LabelScenePad
				scn_pad_cols[i]=2
	  	else
	  		LabelPad i, { }
	  	endif
	    LatchPad i, NO
	    if (scene_durs[i] > 0) and (mode = 7) and NOT in_mode_select
				scn_pad_cols[i]=1 
	    endif
	  endfor		  
	  //# Setup pattn pads  
    for i = 8 to 15
	    pattn_slot = (current_scene*8) + (i-8)
	    LatchPad i, NO
	    if pattn_durs[pattn_slot] > 0
	    	pattn_to_label = i
	    	Call @LabelPatternPad
				scn_pad_cols[i]=2
	    else
	  		LabelPad i, { }
	  	endif
	    if (mode = 7) and (pattn_durs[pattn_slot] > 0)
				scn_pad_cols[i]=1
		  endif
	  endfor
		//# Handle current scene and pattn colors
		if (songmode = 0) //# Playthru no lock
	  	scn_pad_cols[current_scene]=3
	  	scn_pad_cols[current_pattn+8]=3
	  elseif (songmode = 1) //# Lock to scene
	    scn_pad_cols[current_pattn+8]=3
			scn_pad_cols[current_scene]=4
	  elseif (songmode = 2)
	    scn_pad_cols[current_pattn+8]=4
			scn_pad_cols[current_scene]=4
	  endif
		if return_to_song_mode_requested
			scn_pad_cols[current_scene]=6
		endif
		//# Handle pending pattn and scene changes in playback
	  if HostRunning and (songmode <=2)
	  	if pattn_change_requested >= 0
				scn_pad_cols[pattn_change_requested+8]=6
	  	endif
	  	if scene_change_requested >= 0
	  		scn_pad_cols[scene_change_requested]=6
	  	endif
	  endif
		for i = 0 to 15
			ColorPad i, scn_pad_cols[i]
			if mgen_device_id=mgen_sel_dev
				SendMIDINoteOn 15, i+led_index, scn_pad_cols[i]
			endif
		endfor
	endif
	label_atom=seq_ch
	Call @LabelAtom  
@End

@SetupSeqLayout
	//# sequence mode layout
	if mode = 9
		label_style=4
	  Call @SetupKnobset5 //# SEQUENCE EDIT ALL TYPES
	elseif mode = 12
    label_style=4
	  Call @SetupKnobset9 //# ROTATE
	  LabelPads {ROTATE SEQUENCE: Select CH. Tap  <<pad15 or pad16>> to rotate.}
	endif 
	Call @LabelAllSequencePads
@End

@UpdateSelStepType //# change a seq pad from on to off
	step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
	if seq_ch=0
		seq0_steps[step_slot] = (seq0_steps[step_slot]+1)%2
	elseif seq_ch=1
		seq1_steps[step_slot] = (seq1_steps[step_slot]+1)%2
	elseif seq_ch=2
		seq2_steps[step_slot] = (seq2_steps[step_slot]+1)%2
	elseif seq_ch=3
		seq3_steps[step_slot] = (seq3_steps[step_slot]+1)%2
	endif
	Call @LabelSequencePad
@End

@LabelAllSequencePads //# label all sequence pads xlasp
	for i = 0 to 15
		sel_pad = i
		step_slot=(current_scene*128)+(current_pattn*16)+sel_pad
		Call @LabelSequencePad
		Call @ColorSequencePad
		LatchPad i, NO
	endfor
@End

@ColorSequencePad //# ColorPad Is the selected pad off - on - sustain prev.
	padColor=0
	if cc[seq_ch]>=0
		padColor=4	
	endif
	if sel_pad_type=0 //# stored value
		padColor=0
	endif
	if (mode=7) and (sel_pad_type>0) //# delete reset pads mode
		padColor=1
	endif
	//# Off pads past pattn length
	if sel_pad >= pattn_length
		padColor = 5
	endif
	//# Selected step
	if (sel_pad=sel_step) and mode=9 and seq_type<4
		padColor=3
	endif
	if mgen_device_id=mgen_sel_dev
		SendMIDINoteOn 15, sel_pad+led_index, padColor //LED FEEDBACK
	endif
	ColorPad sel_pad, padColor
@End

@LabelSequencePad //# label sequence pads 
	sequence_num=(current_scene*128) + (current_pattn*16) + seq_ch
	pattn_length = sequence_lengths[sequence_num]
	cc0=seq0_ccs[step_slot]
	cc1=seq1_ccs[step_slot]
	cc2=seq2_ccs[step_slot]
	cc3=seq3_ccs[step_slot]
	cc=[cc0,cc1,cc2,cc3]	
	if cc[seq_ch] >= 0 and pattern_trigger_modes[seq_ch]=3 //trigger by CC Value
		LabelPad sel_pad, {___P}, cc[seq_ch]+1, {____  }, {cc}, midi_out_chs[seq_ch]+1, { - },cc[seq_ch]
	else
	  LabelPad sel_pad, {_____}, {X_____  }, {     No Trigger    }
	endif
  //# Hide data for pads outside seq length
  if sel_pad >= pattn_length
		LabelPad sel_pad, { }
	endif
@End

@LabelAtom
	//Label pads and pad8 in settings mode with the assigned name of the ATOM instance
	// if adding to this list update num_atom_names in @InitKnobVariables
	if atom_names[label_atom]=0
		LabelPads {ATOM: KICK/LO-TOM}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=1
		LabelPads {ATOM: SNARE/CLAP}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=2
		LabelPads {ATOM: HATS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=3
		LabelPads {ATOM: HAT2/RIDE}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=4
		LabelPads {ATOM: PERCS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=5
		LabelPads {ATOM: DRUMS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=6
		LabelPads {ATOM: BASS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=7
		LabelPads {ATOM: LEAD}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=8
		LabelPads {ATOM: PADS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=9
		LabelPads {ATOM: PLUCK}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=10
		LabelPads {ATOM: ARP1}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=11
		LabelPads {ATOM: ARP2}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=12
		LabelPads {ATOM: MELODY}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=13
		LabelPads {ATOM: HARMONY}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=14
		LabelPads {ATOM: KEYS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=15
		LabelPads {ATOM: DRONE}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=16
		LabelPads {ATOM: SWELL}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=17
		LabelPads {ATOM: KEYS}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=18
		LabelPads {ATOM: FX}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=19
		LabelPads {ATOM: DRUM COMP.}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=20
		LabelPads {ATOM: SKAKA}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=21
		LabelPads {ATOM: ROZETTA BASSLINE}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=21
		LabelPads {ATOM: SLAMMER}	, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	elseif atom_names[label_atom]=22
		LabelPads {ATOM: TING}, {  Scene: }, current_scene+1, { Sequence: }, current_pattn+1
	endif
@End

